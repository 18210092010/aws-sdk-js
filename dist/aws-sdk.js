;(function(e,t,n,r){function i(r){if(!n[r]){if(!t[r]){if(e)return e(r);throw new Error("Cannot find module '"+r+"'")}var s=n[r]={exports:{}};t[r][0](function(e){var n=t[r][1][e];return i(n?n:e)},s,s.exports)}return n[r].exports}for(var s=0;s<r.length;s++)i(r[s]);return i})(typeof require!=="undefined"&&require,{1:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('./core');
module.exports = AWS;

require('./services/autoscaling');
require('./services/cloudformation');
require('./services/cloudfront');
require('./services/cloudsearch');
require('./services/cloudwatch');
require('./services/datapipeline');
require('./services/directconnect');
require('./services/dynamodb');
require('./services/ec2');
require('./services/elasticache');
require('./services/elasticbeanstalk');
require('./services/elastictranscoder');
require('./services/elb');
require('./services/emr');
require('./services/glacier');
require('./services/iam');
require('./services/importexport');
require('./services/opsworks');
require('./services/rds');
require('./services/redshift');
require('./services/route53');
require('./services/s3');
require('./services/ses');
require('./services/simpledb');
require('./services/simpleworkflow');
require('./services/sns');
require('./services/sqs');
require('./services/storagegateway');
require('./services/sts');

},{"./core":2,"./services/autoscaling":3,"./services/cloudformation":4,"./services/cloudfront":5,"./services/cloudsearch":6,"./services/cloudwatch":7,"./services/datapipeline":8,"./services/directconnect":9,"./services/dynamodb":10,"./services/ec2":11,"./services/elasticache":12,"./services/elasticbeanstalk":13,"./services/elastictranscoder":14,"./services/elb":15,"./services/emr":16,"./services/glacier":17,"./services/iam":18,"./services/importexport":19,"./services/opsworks":20,"./services/rds":21,"./services/redshift":22,"./services/route53":23,"./services/s3":24,"./services/ses":25,"./services/simpledb":26,"./services/simpleworkflow":27,"./services/sns":28,"./services/sqs":29,"./services/storagegateway":30,"./services/sts":31}],2:[function(require,module,exports){(function(){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

/**
 * The main AWS namespace
 */
var AWS = {};
module.exports = AWS;
require('./util');

AWS.util.update(AWS, {

  /**
   * @constant
   */
  VERSION: 'v0.9.5-pre.6',

  /**
   * @api private
   */
  ServiceInterface: {},

  /**
   * @api private
   */
  Signers: {},

  /**
   * @api private
   */
  XML: {}

});

require('./config');
require('./http');
require('./event_emitter');
require('./event_listeners');
require('./request');
require('./client');
require('./service');
require('./signers/request_signer');
require('./param_validator');

/**
 * @readonly
 * @return [AWS.EventEmitter] a collection of global event listeners that are
 *   attached to every sent request.
 * @see AWS.Request AWS.Request for a list of events to listen for
 * @example Logging the time taken to send a request
 *   AWS.events.on('send', function startSend(resp) {
 *     resp.startTime = new Date().getTime();
 *   }).on('complete', function calculateTime(resp) {
 *     var time = (new Date().getTime() - resp.startTime) / 1000;
 *     console.log('Request took ' + time + ' seconds');
 *   });
 *
 *   new AWS.S3.Client().listBuckets(); // prints 'Request took 0.285 seconds'
 */
AWS.events = new AWS.EventEmitter();

if (typeof window !== 'undefined') window.AWS = AWS;

})()
},{"./util":32,"./config":33,"./http":34,"./event_emitter":35,"./event_listeners":36,"./request":37,"./client":38,"./service":39,"./signers/request_signer":40,"./param_validator":41}],3:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('../core');

AWS.AutoScaling = AWS.Service.defineService(require('./autoscaling.api'));

module.exports = AWS.AutoScaling;

},{"../core":2,"./autoscaling.api":42}],4:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('../core');

AWS.CloudFormation = AWS.Service.defineService(require('./cloudformation.api'));

module.exports = AWS.CloudFormation;

},{"../core":2,"./cloudformation.api":43}],5:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('../core');

AWS.CloudFront = AWS.Service.defineService(require('./cloudfront.api'));

module.exports = AWS.CloudFront;

},{"../core":2,"./cloudfront.api":44}],6:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('../core');

AWS.CloudSearch = AWS.Service.defineService(require('./cloudsearch.api'));

module.exports = AWS.CloudSearch;

},{"../core":2,"./cloudsearch.api":45}],7:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('../core');

AWS.CloudWatch = AWS.Service.defineService(require('./cloudwatch.api'));

module.exports = AWS.CloudWatch;

},{"../core":2,"./cloudwatch.api":46}],8:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('../core');

AWS.DataPipeline = AWS.Service.defineService(require('./datapipeline.api'));

module.exports = AWS.DataPipeline;

},{"../core":2,"./datapipeline.api":47}],9:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('../core');

AWS.DirectConnect = AWS.Service.defineService(require('./directconnect.api'));

module.exports = AWS.DirectConnect;

},{"../core":2,"./directconnect.api":48}],10:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('../core');

AWS.DynamoDB = AWS.Service.defineService(require('./dynamodb.api'), {
  Client: {
    setupRequestListeners: function setupRequestListeners(request) {
      if (request.client.config.dynamoDbCrc32) {
        request.addListener('extractData', this.checkCrc32);
      }
    },

    /**
     * @api private
     */
    checkCrc32: function checkCrc32(resp) {
      if (!resp.request.client.crc32IsValid(resp)) {
        resp.error = AWS.util.error(new Error(), {
          code: 'CRC32CheckFailed',
          message: 'CRC32 integrity check failed',
          retryable: true
        });
      }
    },

    /**
     * @api private
     */
    crc32IsValid: function crc32IsValid(resp) {
      var crc = resp.httpResponse.headers['x-amz-crc32'];
      if (!crc) return true; // no (valid) CRC32 header
      return parseInt(crc, 10) == AWS.util.crypto.crc32(resp.httpResponse.body);
    },

    /**
     * @api private
     */
    defaultRetryCount: 10,

    /**
     * @api private
     */
    retryDelays: function retryDelays() {
      var retryCount = this.numRetries();
      var delays = [];
      for (var i = 0; i < retryCount; ++i) {
        if (i === 0) {
          delays.push(0);
        } else {
          delays.push(50 * Math.pow(2, i - 1));
        }
      }
      return delays;
    }
  }
});

module.exports = AWS.DynamoDB;

},{"../core":2,"./dynamodb.api":49}],11:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('../core');

AWS.EC2 = AWS.Service.defineService(require('./ec2.api'), {
  Client: {
    setupRequestListeners: function setupRequestListeners(request) {
      request.removeListener('extractError', AWS.EventListeners.Query.EXTRACT_ERROR);
      request.addListener('extractError', this.extractError);
    },

    /**
     * @api private
     */
    extractError: function extractError(resp) {
      // EC2 nests the error code and message deeper than other AWS Query services.
      var httpResponse = resp.httpResponse;
      var data = new AWS.XML.Parser({}).parse(httpResponse.body.toString() || '');
      if (data.Errors)
        resp.error = AWS.util.error(new Error(), {
          code: data.Errors.Error.Code,
          message: data.Errors.Error.Message
        });
      else
        resp.error = AWS.util.error(new Error(), {
          code: httpResponse.statusCode,
          message: null
        });
    }
  }
});

module.exports = AWS.EC2;

},{"../core":2,"./ec2.api":50}],12:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('../core');

AWS.ElastiCache = AWS.Service.defineService(require('./elasticache.api'));

module.exports = AWS.ElastiCache;

},{"../core":2,"./elasticache.api":51}],13:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('../core');

AWS.ElasticBeanstalk = AWS.Service.defineService(require('./elasticbeanstalk.api'));

module.exports = AWS.ElasticBeanstalk;

},{"../core":2,"./elasticbeanstalk.api":52}],14:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('../core');

AWS.ElasticTranscoder = AWS.Service.defineService(require('./elastictranscoder.api'), {
  Client: {
    setupRequestListeners: function setupRequestListeners(request) {
      request.addListener('extractError', this.extractErrorCode);
    },

    /**
     * @api private
     */
    extractErrorCode: function extractErrorCode(resp) {
      // ETS stores error type in the header
      var errorType = resp.httpResponse.headers['x-amzn-errortype'];
      if (errorType) {
        resp.error.name = resp.error.code = errorType.split(':')[0];
      }
    }
  }
});

module.exports = AWS.ElasticTranscoder;

},{"../core":2,"./elastictranscoder.api":53}],15:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('../core');

AWS.ELB = AWS.Service.defineService(require('./elb.api'));

module.exports = AWS.ELB;

},{"../core":2,"./elb.api":54}],16:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('../core');

AWS.EMR = AWS.Service.defineService(require('./emr.api'));

module.exports = AWS.EMR;

},{"../core":2,"./emr.api":55}],17:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('../core');

AWS.Glacier = AWS.Service.defineService(require('./glacier.api'), {
  Client: {
    setupRequestListeners: function setupRequestListeners(request) {
      request.on('validate', this.validateAccountId);
      request.on('build', this.addGlacierApiVersion);
      request.on('build', this.addTreeHashHeaders);
    },

    validateAccountId: function validateAccountId(request) {
      if (request.params.accountId !== undefined) return;
      request.params = AWS.util.copy(request.params);
      request.params.accountId = '-';
    },

    addGlacierApiVersion: function addGlacierApiVersion(request) {
      var version = request.client.api.apiVersion;
      request.httpRequest.headers['x-amz-glacier-version'] = version;
    },

    addTreeHashHeaders: function addTreeHashHeaders(request) {
      if (request.params.body === undefined) return;

      var hashes = request.client.computeChecksums(request.params.body);
      request.httpRequest.headers['x-amz-content-sha256'] = hashes.linearHash;

      if (!request.httpRequest.headers['x-amz-sha256-tree-hash']) {
        request.httpRequest.headers['x-amz-sha256-tree-hash'] = hashes.treeHash;
      }
    }
  }
});

AWS.util.update(AWS.Glacier.Client.prototype, {
  /**
   * @!group Computing Checksums
   */

  /**
   * Computes the SHA-256 linear and tree hash checksums for a given
   * block of Buffer data. Pass the tree hash of the computed checksums
   * as the checksum input to the {completeMultipartUpload} when performing
   * a multi-part upload.
   *
   * @example Calculate checksum of 5.5MB data chunk
   *   var glacier = new AWS.Glacier.Client();
   *   var data = new Buffer(5.5 * 1024 * 1024);
   *   data.fill('0'); // fill with zeros
   *   var results = glacier.computeChecksums(data);
   *   // Result: { linearHash: '68aff0c5a9...', treeHash: '154e26c78f...' }
   * @param data [Buffer, String] data to calculate the checksum for
   * @return [map<linearHash:String,treeHash:String>] a map containing
   *   the linearHash and treeHash properties representing hex based digests
   *   of the respective checksums.
   * @see completeMultipartUpload
   */
  computeChecksums: function computeChecksums(data) {
    if (!(data instanceof Buffer)) data = new Buffer(data);

    var mb = 1024 * 1024;
    var hashes = [];
    var hash = AWS.util.crypto.createHash('sha256');

    // build leaf nodes in 1mb chunks
    for (var i = 0; i < data.length; i += mb) {
      var chunk = data.slice(i, Math.min(i + mb, data.length));
      hash.update(chunk);
      hashes.push(AWS.util.crypto.sha256(chunk));
    }

    return {
      linearHash: hash.digest('hex'),
      treeHash: this.buildHashTree(hashes)
    };
  },

  /**
   * @api private
   */
  buildHashTree: function buildHashTree(hashes) {
    // merge leaf nodes
    while (hashes.length > 1) {
      var tmpHashes = [];
      for (var i = 0; i < hashes.length; i += 2) {
        if (hashes[i+1]) {
          var tmpHash = new Buffer(64);
          tmpHash.write(hashes[i], 0, 32, 'binary');
          tmpHash.write(hashes[i+1], 32, 32, 'binary');
          tmpHashes.push(AWS.util.crypto.sha256(tmpHash));
        } else {
          tmpHashes.push(hashes[i]);
        }
      }
      hashes = tmpHashes;
    }

    return AWS.util.crypto.toHex(hashes[0]);
  }
});

module.exports = AWS.Glacier;

},{"../core":2,"./glacier.api":56}],18:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('../core');

AWS.IAM = AWS.Service.defineService(require('./iam.api'));

module.exports = AWS.IAM;

},{"../core":2,"./iam.api":57}],19:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('../core');

AWS.ImportExport = AWS.Service.defineService(require('./importexport.api'));

module.exports = AWS.ImportExport;

},{"../core":2,"./importexport.api":58}],20:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('../core');

AWS.OpsWorks = AWS.Service.defineService(require('./opsworks.api'));

module.exports = AWS.OpsWorks;

},{"../core":2,"./opsworks.api":59}],21:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('../core');

AWS.RDS = AWS.Service.defineService(require('./rds.api'));

module.exports = AWS.RDS;

},{"../core":2,"./rds.api":60}],22:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('../core');

AWS.Redshift = AWS.Service.defineService(require('./redshift.api'));

module.exports = AWS.Redshift;

},{"../core":2,"./redshift.api":61}],23:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('../core');

AWS.Route53 = AWS.Service.defineService(require('./route53.api'), {
  Client: {
    setupRequestListeners: function setupRequestListeners(request) {
      request.on('build', this.sanitizeUrl);
    },

    sanitizeUrl: function sanitizeUrl(request) {
      var path = request.httpRequest.path;
      request.httpRequest.path = path.replace(/\/%2F\w+%2F/, '/');
    },

    setEndpoint: function setEndpoint(endpoint) {
      if (endpoint) {
        AWS.Client.prototype.setEndpoint(endpoint);
      } else {
        var opts = {sslEnabled: true}; // SSL is always enabled for Route53
        this.endpoint = new AWS.Endpoint(this.api.globalEndpoint, opts);
      }
    }
  }
});

module.exports = AWS.Route53;

},{"../core":2,"./route53.api":62}],24:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('../core');

AWS.S3 = AWS.Service.defineService(require('./s3.api'), {
  Client: {
    /**
     * @api private
     */
    constructor: function S3Client(options) {
      AWS.Client.call(this, options);
      this.setEndpoint((options || {}).endpoint, options);
    },

    setupRequestListeners: function setupRequestListeners(request) {
      request.addListener('build', this.populateURI);
      request.addListener('build', this.computeContentMd5);
      request.removeListener('validate',
        AWS.EventListeners.Core.VALIDATE_REGION);
      request.addListener('extractError', this.extractError);
      request.addListener('extractData', this.extractData);
    },

    /**
     * S3 prefers dns-compatible bucket names to be moved from the uri path
     * to the hostname as a sub-domain.  This is not possible, even for dns-compat
     * buckets when using SSL and the bucket name contains a dot ('.').  The
     * ssl wildcard certificate is only 1-level deep.
     *
     * @api private
     */
    populateURI: function populateURI(req) {
      var httpRequest = req.httpRequest;
      var b = req.params.Bucket;

      if (b) {
        if (!req.client.pathStyleBucketName(b)) {
          httpRequest.endpoint.hostname = b + '.' +
            httpRequest.endpoint.hostname;

          httpRequest.virtualHostedBucket = b; // needed for signing the request
          httpRequest.path = httpRequest.path.replace(new RegExp('^/' + b), '');
          if (httpRequest.path[0] !== '/') {
            httpRequest.path = '/' + httpRequest.path;
          }
        }
      }
    },

    /**
     * @api private
     */
    computableChecksumOperations: {
      putBucketCors: true,
      putBucketLifecycle: true,
      putBucketTagging: true,
      deleteObjects: true
    },

    /**
     * Checks whether checksums should be computed for the request.
     * If the request requires checksums to be computed, this will always
     * return true, otherwise it depends on whether {AWS.Config.computeChecksums}
     * is set.
     *
     * @param req [AWS.Request] the request to check against
     * @return [Boolean] whether to compute checksums for a request.
     * @api private
     */
    willComputeChecksums: function willComputeChecksums(req) {
      if (this.computableChecksumOperations[req.operation]) return true;
      if (!this.config.computeChecksums) return false;

      var rules = req.client.api.operations[req.operation].input.members;
      if (rules.ContentMD5 && !req.params.ContentMD5) return true;
    },

    /**
     * A listener that computes the Content-MD5 and sets it in the header.
     * @see AWS.S3.Client.willComputeChecksums
     * @api private
     */
    computeContentMd5: function computeContentMd5(req) {
      if (req.client.willComputeChecksums(req)) {
        var md5 = AWS.util.crypto.md5(req.httpRequest.body, 'base64');
        req.httpRequest.headers['Content-MD5'] = md5;
      }
    },

    /**
     * Returns true if the bucket name should be left in the URI path for
     * a request to S3.  This function takes into account the current
     * endpoint protocol (e.g. http or https).
     *
     * @api private
     */
    pathStyleBucketName: function pathStyleBucketName(bucketName) {
      // user can force path style requests via the configuration
      if (this.config.s3ForcePathStyle) return true;

      if (this.dnsCompatibleBucketName(bucketName)) {
        return (this.config.sslEnabled && bucketName.match(/\./)) ? true : false;
      } else {
        return true; // not dns compatible names must always use path style
      }
    },

    /**
     * Returns true if the bucket name is DNS compatible.  Buckets created
     * outside of the classic region MUST be DNS compatible.
     *
     * @api private
     */
    dnsCompatibleBucketName: function dnsCompatibleBucketName(bucketName) {
      var b = bucketName;
      var domain = new RegExp(/^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/);
      var ipAddress = new RegExp(/(\d+\.){3}\d+/);
      var dots = new RegExp(/\.\./);
      return (b.match(domain) && !b.match(ipAddress) && !b.match(dots)) ? true : false;
    },

    /**
     * S3 requires that path params not escape forward slashes.
     *
     * @api private
     */
    escapePathParam: function escapePathParam(value) {
      return AWS.util.uriEscapePath(String(value));
    },

    /**
     * @return [Boolean] whether response contains an error
     * @api private
     */
    successfulResponse: function successfulResponse(resp) {
      var req = resp.request;
      var httpResponse = resp.httpResponse;
      if (req.operation === 'completeMultipartUpload' &&
          httpResponse.body.toString().match('<Error>'))
        return false;
      else
        return httpResponse.statusCode < 300;
    },

    /**
     * @return [Boolean] whether the error can be retried
     * @api private
     */
    retryableError: function retryableError(error, request) {
      if (request.operation == 'completeMultipartUpload' &&
          error.statusCode === 200) {
        return true;
      } else {
        var _super = AWS.Client.prototype.retryableError;
        return _super.call(this, error, request);
      }
    },

    /**
     * Provides a specialized parser for getBucketLocation -- all other
     * operations are parsed by the super class.
     *
     * @api private
     */
    extractData: function extractData(resp) {
      var req = resp.request;
      if (req.operation === 'getBucketLocation') {
        /*jshint regexp:false*/
        var match = resp.httpResponse.body.toString().match(/>(.+)<\/Location/);
        if (match) {
          delete resp.data['_'];
          resp.data.LocationConstraint = match[1];
        }
      }
    },

    /**
     * Extracts an error object from the http response.
     *
     * @api private
     */
    extractError: function extractError(resp) {
      var codes = {
        304: 'NotModified',
        403: 'Forbidden',
        400: 'BadRequest',
        404: 'NotFound'
      };

      var code = resp.httpResponse.statusCode;
      var body = resp.httpResponse.body;
      if (codes[code] && body.length === 0) {
        resp.error = AWS.util.error(new Error(), {
          code: codes[resp.httpResponse.statusCode],
          message: null
        });
      } else {
        var data = new AWS.XML.Parser({}).parse(body.toString());
        resp.error = AWS.util.error(new Error(), {
          code: data.Code || code,
          message: data.Message || null
        });
      }
    },

    /**
     * @api private
     */
    setEndpoint: function setEndpoint(endpoint) {
      if (endpoint) {
        this.endpoint = new AWS.Endpoint(endpoint, this.config);
      } else if (this.config.region && this.config.region !== 'us-east-1') {
        var hostname = 's3-' + this.config.region + '.amazonaws.com';
        this.endpoint = new AWS.Endpoint(hostname);
      } else {
        this.endpoint = new AWS.Endpoint(this.api.globalEndpoint, this.config);
      }
    }
  }
});

AWS.S3.Client.prototype.createBucket = function createBucket(params, callback) {
  // When creating a bucket *outside* the classic region, the location
  // constraint must be set for the bucket and it must match the endpoint.
  // This chunk of code will set the location constraint param based
  // on the region (when possible), but it will not override a passed-in
  // location constraint.
  if (!params) params = {};
  var hostname = this.endpoint.hostname;
  if (hostname != this.api.globalEndpoint && !params.LocationConstraint) {
    params.LocationConstraint = this.config.region;
  }
  return this.makeRequest('createBucket', params, callback);
};

module.exports = AWS.S3;

},{"../core":2,"./s3.api":63}],25:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('../core');

AWS.SES = AWS.Service.defineService(require('./ses.api'), {
  Client: {
    /**
     * @api private
     */
    constructor: function SESClient(options) {
      options = options || {};
      options.region = options.region || 'us-east-1';
      AWS.Client.call(this, options);
    },

    /**
     * @api private
     */
    defaultEndpoint: 'us-east-1',

    /**
     * @api private
     */
    setupRequestListeners: function setupRequestListeners(request) {
      request.removeListener('validate',
        AWS.EventListeners.Core.VALIDATE_REGION);
    }
  }
});

module.exports = AWS.SES;

},{"../core":2,"./ses.api":64}],26:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('../core');

AWS.SimpleDB = AWS.Service.defineService(require('./simpledb.api'), {
  Client: {
    /**
     * @api private
     */
    setEndpoint: function setEndpoint(endpoint) {
      if (this.config.region === 'us-east-1') {
        var prefix = this.api.endpointPrefix;
        this.endpoint = new AWS.Endpoint(prefix + '.amazonaws.com');
      } else {
        AWS.Client.prototype.setEndpoint.call(this, endpoint);
      }
    }
  }
});

module.exports = AWS.SimpleDB;

},{"../core":2,"./simpledb.api":65}],27:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('../core');

AWS.SimpleWorkflow = AWS.Service.defineService(require('./simpleworkflow.api'));

module.exports = AWS.SimpleWorkflow;

},{"../core":2,"./simpleworkflow.api":66}],28:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('../core');

AWS.SNS = AWS.Service.defineService(require('./sns.api'));

module.exports = AWS.SNS;

},{"../core":2,"./sns.api":67}],29:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('../core');

AWS.SQS = AWS.Service.defineService(require('./sqs.api'), {
  Client: {
    setupRequestListeners: function setupRequestListeners(request) {
      request.addListener('build', this.buildEndpoint);
    },

    buildEndpoint: function buildEndpoint(request) {
      var url = request.httpRequest.params.getValue('QueueUrl');
      if (url) {
        request.httpRequest.endpoint = new AWS.Endpoint(url);

        // signature version 4 requires the region name to be set,
        // sqs queue urls contain the region name
        /*jshint regexp:false*/
        var matches = request.httpRequest.endpoint.host.match(/^sqs\.(.+?)\./);
        if (matches) request.httpRequest.region = matches[1];
      }
    }
  }
});

module.exports = AWS.SQS;

},{"../core":2,"./sqs.api":68}],30:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('../core');

AWS.StorageGateway = AWS.Service.defineService(require('./storagegateway.api'));

module.exports = AWS.StorageGateway;

},{"../core":2,"./storagegateway.api":69}],31:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('../core');

AWS.STS = AWS.Service.defineService(require('./sts.api'));

module.exports = AWS.STS;

},{"../core":2,"./sts.api":70}],42:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

module.exports = {
  format: 'query',
  apiVersion: '2011-01-01',
  endpointPrefix: 'autoscaling',
  resultWrapped: true,
  serviceFullName: 'Auto Scaling',
  signatureVersion: 'v4',
  timestampFormat: 'iso8601',
  operations: {
    createAutoScalingGroup: {
      name: 'CreateAutoScalingGroup',
      input: {
        type: 'structure',
        members: {
          AutoScalingGroupName: {
            required: true
          },
          LaunchConfigurationName: {
            required: true
          },
          MinSize: {
            type: 'integer',
            required: true
          },
          MaxSize: {
            type: 'integer',
            required: true
          },
          DesiredCapacity: {
            type: 'integer'
          },
          DefaultCooldown: {
            type: 'integer'
          },
          AvailabilityZones: {
            type: 'list'
          },
          LoadBalancerNames: {
            type: 'list'
          },
          HealthCheckType: {
          },
          HealthCheckGracePeriod: {
            type: 'integer'
          },
          PlacementGroup: {
          },
          VPCZoneIdentifier: {
          },
          TerminationPolicies: {
            type: 'list'
          },
          Tags: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                ResourceId: {
                },
                ResourceType: {
                },
                Key: {
                  required: true
                },
                Value: {
                },
                PropagateAtLaunch: {
                  type: 'boolean'
                }
              }
            }
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    createLaunchConfiguration: {
      name: 'CreateLaunchConfiguration',
      input: {
        type: 'structure',
        members: {
          LaunchConfigurationName: {
            required: true
          },
          ImageId: {
            required: true
          },
          KeyName: {
          },
          SecurityGroups: {
            type: 'list'
          },
          UserData: {
          },
          InstanceType: {
            required: true
          },
          KernelId: {
          },
          RamdiskId: {
          },
          BlockDeviceMappings: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                VirtualName: {
                },
                DeviceName: {
                  required: true
                },
                Ebs: {
                  type: 'structure',
                  members: {
                    SnapshotId: {
                    },
                    VolumeSize: {
                      type: 'integer'
                    }
                  }
                }
              }
            }
          },
          InstanceMonitoring: {
            type: 'structure',
            members: {
              Enabled: {
                type: 'boolean'
              }
            }
          },
          SpotPrice: {
          },
          IamInstanceProfile: {
          },
          EbsOptimized: {
            type: 'boolean'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    createOrUpdateTags: {
      name: 'CreateOrUpdateTags',
      input: {
        type: 'structure',
        members: {
          Tags: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                ResourceId: {
                },
                ResourceType: {
                },
                Key: {
                  required: true
                },
                Value: {
                },
                PropagateAtLaunch: {
                  type: 'boolean'
                }
              }
            },
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteAutoScalingGroup: {
      name: 'DeleteAutoScalingGroup',
      input: {
        type: 'structure',
        members: {
          AutoScalingGroupName: {
            required: true
          },
          ForceDelete: {
            type: 'boolean'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteLaunchConfiguration: {
      name: 'DeleteLaunchConfiguration',
      input: {
        type: 'structure',
        members: {
          LaunchConfigurationName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteNotificationConfiguration: {
      name: 'DeleteNotificationConfiguration',
      input: {
        type: 'structure',
        members: {
          AutoScalingGroupName: {
            required: true
          },
          TopicARN: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deletePolicy: {
      name: 'DeletePolicy',
      input: {
        type: 'structure',
        members: {
          AutoScalingGroupName: {
          },
          PolicyName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteScheduledAction: {
      name: 'DeleteScheduledAction',
      input: {
        type: 'structure',
        members: {
          AutoScalingGroupName: {
          },
          ScheduledActionName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteTags: {
      name: 'DeleteTags',
      input: {
        type: 'structure',
        members: {
          Tags: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                ResourceId: {
                },
                ResourceType: {
                },
                Key: {
                  required: true
                },
                Value: {
                },
                PropagateAtLaunch: {
                  type: 'boolean'
                }
              }
            },
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    describeAdjustmentTypes: {
      name: 'DescribeAdjustmentTypes',
      input: {
        type: 'structure',
        members: {
        }
      },
      output: {
        type: 'structure',
        members: {
          AdjustmentTypes: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                AdjustmentType: {
                }
              }
            }
          }
        }
      }
    },
    describeAutoScalingGroups: {
      name: 'DescribeAutoScalingGroups',
      input: {
        type: 'structure',
        members: {
          AutoScalingGroupNames: {
            type: 'list'
          },
          NextToken: {
          },
          MaxRecords: {
            type: 'integer'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          AutoScalingGroups: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                AutoScalingGroupName: {
                },
                AutoScalingGroupARN: {
                },
                LaunchConfigurationName: {
                },
                MinSize: {
                  type: 'integer'
                },
                MaxSize: {
                  type: 'integer'
                },
                DesiredCapacity: {
                  type: 'integer'
                },
                DefaultCooldown: {
                  type: 'integer'
                },
                AvailabilityZones: {
                  type: 'list'
                },
                LoadBalancerNames: {
                  type: 'list'
                },
                HealthCheckType: {
                },
                HealthCheckGracePeriod: {
                  type: 'integer'
                },
                Instances: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      InstanceId: {
                      },
                      AvailabilityZone: {
                      },
                      LifecycleState: {
                      },
                      HealthStatus: {
                      },
                      LaunchConfigurationName: {
                      }
                    }
                  }
                },
                CreatedTime: {
                  type: 'timestamp'
                },
                SuspendedProcesses: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      ProcessName: {
                      },
                      SuspensionReason: {
                      }
                    }
                  }
                },
                PlacementGroup: {
                },
                VPCZoneIdentifier: {
                },
                EnabledMetrics: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      Metric: {
                      },
                      Granularity: {
                      }
                    }
                  }
                },
                Status: {
                },
                Tags: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      ResourceId: {
                      },
                      ResourceType: {
                      },
                      Key: {
                      },
                      Value: {
                      },
                      PropagateAtLaunch: {
                        type: 'boolean'
                      }
                    }
                  }
                },
                TerminationPolicies: {
                  type: 'list'
                }
              }
            }
          },
          NextToken: {
          }
        }
      }
    },
    describeAutoScalingInstances: {
      name: 'DescribeAutoScalingInstances',
      input: {
        type: 'structure',
        members: {
          InstanceIds: {
            type: 'list'
          },
          MaxRecords: {
            type: 'integer'
          },
          NextToken: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          AutoScalingInstances: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                InstanceId: {
                },
                AutoScalingGroupName: {
                },
                AvailabilityZone: {
                },
                LifecycleState: {
                },
                HealthStatus: {
                },
                LaunchConfigurationName: {
                }
              }
            }
          },
          NextToken: {
          }
        }
      }
    },
    describeAutoScalingNotificationTypes: {
      name: 'DescribeAutoScalingNotificationTypes',
      input: {
        type: 'structure',
        members: {
        }
      },
      output: {
        type: 'structure',
        members: {
          AutoScalingNotificationTypes: {
            type: 'list'
          }
        }
      }
    },
    describeLaunchConfigurations: {
      name: 'DescribeLaunchConfigurations',
      input: {
        type: 'structure',
        members: {
          LaunchConfigurationNames: {
            type: 'list'
          },
          NextToken: {
          },
          MaxRecords: {
            type: 'integer'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          LaunchConfigurations: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                LaunchConfigurationName: {
                },
                LaunchConfigurationARN: {
                },
                ImageId: {
                },
                KeyName: {
                },
                SecurityGroups: {
                  type: 'list'
                },
                UserData: {
                },
                InstanceType: {
                },
                KernelId: {
                },
                RamdiskId: {
                },
                BlockDeviceMappings: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      VirtualName: {
                      },
                      DeviceName: {
                      },
                      Ebs: {
                        type: 'structure',
                        members: {
                          SnapshotId: {
                          },
                          VolumeSize: {
                            type: 'integer'
                          }
                        }
                      }
                    }
                  }
                },
                InstanceMonitoring: {
                  type: 'structure',
                  members: {
                    Enabled: {
                      type: 'boolean'
                    }
                  }
                },
                SpotPrice: {
                },
                IamInstanceProfile: {
                },
                CreatedTime: {
                  type: 'timestamp'
                },
                EbsOptimized: {
                  type: 'boolean'
                }
              }
            }
          },
          NextToken: {
          }
        }
      }
    },
    describeMetricCollectionTypes: {
      name: 'DescribeMetricCollectionTypes',
      input: {
        type: 'structure',
        members: {
        }
      },
      output: {
        type: 'structure',
        members: {
          Metrics: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Metric: {
                }
              }
            }
          },
          Granularities: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Granularity: {
                }
              }
            }
          }
        }
      }
    },
    describeNotificationConfigurations: {
      name: 'DescribeNotificationConfigurations',
      input: {
        type: 'structure',
        members: {
          AutoScalingGroupNames: {
            type: 'list'
          },
          NextToken: {
          },
          MaxRecords: {
            type: 'integer'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          NotificationConfigurations: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                AutoScalingGroupName: {
                },
                TopicARN: {
                },
                NotificationType: {
                }
              }
            }
          },
          NextToken: {
          }
        }
      }
    },
    describePolicies: {
      name: 'DescribePolicies',
      input: {
        type: 'structure',
        members: {
          AutoScalingGroupName: {
          },
          PolicyNames: {
            type: 'list'
          },
          NextToken: {
          },
          MaxRecords: {
            type: 'integer'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          ScalingPolicies: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                AutoScalingGroupName: {
                },
                PolicyName: {
                },
                ScalingAdjustment: {
                  type: 'integer'
                },
                AdjustmentType: {
                },
                Cooldown: {
                  type: 'integer'
                },
                PolicyARN: {
                },
                Alarms: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      AlarmName: {
                      },
                      AlarmARN: {
                      }
                    }
                  }
                },
                MinAdjustmentStep: {
                  type: 'integer'
                }
              }
            }
          },
          NextToken: {
          }
        }
      }
    },
    describeScalingActivities: {
      name: 'DescribeScalingActivities',
      input: {
        type: 'structure',
        members: {
          ActivityIds: {
            type: 'list'
          },
          AutoScalingGroupName: {
          },
          MaxRecords: {
            type: 'integer'
          },
          NextToken: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Activities: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                ActivityId: {
                },
                AutoScalingGroupName: {
                },
                Description: {
                },
                Cause: {
                },
                StartTime: {
                  type: 'timestamp'
                },
                EndTime: {
                  type: 'timestamp'
                },
                StatusCode: {
                },
                StatusMessage: {
                },
                Progress: {
                  type: 'integer'
                },
                Details: {
                }
              }
            }
          },
          NextToken: {
          }
        }
      }
    },
    describeScalingProcessTypes: {
      name: 'DescribeScalingProcessTypes',
      input: {
        type: 'structure',
        members: {
        }
      },
      output: {
        type: 'structure',
        members: {
          Processes: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                ProcessName: {
                }
              }
            }
          }
        }
      }
    },
    describeScheduledActions: {
      name: 'DescribeScheduledActions',
      input: {
        type: 'structure',
        members: {
          AutoScalingGroupName: {
          },
          ScheduledActionNames: {
            type: 'list'
          },
          StartTime: {
            type: 'timestamp'
          },
          EndTime: {
            type: 'timestamp'
          },
          NextToken: {
          },
          MaxRecords: {
            type: 'integer'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          ScheduledUpdateGroupActions: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                AutoScalingGroupName: {
                },
                ScheduledActionName: {
                },
                ScheduledActionARN: {
                },
                Time: {
                  type: 'timestamp'
                },
                StartTime: {
                  type: 'timestamp'
                },
                EndTime: {
                  type: 'timestamp'
                },
                Recurrence: {
                },
                MinSize: {
                  type: 'integer'
                },
                MaxSize: {
                  type: 'integer'
                },
                DesiredCapacity: {
                  type: 'integer'
                }
              }
            }
          },
          NextToken: {
          }
        }
      }
    },
    describeTags: {
      name: 'DescribeTags',
      input: {
        type: 'structure',
        members: {
          Filters: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                },
                Values: {
                  type: 'list'
                }
              }
            }
          },
          NextToken: {
          },
          MaxRecords: {
            type: 'integer'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Tags: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                ResourceId: {
                },
                ResourceType: {
                },
                Key: {
                },
                Value: {
                },
                PropagateAtLaunch: {
                  type: 'boolean'
                }
              }
            }
          },
          NextToken: {
          }
        }
      }
    },
    describeTerminationPolicyTypes: {
      name: 'DescribeTerminationPolicyTypes',
      input: {
        type: 'structure',
        members: {
        }
      },
      output: {
        type: 'structure',
        members: {
          TerminationPolicyTypes: {
            type: 'list'
          }
        }
      }
    },
    disableMetricsCollection: {
      name: 'DisableMetricsCollection',
      input: {
        type: 'structure',
        members: {
          AutoScalingGroupName: {
            required: true
          },
          Metrics: {
            type: 'list'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    enableMetricsCollection: {
      name: 'EnableMetricsCollection',
      input: {
        type: 'structure',
        members: {
          AutoScalingGroupName: {
            required: true
          },
          Metrics: {
            type: 'list'
          },
          Granularity: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    executePolicy: {
      name: 'ExecutePolicy',
      input: {
        type: 'structure',
        members: {
          AutoScalingGroupName: {
          },
          PolicyName: {
            required: true
          },
          HonorCooldown: {
            type: 'boolean'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    putNotificationConfiguration: {
      name: 'PutNotificationConfiguration',
      input: {
        type: 'structure',
        members: {
          AutoScalingGroupName: {
            required: true
          },
          TopicARN: {
            required: true
          },
          NotificationTypes: {
            type: 'list',
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    putScalingPolicy: {
      name: 'PutScalingPolicy',
      input: {
        type: 'structure',
        members: {
          AutoScalingGroupName: {
            required: true
          },
          PolicyName: {
            required: true
          },
          ScalingAdjustment: {
            type: 'integer',
            required: true
          },
          AdjustmentType: {
            required: true
          },
          Cooldown: {
            type: 'integer'
          },
          MinAdjustmentStep: {
            type: 'integer'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          PolicyARN: {
          }
        }
      }
    },
    putScheduledUpdateGroupAction: {
      name: 'PutScheduledUpdateGroupAction',
      input: {
        type: 'structure',
        members: {
          AutoScalingGroupName: {
            required: true
          },
          ScheduledActionName: {
            required: true
          },
          Time: {
            type: 'timestamp'
          },
          StartTime: {
            type: 'timestamp'
          },
          EndTime: {
            type: 'timestamp'
          },
          Recurrence: {
          },
          MinSize: {
            type: 'integer'
          },
          MaxSize: {
            type: 'integer'
          },
          DesiredCapacity: {
            type: 'integer'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    resumeProcesses: {
      name: 'ResumeProcesses',
      input: {
        type: 'structure',
        members: {
          AutoScalingGroupName: {
            required: true
          },
          ScalingProcesses: {
            type: 'list'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    setDesiredCapacity: {
      name: 'SetDesiredCapacity',
      input: {
        type: 'structure',
        members: {
          AutoScalingGroupName: {
            required: true
          },
          DesiredCapacity: {
            type: 'integer',
            required: true
          },
          HonorCooldown: {
            type: 'boolean'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    setInstanceHealth: {
      name: 'SetInstanceHealth',
      input: {
        type: 'structure',
        members: {
          InstanceId: {
            required: true
          },
          HealthStatus: {
            required: true
          },
          ShouldRespectGracePeriod: {
            type: 'boolean'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    suspendProcesses: {
      name: 'SuspendProcesses',
      input: {
        type: 'structure',
        members: {
          AutoScalingGroupName: {
            required: true
          },
          ScalingProcesses: {
            type: 'list'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    terminateInstanceInAutoScalingGroup: {
      name: 'TerminateInstanceInAutoScalingGroup',
      input: {
        type: 'structure',
        members: {
          InstanceId: {
            required: true
          },
          ShouldDecrementDesiredCapacity: {
            type: 'boolean',
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Activity: {
            type: 'structure',
            members: {
              ActivityId: {
              },
              AutoScalingGroupName: {
              },
              Description: {
              },
              Cause: {
              },
              StartTime: {
                type: 'timestamp'
              },
              EndTime: {
                type: 'timestamp'
              },
              StatusCode: {
              },
              StatusMessage: {
              },
              Progress: {
                type: 'integer'
              },
              Details: {
              }
            }
          }
        }
      }
    },
    updateAutoScalingGroup: {
      name: 'UpdateAutoScalingGroup',
      input: {
        type: 'structure',
        members: {
          AutoScalingGroupName: {
            required: true
          },
          LaunchConfigurationName: {
          },
          MinSize: {
            type: 'integer'
          },
          MaxSize: {
            type: 'integer'
          },
          DesiredCapacity: {
            type: 'integer'
          },
          DefaultCooldown: {
            type: 'integer'
          },
          AvailabilityZones: {
            type: 'list'
          },
          HealthCheckType: {
          },
          HealthCheckGracePeriod: {
            type: 'integer'
          },
          PlacementGroup: {
          },
          VPCZoneIdentifier: {
          },
          TerminationPolicies: {
            type: 'list'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    }
  }
};

},{}],43:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

module.exports = {
  format: 'query',
  apiVersion: '2010-05-15',
  endpointPrefix: 'cloudformation',
  resultWrapped: true,
  serviceFullName: 'AWS CloudFormation',
  signatureVersion: 'v4',
  timestampFormat: 'iso8601',
  operations: {
    createStack: {
      name: 'CreateStack',
      input: {
        type: 'structure',
        members: {
          StackName: {
            required: true
          },
          TemplateBody: {
          },
          TemplateURL: {
          },
          Parameters: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                ParameterKey: {
                },
                ParameterValue: {
                }
              }
            }
          },
          DisableRollback: {
            type: 'boolean'
          },
          TimeoutInMinutes: {
            type: 'integer'
          },
          NotificationARNs: {
            type: 'list'
          },
          Capabilities: {
            type: 'list'
          },
          OnFailure: {
          },
          Tags: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Key: {
                },
                Value: {
                }
              }
            }
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          StackId: {
          }
        }
      }
    },
    deleteStack: {
      name: 'DeleteStack',
      input: {
        type: 'structure',
        members: {
          StackName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    describeStackEvents: {
      name: 'DescribeStackEvents',
      input: {
        type: 'structure',
        members: {
          StackName: {
          },
          NextToken: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          StackEvents: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                StackId: {
                },
                EventId: {
                },
                StackName: {
                },
                LogicalResourceId: {
                },
                PhysicalResourceId: {
                },
                ResourceType: {
                },
                Timestamp: {
                  type: 'timestamp'
                },
                ResourceStatus: {
                },
                ResourceStatusReason: {
                },
                ResourceProperties: {
                }
              }
            }
          },
          NextToken: {
          }
        }
      }
    },
    describeStackResource: {
      name: 'DescribeStackResource',
      input: {
        type: 'structure',
        members: {
          StackName: {
            required: true
          },
          LogicalResourceId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          StackResourceDetail: {
            type: 'structure',
            members: {
              StackName: {
              },
              StackId: {
              },
              LogicalResourceId: {
              },
              PhysicalResourceId: {
              },
              ResourceType: {
              },
              LastUpdatedTimestamp: {
                type: 'timestamp'
              },
              ResourceStatus: {
              },
              ResourceStatusReason: {
              },
              Description: {
              },
              Metadata: {
              }
            }
          }
        }
      }
    },
    describeStackResources: {
      name: 'DescribeStackResources',
      input: {
        type: 'structure',
        members: {
          StackName: {
          },
          LogicalResourceId: {
          },
          PhysicalResourceId: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          StackResources: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                StackName: {
                },
                StackId: {
                },
                LogicalResourceId: {
                },
                PhysicalResourceId: {
                },
                ResourceType: {
                },
                Timestamp: {
                  type: 'timestamp'
                },
                ResourceStatus: {
                },
                ResourceStatusReason: {
                },
                Description: {
                }
              }
            }
          }
        }
      }
    },
    describeStacks: {
      name: 'DescribeStacks',
      input: {
        type: 'structure',
        members: {
          StackName: {
          },
          NextToken: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Stacks: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                StackId: {
                },
                StackName: {
                },
                Description: {
                },
                Parameters: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      ParameterKey: {
                      },
                      ParameterValue: {
                      }
                    }
                  }
                },
                CreationTime: {
                  type: 'timestamp'
                },
                LastUpdatedTime: {
                  type: 'timestamp'
                },
                StackStatus: {
                },
                StackStatusReason: {
                },
                DisableRollback: {
                  type: 'boolean'
                },
                NotificationARNs: {
                  type: 'list'
                },
                TimeoutInMinutes: {
                  type: 'integer'
                },
                Capabilities: {
                  type: 'list'
                },
                Outputs: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      OutputKey: {
                      },
                      OutputValue: {
                      },
                      Description: {
                      }
                    }
                  }
                },
                Tags: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      Key: {
                      },
                      Value: {
                      }
                    }
                  }
                }
              }
            }
          },
          NextToken: {
          }
        }
      }
    },
    estimateTemplateCost: {
      name: 'EstimateTemplateCost',
      input: {
        type: 'structure',
        members: {
          TemplateBody: {
          },
          TemplateURL: {
          },
          Parameters: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                ParameterKey: {
                },
                ParameterValue: {
                }
              }
            }
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Url: {
          }
        }
      }
    },
    getTemplate: {
      name: 'GetTemplate',
      input: {
        type: 'structure',
        members: {
          StackName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          TemplateBody: {
          }
        }
      }
    },
    listStackResources: {
      name: 'ListStackResources',
      input: {
        type: 'structure',
        members: {
          StackName: {
            required: true
          },
          NextToken: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          StackResourceSummaries: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                LogicalResourceId: {
                },
                PhysicalResourceId: {
                },
                ResourceType: {
                },
                LastUpdatedTimestamp: {
                  type: 'timestamp'
                },
                ResourceStatus: {
                },
                ResourceStatusReason: {
                }
              }
            }
          },
          NextToken: {
          }
        }
      }
    },
    listStacks: {
      name: 'ListStacks',
      input: {
        type: 'structure',
        members: {
          NextToken: {
          },
          StackStatusFilter: {
            type: 'list'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          StackSummaries: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                StackId: {
                },
                StackName: {
                },
                TemplateDescription: {
                },
                CreationTime: {
                  type: 'timestamp'
                },
                LastUpdatedTime: {
                  type: 'timestamp'
                },
                DeletionTime: {
                  type: 'timestamp'
                },
                StackStatus: {
                },
                StackStatusReason: {
                }
              }
            }
          },
          NextToken: {
          }
        }
      }
    },
    updateStack: {
      name: 'UpdateStack',
      input: {
        type: 'structure',
        members: {
          StackName: {
            required: true
          },
          TemplateBody: {
          },
          TemplateURL: {
          },
          Parameters: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                ParameterKey: {
                },
                ParameterValue: {
                }
              }
            }
          },
          Capabilities: {
            type: 'list'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          StackId: {
          }
        }
      }
    },
    validateTemplate: {
      name: 'ValidateTemplate',
      input: {
        type: 'structure',
        members: {
          TemplateBody: {
          },
          TemplateURL: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Parameters: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                ParameterKey: {
                },
                DefaultValue: {
                },
                NoEcho: {
                  type: 'boolean'
                },
                Description: {
                }
              }
            }
          },
          Description: {
          },
          Capabilities: {
            type: 'list'
          },
          CapabilitiesReason: {
          }
        }
      }
    }
  }
};

},{}],44:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

module.exports = {
  format: 'rest-xml',
  apiVersion: '2012-05-05',
  endpointPrefix: 'cloudfront',
  globalEndpoint: 'cloudfront.amazonaws.com',
  serviceAbbreviation: 'CloudFront',
  serviceFullName: 'Amazon CloudFront',
  signatureVersion: 'cloudfront',
  timestampFormat: 'iso8601',
  xmlnamespace: 'http://cloudfront.amazonaws.com/doc/2012-05-05/',
  operations: {
    createCloudFrontOriginAccessIdentity: {
      name: 'CreateCloudFrontOriginAccessIdentity2012_05_05',
      http: {
        uri: '/2012-05-05/origin-access-identity/cloudfront',
        method: 'POST'
      },
      input: {
        xml: 'CloudFrontOriginAccessIdentityConfig',
        type: 'structure',
        members: {
          CloudFrontOriginAccessIdentityConfig: {
            type: 'structure',
            members: {
              CallerReference: {
                required: true
              },
              Comment: {
                required: true
              }
            },
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Location: {
            location: 'header',
            name: 'Location'
          },
          ETag: {
            location: 'header',
            name: 'ETag'
          },
          Id: {
          },
          S3CanonicalUserId: {
          },
          CloudFrontOriginAccessIdentityConfig: {
            type: 'structure',
            members: {
              CallerReference: {
              },
              Comment: {
              }
            }
          }
        }
      }
    },
    createDistribution: {
      name: 'CreateDistribution2012_05_05',
      http: {
        uri: '/2012-05-05/distribution',
        method: 'POST'
      },
      input: {
        xml: 'DistributionConfig',
        type: 'structure',
        members: {
          DistributionConfig: {
            type: 'structure',
            members: {
              CallerReference: {
                required: true
              },
              Aliases: {
                type: 'structure',
                members: {
                  Quantity: {
                    type: 'integer',
                    required: true
                  },
                  Items: {
                    type: 'list',
                    members: {
                      name: 'CNAME'
                    }
                  }
                },
                required: true
              },
              DefaultRootObject: {
                required: true
              },
              Origins: {
                type: 'structure',
                members: {
                  Quantity: {
                    type: 'integer',
                    required: true
                  },
                  Items: {
                    type: 'list',
                    members: {
                      type: 'structure',
                      members: {
                        Id: {
                          required: true
                        },
                        DomainName: {
                          required: true
                        },
                        S3OriginConfig: {
                          type: 'structure',
                          members: {
                            OriginAccessIdentity: {
                              required: true
                            }
                          }
                        },
                        CustomOriginConfig: {
                          type: 'structure',
                          members: {
                            HTTPPort: {
                              type: 'integer',
                              required: true
                            },
                            HTTPSPort: {
                              type: 'integer',
                              required: true
                            },
                            OriginProtocolPolicy: {
                              required: true
                            }
                          }
                        }
                      },
                      name: 'Origin'
                    }
                  }
                },
                required: true
              },
              DefaultCacheBehavior: {
                type: 'structure',
                members: {
                  TargetOriginId: {
                    required: true
                  },
                  ForwardedValues: {
                    type: 'structure',
                    members: {
                      QueryString: {
                        type: 'boolean',
                        required: true
                      }
                    },
                    required: true
                  },
                  TrustedSigners: {
                    type: 'structure',
                    members: {
                      Enabled: {
                        type: 'boolean',
                        required: true
                      },
                      Quantity: {
                        type: 'integer',
                        required: true
                      },
                      Items: {
                        type: 'list',
                        members: {
                          name: 'AwsAccountNumber'
                        }
                      }
                    },
                    required: true
                  },
                  ViewerProtocolPolicy: {
                    required: true
                  },
                  MinTTL: {
                    type: 'integer',
                    required: true
                  }
                },
                required: true
              },
              CacheBehaviors: {
                type: 'structure',
                members: {
                  Quantity: {
                    type: 'integer',
                    required: true
                  },
                  Items: {
                    type: 'list',
                    members: {
                      type: 'structure',
                      members: {
                        PathPattern: {
                          required: true
                        },
                        TargetOriginId: {
                          required: true
                        },
                        ForwardedValues: {
                          type: 'structure',
                          members: {
                            QueryString: {
                              type: 'boolean',
                              required: true
                            }
                          },
                          required: true
                        },
                        TrustedSigners: {
                          type: 'structure',
                          members: {
                            Enabled: {
                              type: 'boolean',
                              required: true
                            },
                            Quantity: {
                              type: 'integer',
                              required: true
                            },
                            Items: {
                              type: 'list',
                              members: {
                                name: 'AwsAccountNumber'
                              }
                            }
                          },
                          required: true
                        },
                        ViewerProtocolPolicy: {
                          required: true
                        },
                        MinTTL: {
                          type: 'integer',
                          required: true
                        }
                      },
                      name: 'CacheBehavior'
                    }
                  }
                },
                required: true
              },
              Comment: {
                required: true
              },
              Logging: {
                type: 'structure',
                members: {
                  Enabled: {
                    type: 'boolean',
                    required: true
                  },
                  Bucket: {
                    required: true
                  },
                  Prefix: {
                    required: true
                  }
                },
                required: true
              },
              Enabled: {
                type: 'boolean',
                required: true
              }
            },
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Location: {
            location: 'header',
            name: 'Location'
          },
          ETag: {
            location: 'header',
            name: 'ETag'
          },
          Id: {
          },
          Status: {
          },
          LastModifiedTime: {
            type: 'timestamp'
          },
          InProgressInvalidationBatches: {
            type: 'integer'
          },
          DomainName: {
          },
          ActiveTrustedSigners: {
            type: 'structure',
            members: {
              Enabled: {
                type: 'boolean'
              },
              Quantity: {
                type: 'integer'
              },
              Items: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    AwsAccountNumber: {
                    },
                    KeyPairIds: {
                      type: 'structure',
                      members: {
                        Quantity: {
                          type: 'integer'
                        },
                        Items: {
                          type: 'list',
                          members: {
                            name: 'KeyPairId'
                          }
                        }
                      }
                    }
                  },
                  name: 'Signer'
                }
              }
            }
          },
          DistributionConfig: {
            type: 'structure',
            members: {
              CallerReference: {
              },
              Aliases: {
                type: 'structure',
                members: {
                  Quantity: {
                    type: 'integer'
                  },
                  Items: {
                    type: 'list',
                    members: {
                      name: 'CNAME'
                    }
                  }
                }
              },
              DefaultRootObject: {
              },
              Origins: {
                type: 'structure',
                members: {
                  Quantity: {
                    type: 'integer'
                  },
                  Items: {
                    type: 'list',
                    members: {
                      type: 'structure',
                      members: {
                        Id: {
                        },
                        DomainName: {
                        },
                        S3OriginConfig: {
                          type: 'structure',
                          members: {
                            OriginAccessIdentity: {
                            }
                          }
                        },
                        CustomOriginConfig: {
                          type: 'structure',
                          members: {
                            HTTPPort: {
                              type: 'integer'
                            },
                            HTTPSPort: {
                              type: 'integer'
                            },
                            OriginProtocolPolicy: {
                            }
                          }
                        }
                      },
                      name: 'Origin'
                    }
                  }
                }
              },
              DefaultCacheBehavior: {
                type: 'structure',
                members: {
                  TargetOriginId: {
                  },
                  ForwardedValues: {
                    type: 'structure',
                    members: {
                      QueryString: {
                        type: 'boolean'
                      }
                    }
                  },
                  TrustedSigners: {
                    type: 'structure',
                    members: {
                      Enabled: {
                        type: 'boolean'
                      },
                      Quantity: {
                        type: 'integer'
                      },
                      Items: {
                        type: 'list',
                        members: {
                          name: 'AwsAccountNumber'
                        }
                      }
                    }
                  },
                  ViewerProtocolPolicy: {
                  },
                  MinTTL: {
                    type: 'integer'
                  }
                }
              },
              CacheBehaviors: {
                type: 'structure',
                members: {
                  Quantity: {
                    type: 'integer'
                  },
                  Items: {
                    type: 'list',
                    members: {
                      type: 'structure',
                      members: {
                        PathPattern: {
                        },
                        TargetOriginId: {
                        },
                        ForwardedValues: {
                          type: 'structure',
                          members: {
                            QueryString: {
                              type: 'boolean'
                            }
                          }
                        },
                        TrustedSigners: {
                          type: 'structure',
                          members: {
                            Enabled: {
                              type: 'boolean'
                            },
                            Quantity: {
                              type: 'integer'
                            },
                            Items: {
                              type: 'list',
                              members: {
                                name: 'AwsAccountNumber'
                              }
                            }
                          }
                        },
                        ViewerProtocolPolicy: {
                        },
                        MinTTL: {
                          type: 'integer'
                        }
                      },
                      name: 'CacheBehavior'
                    }
                  }
                }
              },
              Comment: {
              },
              Logging: {
                type: 'structure',
                members: {
                  Enabled: {
                    type: 'boolean'
                  },
                  Bucket: {
                  },
                  Prefix: {
                  }
                }
              },
              Enabled: {
                type: 'boolean'
              }
            }
          }
        }
      }
    },
    createInvalidation: {
      name: 'CreateInvalidation2012_05_05',
      http: {
        uri: '/2012-05-05/distribution/{DistributionId}/invalidation',
        method: 'POST'
      },
      input: {
        xml: 'InvalidationBatch',
        type: 'structure',
        members: {
          DistributionId: {
            required: true,
            location: 'uri'
          },
          InvalidationBatch: {
            type: 'structure',
            members: {
              Paths: {
                type: 'structure',
                members: {
                  Quantity: {
                    type: 'integer',
                    required: true
                  },
                  Items: {
                    type: 'list',
                    members: {
                      name: 'Path'
                    }
                  }
                },
                required: true
              },
              CallerReference: {
                required: true
              }
            },
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Location: {
            location: 'header',
            name: 'Location'
          },
          Id: {
          },
          Status: {
          },
          CreateTime: {
            type: 'timestamp'
          },
          InvalidationBatch: {
            type: 'structure',
            members: {
              Paths: {
                type: 'structure',
                members: {
                  Quantity: {
                    type: 'integer'
                  },
                  Items: {
                    type: 'list',
                    members: {
                      name: 'Path'
                    }
                  }
                }
              },
              CallerReference: {
              }
            }
          }
        }
      }
    },
    createStreamingDistribution: {
      name: 'CreateStreamingDistribution2012_05_05',
      http: {
        uri: '/2012-05-05/streaming-distribution',
        method: 'POST'
      },
      input: {
        xml: 'StreamingDistributionConfig',
        type: 'structure',
        members: {
          StreamingDistributionConfig: {
            type: 'structure',
            members: {
              CallerReference: {
                required: true
              },
              S3Origin: {
                type: 'structure',
                members: {
                  DomainName: {
                    required: true
                  },
                  OriginAccessIdentity: {
                    required: true
                  }
                },
                required: true
              },
              Aliases: {
                type: 'structure',
                members: {
                  Quantity: {
                    type: 'integer',
                    required: true
                  },
                  Items: {
                    type: 'list',
                    members: {
                      name: 'CNAME'
                    }
                  }
                },
                required: true
              },
              Comment: {
                required: true
              },
              Logging: {
                type: 'structure',
                members: {
                  Enabled: {
                    type: 'boolean',
                    required: true
                  },
                  Bucket: {
                    required: true
                  },
                  Prefix: {
                    required: true
                  }
                },
                required: true
              },
              TrustedSigners: {
                type: 'structure',
                members: {
                  Enabled: {
                    type: 'boolean',
                    required: true
                  },
                  Quantity: {
                    type: 'integer',
                    required: true
                  },
                  Items: {
                    type: 'list',
                    members: {
                      name: 'AwsAccountNumber'
                    }
                  }
                },
                required: true
              },
              Enabled: {
                type: 'boolean',
                required: true
              }
            },
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Location: {
            location: 'header',
            name: 'Location'
          },
          ETag: {
            location: 'header',
            name: 'ETag'
          },
          Id: {
          },
          Status: {
          },
          LastModifiedTime: {
            type: 'timestamp'
          },
          DomainName: {
          },
          ActiveTrustedSigners: {
            type: 'structure',
            members: {
              Enabled: {
                type: 'boolean'
              },
              Quantity: {
                type: 'integer'
              },
              Items: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    AwsAccountNumber: {
                    },
                    KeyPairIds: {
                      type: 'structure',
                      members: {
                        Quantity: {
                          type: 'integer'
                        },
                        Items: {
                          type: 'list',
                          members: {
                            name: 'KeyPairId'
                          }
                        }
                      }
                    }
                  },
                  name: 'Signer'
                }
              }
            }
          },
          StreamingDistributionConfig: {
            type: 'structure',
            members: {
              CallerReference: {
              },
              S3Origin: {
                type: 'structure',
                members: {
                  DomainName: {
                  },
                  OriginAccessIdentity: {
                  }
                }
              },
              Aliases: {
                type: 'structure',
                members: {
                  Quantity: {
                    type: 'integer'
                  },
                  Items: {
                    type: 'list',
                    members: {
                      name: 'CNAME'
                    }
                  }
                }
              },
              Comment: {
              },
              Logging: {
                type: 'structure',
                members: {
                  Enabled: {
                    type: 'boolean'
                  },
                  Bucket: {
                  },
                  Prefix: {
                  }
                }
              },
              TrustedSigners: {
                type: 'structure',
                members: {
                  Enabled: {
                    type: 'boolean'
                  },
                  Quantity: {
                    type: 'integer'
                  },
                  Items: {
                    type: 'list',
                    members: {
                      name: 'AwsAccountNumber'
                    }
                  }
                }
              },
              Enabled: {
                type: 'boolean'
              }
            }
          }
        }
      }
    },
    deleteCloudFrontOriginAccessIdentity: {
      name: 'DeleteCloudFrontOriginAccessIdentity2012_05_05',
      http: {
        uri: '/2012-05-05/origin-access-identity/cloudfront/{Id}',
        method: 'DELETE'
      },
      input: {
        type: 'structure',
        members: {
          Id: {
            location: 'uri'
          },
          IfMatch: {
            location: 'header',
            name: 'If-Match'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteDistribution: {
      name: 'DeleteDistribution2012_05_05',
      http: {
        uri: '/2012-05-05/distribution/{Id}',
        method: 'DELETE'
      },
      input: {
        type: 'structure',
        members: {
          Id: {
            location: 'uri'
          },
          IfMatch: {
            location: 'header',
            name: 'If-Match'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteStreamingDistribution: {
      name: 'DeleteStreamingDistribution2012_05_05',
      http: {
        uri: '/2012-05-05/streaming-distribution/{Id}',
        method: 'DELETE'
      },
      input: {
        type: 'structure',
        members: {
          Id: {
            location: 'uri'
          },
          IfMatch: {
            location: 'header',
            name: 'If-Match'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    getCloudFrontOriginAccessIdentity: {
      name: 'GetCloudFrontOriginAccessIdentity2012_05_05',
      http: {
        uri: '/2012-05-05/origin-access-identity/cloudfront/{Id}',
        method: 'GET'
      },
      input: {
        type: 'structure',
        members: {
          Id: {
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          ETag: {
            location: 'header',
            name: 'ETag'
          },
          Id: {
          },
          S3CanonicalUserId: {
          },
          CloudFrontOriginAccessIdentityConfig: {
            type: 'structure',
            members: {
              CallerReference: {
              },
              Comment: {
              }
            }
          }
        }
      }
    },
    getCloudFrontOriginAccessIdentityConfig: {
      name: 'GetCloudFrontOriginAccessIdentityConfig2012_05_05',
      http: {
        uri: '/2012-05-05/origin-access-identity/cloudfront/{Id}/config',
        method: 'GET'
      },
      input: {
        type: 'structure',
        members: {
          Id: {
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          ETag: {
            location: 'header',
            name: 'ETag'
          },
          CallerReference: {
          },
          Comment: {
          }
        }
      }
    },
    getDistribution: {
      name: 'GetDistribution2012_05_05',
      http: {
        uri: '/2012-05-05/distribution/{Id}',
        method: 'GET'
      },
      input: {
        type: 'structure',
        members: {
          Id: {
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          ETag: {
            location: 'header',
            name: 'ETag'
          },
          Id: {
          },
          Status: {
          },
          LastModifiedTime: {
            type: 'timestamp'
          },
          InProgressInvalidationBatches: {
            type: 'integer'
          },
          DomainName: {
          },
          ActiveTrustedSigners: {
            type: 'structure',
            members: {
              Enabled: {
                type: 'boolean'
              },
              Quantity: {
                type: 'integer'
              },
              Items: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    AwsAccountNumber: {
                    },
                    KeyPairIds: {
                      type: 'structure',
                      members: {
                        Quantity: {
                          type: 'integer'
                        },
                        Items: {
                          type: 'list',
                          members: {
                            name: 'KeyPairId'
                          }
                        }
                      }
                    }
                  },
                  name: 'Signer'
                }
              }
            }
          },
          DistributionConfig: {
            type: 'structure',
            members: {
              CallerReference: {
              },
              Aliases: {
                type: 'structure',
                members: {
                  Quantity: {
                    type: 'integer'
                  },
                  Items: {
                    type: 'list',
                    members: {
                      name: 'CNAME'
                    }
                  }
                }
              },
              DefaultRootObject: {
              },
              Origins: {
                type: 'structure',
                members: {
                  Quantity: {
                    type: 'integer'
                  },
                  Items: {
                    type: 'list',
                    members: {
                      type: 'structure',
                      members: {
                        Id: {
                        },
                        DomainName: {
                        },
                        S3OriginConfig: {
                          type: 'structure',
                          members: {
                            OriginAccessIdentity: {
                            }
                          }
                        },
                        CustomOriginConfig: {
                          type: 'structure',
                          members: {
                            HTTPPort: {
                              type: 'integer'
                            },
                            HTTPSPort: {
                              type: 'integer'
                            },
                            OriginProtocolPolicy: {
                            }
                          }
                        }
                      },
                      name: 'Origin'
                    }
                  }
                }
              },
              DefaultCacheBehavior: {
                type: 'structure',
                members: {
                  TargetOriginId: {
                  },
                  ForwardedValues: {
                    type: 'structure',
                    members: {
                      QueryString: {
                        type: 'boolean'
                      }
                    }
                  },
                  TrustedSigners: {
                    type: 'structure',
                    members: {
                      Enabled: {
                        type: 'boolean'
                      },
                      Quantity: {
                        type: 'integer'
                      },
                      Items: {
                        type: 'list',
                        members: {
                          name: 'AwsAccountNumber'
                        }
                      }
                    }
                  },
                  ViewerProtocolPolicy: {
                  },
                  MinTTL: {
                    type: 'integer'
                  }
                }
              },
              CacheBehaviors: {
                type: 'structure',
                members: {
                  Quantity: {
                    type: 'integer'
                  },
                  Items: {
                    type: 'list',
                    members: {
                      type: 'structure',
                      members: {
                        PathPattern: {
                        },
                        TargetOriginId: {
                        },
                        ForwardedValues: {
                          type: 'structure',
                          members: {
                            QueryString: {
                              type: 'boolean'
                            }
                          }
                        },
                        TrustedSigners: {
                          type: 'structure',
                          members: {
                            Enabled: {
                              type: 'boolean'
                            },
                            Quantity: {
                              type: 'integer'
                            },
                            Items: {
                              type: 'list',
                              members: {
                                name: 'AwsAccountNumber'
                              }
                            }
                          }
                        },
                        ViewerProtocolPolicy: {
                        },
                        MinTTL: {
                          type: 'integer'
                        }
                      },
                      name: 'CacheBehavior'
                    }
                  }
                }
              },
              Comment: {
              },
              Logging: {
                type: 'structure',
                members: {
                  Enabled: {
                    type: 'boolean'
                  },
                  Bucket: {
                  },
                  Prefix: {
                  }
                }
              },
              Enabled: {
                type: 'boolean'
              }
            }
          }
        }
      }
    },
    getDistributionConfig: {
      name: 'GetDistributionConfig2012_05_05',
      http: {
        uri: '/2012-05-05/distribution/{Id}/config',
        method: 'GET'
      },
      input: {
        type: 'structure',
        members: {
          Id: {
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          ETag: {
            location: 'header',
            name: 'ETag'
          },
          CallerReference: {
          },
          Aliases: {
            type: 'structure',
            members: {
              Quantity: {
                type: 'integer'
              },
              Items: {
                type: 'list',
                members: {
                  name: 'CNAME'
                }
              }
            }
          },
          DefaultRootObject: {
          },
          Origins: {
            type: 'structure',
            members: {
              Quantity: {
                type: 'integer'
              },
              Items: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    Id: {
                    },
                    DomainName: {
                    },
                    S3OriginConfig: {
                      type: 'structure',
                      members: {
                        OriginAccessIdentity: {
                        }
                      }
                    },
                    CustomOriginConfig: {
                      type: 'structure',
                      members: {
                        HTTPPort: {
                          type: 'integer'
                        },
                        HTTPSPort: {
                          type: 'integer'
                        },
                        OriginProtocolPolicy: {
                        }
                      }
                    }
                  },
                  name: 'Origin'
                }
              }
            }
          },
          DefaultCacheBehavior: {
            type: 'structure',
            members: {
              TargetOriginId: {
              },
              ForwardedValues: {
                type: 'structure',
                members: {
                  QueryString: {
                    type: 'boolean'
                  }
                }
              },
              TrustedSigners: {
                type: 'structure',
                members: {
                  Enabled: {
                    type: 'boolean'
                  },
                  Quantity: {
                    type: 'integer'
                  },
                  Items: {
                    type: 'list',
                    members: {
                      name: 'AwsAccountNumber'
                    }
                  }
                }
              },
              ViewerProtocolPolicy: {
              },
              MinTTL: {
                type: 'integer'
              }
            }
          },
          CacheBehaviors: {
            type: 'structure',
            members: {
              Quantity: {
                type: 'integer'
              },
              Items: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    PathPattern: {
                    },
                    TargetOriginId: {
                    },
                    ForwardedValues: {
                      type: 'structure',
                      members: {
                        QueryString: {
                          type: 'boolean'
                        }
                      }
                    },
                    TrustedSigners: {
                      type: 'structure',
                      members: {
                        Enabled: {
                          type: 'boolean'
                        },
                        Quantity: {
                          type: 'integer'
                        },
                        Items: {
                          type: 'list',
                          members: {
                            name: 'AwsAccountNumber'
                          }
                        }
                      }
                    },
                    ViewerProtocolPolicy: {
                    },
                    MinTTL: {
                      type: 'integer'
                    }
                  },
                  name: 'CacheBehavior'
                }
              }
            }
          },
          Comment: {
          },
          Logging: {
            type: 'structure',
            members: {
              Enabled: {
                type: 'boolean'
              },
              Bucket: {
              },
              Prefix: {
              }
            }
          },
          Enabled: {
            type: 'boolean'
          }
        }
      }
    },
    getInvalidation: {
      name: 'GetInvalidation2012_05_05',
      http: {
        uri: '/2012-05-05/distribution/{DistributionId}/invalidation/{Id}',
        method: 'GET'
      },
      input: {
        type: 'structure',
        members: {
          DistributionId: {
            required: true,
            location: 'uri'
          },
          Id: {
            required: true,
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Id: {
          },
          Status: {
          },
          CreateTime: {
            type: 'timestamp'
          },
          InvalidationBatch: {
            type: 'structure',
            members: {
              Paths: {
                type: 'structure',
                members: {
                  Quantity: {
                    type: 'integer'
                  },
                  Items: {
                    type: 'list',
                    members: {
                      name: 'Path'
                    }
                  }
                }
              },
              CallerReference: {
              }
            }
          }
        }
      }
    },
    getStreamingDistribution: {
      name: 'GetStreamingDistribution2012_05_05',
      http: {
        uri: '/2012-05-05/streaming-distribution/{Id}',
        method: 'GET'
      },
      input: {
        type: 'structure',
        members: {
          Id: {
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          ETag: {
            location: 'header',
            name: 'ETag'
          },
          Id: {
          },
          Status: {
          },
          LastModifiedTime: {
            type: 'timestamp'
          },
          DomainName: {
          },
          ActiveTrustedSigners: {
            type: 'structure',
            members: {
              Enabled: {
                type: 'boolean'
              },
              Quantity: {
                type: 'integer'
              },
              Items: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    AwsAccountNumber: {
                    },
                    KeyPairIds: {
                      type: 'structure',
                      members: {
                        Quantity: {
                          type: 'integer'
                        },
                        Items: {
                          type: 'list',
                          members: {
                            name: 'KeyPairId'
                          }
                        }
                      }
                    }
                  },
                  name: 'Signer'
                }
              }
            }
          },
          StreamingDistributionConfig: {
            type: 'structure',
            members: {
              CallerReference: {
              },
              S3Origin: {
                type: 'structure',
                members: {
                  DomainName: {
                  },
                  OriginAccessIdentity: {
                  }
                }
              },
              Aliases: {
                type: 'structure',
                members: {
                  Quantity: {
                    type: 'integer'
                  },
                  Items: {
                    type: 'list',
                    members: {
                      name: 'CNAME'
                    }
                  }
                }
              },
              Comment: {
              },
              Logging: {
                type: 'structure',
                members: {
                  Enabled: {
                    type: 'boolean'
                  },
                  Bucket: {
                  },
                  Prefix: {
                  }
                }
              },
              TrustedSigners: {
                type: 'structure',
                members: {
                  Enabled: {
                    type: 'boolean'
                  },
                  Quantity: {
                    type: 'integer'
                  },
                  Items: {
                    type: 'list',
                    members: {
                      name: 'AwsAccountNumber'
                    }
                  }
                }
              },
              Enabled: {
                type: 'boolean'
              }
            }
          }
        }
      }
    },
    getStreamingDistributionConfig: {
      name: 'GetStreamingDistributionConfig2012_05_05',
      http: {
        uri: '/2012-05-05/streaming-distribution/{Id}/config',
        method: 'GET'
      },
      input: {
        type: 'structure',
        members: {
          Id: {
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          ETag: {
            location: 'header',
            name: 'ETag'
          },
          CallerReference: {
          },
          S3Origin: {
            type: 'structure',
            members: {
              DomainName: {
              },
              OriginAccessIdentity: {
              }
            }
          },
          Aliases: {
            type: 'structure',
            members: {
              Quantity: {
                type: 'integer'
              },
              Items: {
                type: 'list',
                members: {
                  name: 'CNAME'
                }
              }
            }
          },
          Comment: {
          },
          Logging: {
            type: 'structure',
            members: {
              Enabled: {
                type: 'boolean'
              },
              Bucket: {
              },
              Prefix: {
              }
            }
          },
          TrustedSigners: {
            type: 'structure',
            members: {
              Enabled: {
                type: 'boolean'
              },
              Quantity: {
                type: 'integer'
              },
              Items: {
                type: 'list',
                members: {
                  name: 'AwsAccountNumber'
                }
              }
            }
          },
          Enabled: {
            type: 'boolean'
          }
        }
      }
    },
    listCloudFrontOriginAccessIdentities: {
      name: 'ListCloudFrontOriginAccessIdentities2012_05_05',
      http: {
        uri: '/2012-05-05/origin-access-identity/cloudfront?Marker={Marker}&MaxItems={MaxItems}',
        method: 'GET'
      },
      input: {
        type: 'structure',
        members: {
          Marker: {
            location: 'uri'
          },
          MaxItems: {
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Marker: {
          },
          NextMarker: {
          },
          MaxItems: {
            type: 'integer'
          },
          IsTruncated: {
            type: 'boolean'
          },
          Quantity: {
            type: 'integer'
          },
          Items: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Id: {
                },
                S3CanonicalUserId: {
                },
                Comment: {
                }
              },
              name: 'CloudFrontOriginAccessIdentitySummary'
            }
          }
        }
      }
    },
    listDistributions: {
      name: 'ListDistributions2012_05_05',
      http: {
        uri: '/2012-05-05/distribution?Marker={Marker}&MaxItems={MaxItems}',
        method: 'GET'
      },
      input: {
        type: 'structure',
        members: {
          Marker: {
            location: 'uri'
          },
          MaxItems: {
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Marker: {
          },
          NextMarker: {
          },
          MaxItems: {
            type: 'integer'
          },
          IsTruncated: {
            type: 'boolean'
          },
          Quantity: {
            type: 'integer'
          },
          Items: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Id: {
                },
                Status: {
                },
                LastModifiedTime: {
                  type: 'timestamp'
                },
                DomainName: {
                },
                Aliases: {
                  type: 'structure',
                  members: {
                    Quantity: {
                      type: 'integer'
                    },
                    Items: {
                      type: 'list',
                      members: {
                        name: 'CNAME'
                      }
                    }
                  }
                },
                Origins: {
                  type: 'structure',
                  members: {
                    Quantity: {
                      type: 'integer'
                    },
                    Items: {
                      type: 'list',
                      members: {
                        type: 'structure',
                        members: {
                          Id: {
                          },
                          DomainName: {
                          },
                          S3OriginConfig: {
                            type: 'structure',
                            members: {
                              OriginAccessIdentity: {
                              }
                            }
                          },
                          CustomOriginConfig: {
                            type: 'structure',
                            members: {
                              HTTPPort: {
                                type: 'integer'
                              },
                              HTTPSPort: {
                                type: 'integer'
                              },
                              OriginProtocolPolicy: {
                              }
                            }
                          }
                        },
                        name: 'Origin'
                      }
                    }
                  }
                },
                DefaultCacheBehavior: {
                  type: 'structure',
                  members: {
                    TargetOriginId: {
                    },
                    ForwardedValues: {
                      type: 'structure',
                      members: {
                        QueryString: {
                          type: 'boolean'
                        }
                      }
                    },
                    TrustedSigners: {
                      type: 'structure',
                      members: {
                        Enabled: {
                          type: 'boolean'
                        },
                        Quantity: {
                          type: 'integer'
                        },
                        Items: {
                          type: 'list',
                          members: {
                            name: 'AwsAccountNumber'
                          }
                        }
                      }
                    },
                    ViewerProtocolPolicy: {
                    },
                    MinTTL: {
                      type: 'integer'
                    }
                  }
                },
                CacheBehaviors: {
                  type: 'structure',
                  members: {
                    Quantity: {
                      type: 'integer'
                    },
                    Items: {
                      type: 'list',
                      members: {
                        type: 'structure',
                        members: {
                          PathPattern: {
                          },
                          TargetOriginId: {
                          },
                          ForwardedValues: {
                            type: 'structure',
                            members: {
                              QueryString: {
                                type: 'boolean'
                              }
                            }
                          },
                          TrustedSigners: {
                            type: 'structure',
                            members: {
                              Enabled: {
                                type: 'boolean'
                              },
                              Quantity: {
                                type: 'integer'
                              },
                              Items: {
                                type: 'list',
                                members: {
                                  name: 'AwsAccountNumber'
                                }
                              }
                            }
                          },
                          ViewerProtocolPolicy: {
                          },
                          MinTTL: {
                            type: 'integer'
                          }
                        },
                        name: 'CacheBehavior'
                      }
                    }
                  }
                },
                Comment: {
                },
                Enabled: {
                  type: 'boolean'
                }
              },
              name: 'DistributionSummary'
            }
          }
        }
      }
    },
    listInvalidations: {
      name: 'ListInvalidations2012_05_05',
      http: {
        uri: '/2012-05-05/distribution/{DistributionId}/invalidation?Marker={Marker}&MaxItems={MaxItems}',
        method: 'GET'
      },
      input: {
        type: 'structure',
        members: {
          DistributionId: {
            required: true,
            location: 'uri'
          },
          Marker: {
            location: 'uri'
          },
          MaxItems: {
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Marker: {
          },
          NextMarker: {
          },
          MaxItems: {
            type: 'integer'
          },
          IsTruncated: {
            type: 'boolean'
          },
          Quantity: {
            type: 'integer'
          },
          Items: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Id: {
                },
                Status: {
                }
              },
              name: 'InvalidationSummary'
            }
          }
        }
      }
    },
    listStreamingDistributions: {
      name: 'ListStreamingDistributions2012_05_05',
      http: {
        uri: '/2012-05-05/streaming-distribution?Marker={Marker}&MaxItems={MaxItems}',
        method: 'GET'
      },
      input: {
        type: 'structure',
        members: {
          Marker: {
            location: 'uri'
          },
          MaxItems: {
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Marker: {
          },
          NextMarker: {
          },
          MaxItems: {
            type: 'integer'
          },
          IsTruncated: {
            type: 'boolean'
          },
          Quantity: {
            type: 'integer'
          },
          Items: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Id: {
                },
                Status: {
                },
                LastModifiedTime: {
                  type: 'timestamp'
                },
                DomainName: {
                },
                S3Origin: {
                  type: 'structure',
                  members: {
                    DomainName: {
                    },
                    OriginAccessIdentity: {
                    }
                  }
                },
                Aliases: {
                  type: 'structure',
                  members: {
                    Quantity: {
                      type: 'integer'
                    },
                    Items: {
                      type: 'list',
                      members: {
                        name: 'CNAME'
                      }
                    }
                  }
                },
                TrustedSigners: {
                  type: 'structure',
                  members: {
                    Enabled: {
                      type: 'boolean'
                    },
                    Quantity: {
                      type: 'integer'
                    },
                    Items: {
                      type: 'list',
                      members: {
                        name: 'AwsAccountNumber'
                      }
                    }
                  }
                },
                Comment: {
                },
                Enabled: {
                  type: 'boolean'
                }
              },
              name: 'StreamingDistributionSummary'
            }
          }
        }
      }
    },
    updateCloudFrontOriginAccessIdentity: {
      name: 'UpdateCloudFrontOriginAccessIdentity2012_05_05',
      http: {
        uri: '/2012-05-05/origin-access-identity/cloudfront/{Id}/config',
        method: 'PUT'
      },
      input: {
        xml: 'CloudFrontOriginAccessIdentityConfig',
        type: 'structure',
        members: {
          CloudFrontOriginAccessIdentityConfig: {
            type: 'structure',
            members: {
              CallerReference: {
                required: true
              },
              Comment: {
                required: true
              }
            },
            required: true
          },
          Id: {
            location: 'uri'
          },
          IfMatch: {
            location: 'header',
            name: 'If-Match'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          ETag: {
            location: 'header',
            name: 'ETag'
          },
          Id: {
          },
          S3CanonicalUserId: {
          },
          CloudFrontOriginAccessIdentityConfig: {
            type: 'structure',
            members: {
              CallerReference: {
              },
              Comment: {
              }
            }
          }
        }
      }
    },
    updateDistribution: {
      name: 'UpdateDistribution2012_05_05',
      http: {
        uri: '/2012-05-05/distribution/{Id}/config',
        method: 'PUT'
      },
      input: {
        xml: 'DistributionConfig',
        type: 'structure',
        members: {
          DistributionConfig: {
            type: 'structure',
            members: {
              CallerReference: {
                required: true
              },
              Aliases: {
                type: 'structure',
                members: {
                  Quantity: {
                    type: 'integer',
                    required: true
                  },
                  Items: {
                    type: 'list',
                    members: {
                      name: 'CNAME'
                    }
                  }
                },
                required: true
              },
              DefaultRootObject: {
                required: true
              },
              Origins: {
                type: 'structure',
                members: {
                  Quantity: {
                    type: 'integer',
                    required: true
                  },
                  Items: {
                    type: 'list',
                    members: {
                      type: 'structure',
                      members: {
                        Id: {
                          required: true
                        },
                        DomainName: {
                          required: true
                        },
                        S3OriginConfig: {
                          type: 'structure',
                          members: {
                            OriginAccessIdentity: {
                              required: true
                            }
                          }
                        },
                        CustomOriginConfig: {
                          type: 'structure',
                          members: {
                            HTTPPort: {
                              type: 'integer',
                              required: true
                            },
                            HTTPSPort: {
                              type: 'integer',
                              required: true
                            },
                            OriginProtocolPolicy: {
                              required: true
                            }
                          }
                        }
                      },
                      name: 'Origin'
                    }
                  }
                },
                required: true
              },
              DefaultCacheBehavior: {
                type: 'structure',
                members: {
                  TargetOriginId: {
                    required: true
                  },
                  ForwardedValues: {
                    type: 'structure',
                    members: {
                      QueryString: {
                        type: 'boolean',
                        required: true
                      }
                    },
                    required: true
                  },
                  TrustedSigners: {
                    type: 'structure',
                    members: {
                      Enabled: {
                        type: 'boolean',
                        required: true
                      },
                      Quantity: {
                        type: 'integer',
                        required: true
                      },
                      Items: {
                        type: 'list',
                        members: {
                          name: 'AwsAccountNumber'
                        }
                      }
                    },
                    required: true
                  },
                  ViewerProtocolPolicy: {
                    required: true
                  },
                  MinTTL: {
                    type: 'integer',
                    required: true
                  }
                },
                required: true
              },
              CacheBehaviors: {
                type: 'structure',
                members: {
                  Quantity: {
                    type: 'integer',
                    required: true
                  },
                  Items: {
                    type: 'list',
                    members: {
                      type: 'structure',
                      members: {
                        PathPattern: {
                          required: true
                        },
                        TargetOriginId: {
                          required: true
                        },
                        ForwardedValues: {
                          type: 'structure',
                          members: {
                            QueryString: {
                              type: 'boolean',
                              required: true
                            }
                          },
                          required: true
                        },
                        TrustedSigners: {
                          type: 'structure',
                          members: {
                            Enabled: {
                              type: 'boolean',
                              required: true
                            },
                            Quantity: {
                              type: 'integer',
                              required: true
                            },
                            Items: {
                              type: 'list',
                              members: {
                                name: 'AwsAccountNumber'
                              }
                            }
                          },
                          required: true
                        },
                        ViewerProtocolPolicy: {
                          required: true
                        },
                        MinTTL: {
                          type: 'integer',
                          required: true
                        }
                      },
                      name: 'CacheBehavior'
                    }
                  }
                },
                required: true
              },
              Comment: {
                required: true
              },
              Logging: {
                type: 'structure',
                members: {
                  Enabled: {
                    type: 'boolean',
                    required: true
                  },
                  Bucket: {
                    required: true
                  },
                  Prefix: {
                    required: true
                  }
                },
                required: true
              },
              Enabled: {
                type: 'boolean',
                required: true
              }
            },
            required: true
          },
          Id: {
            location: 'uri'
          },
          IfMatch: {
            location: 'header',
            name: 'If-Match'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          ETag: {
            location: 'header',
            name: 'ETag'
          },
          Id: {
          },
          Status: {
          },
          LastModifiedTime: {
            type: 'timestamp'
          },
          InProgressInvalidationBatches: {
            type: 'integer'
          },
          DomainName: {
          },
          ActiveTrustedSigners: {
            type: 'structure',
            members: {
              Enabled: {
                type: 'boolean'
              },
              Quantity: {
                type: 'integer'
              },
              Items: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    AwsAccountNumber: {
                    },
                    KeyPairIds: {
                      type: 'structure',
                      members: {
                        Quantity: {
                          type: 'integer'
                        },
                        Items: {
                          type: 'list',
                          members: {
                            name: 'KeyPairId'
                          }
                        }
                      }
                    }
                  },
                  name: 'Signer'
                }
              }
            }
          },
          DistributionConfig: {
            type: 'structure',
            members: {
              CallerReference: {
              },
              Aliases: {
                type: 'structure',
                members: {
                  Quantity: {
                    type: 'integer'
                  },
                  Items: {
                    type: 'list',
                    members: {
                      name: 'CNAME'
                    }
                  }
                }
              },
              DefaultRootObject: {
              },
              Origins: {
                type: 'structure',
                members: {
                  Quantity: {
                    type: 'integer'
                  },
                  Items: {
                    type: 'list',
                    members: {
                      type: 'structure',
                      members: {
                        Id: {
                        },
                        DomainName: {
                        },
                        S3OriginConfig: {
                          type: 'structure',
                          members: {
                            OriginAccessIdentity: {
                            }
                          }
                        },
                        CustomOriginConfig: {
                          type: 'structure',
                          members: {
                            HTTPPort: {
                              type: 'integer'
                            },
                            HTTPSPort: {
                              type: 'integer'
                            },
                            OriginProtocolPolicy: {
                            }
                          }
                        }
                      },
                      name: 'Origin'
                    }
                  }
                }
              },
              DefaultCacheBehavior: {
                type: 'structure',
                members: {
                  TargetOriginId: {
                  },
                  ForwardedValues: {
                    type: 'structure',
                    members: {
                      QueryString: {
                        type: 'boolean'
                      }
                    }
                  },
                  TrustedSigners: {
                    type: 'structure',
                    members: {
                      Enabled: {
                        type: 'boolean'
                      },
                      Quantity: {
                        type: 'integer'
                      },
                      Items: {
                        type: 'list',
                        members: {
                          name: 'AwsAccountNumber'
                        }
                      }
                    }
                  },
                  ViewerProtocolPolicy: {
                  },
                  MinTTL: {
                    type: 'integer'
                  }
                }
              },
              CacheBehaviors: {
                type: 'structure',
                members: {
                  Quantity: {
                    type: 'integer'
                  },
                  Items: {
                    type: 'list',
                    members: {
                      type: 'structure',
                      members: {
                        PathPattern: {
                        },
                        TargetOriginId: {
                        },
                        ForwardedValues: {
                          type: 'structure',
                          members: {
                            QueryString: {
                              type: 'boolean'
                            }
                          }
                        },
                        TrustedSigners: {
                          type: 'structure',
                          members: {
                            Enabled: {
                              type: 'boolean'
                            },
                            Quantity: {
                              type: 'integer'
                            },
                            Items: {
                              type: 'list',
                              members: {
                                name: 'AwsAccountNumber'
                              }
                            }
                          }
                        },
                        ViewerProtocolPolicy: {
                        },
                        MinTTL: {
                          type: 'integer'
                        }
                      },
                      name: 'CacheBehavior'
                    }
                  }
                }
              },
              Comment: {
              },
              Logging: {
                type: 'structure',
                members: {
                  Enabled: {
                    type: 'boolean'
                  },
                  Bucket: {
                  },
                  Prefix: {
                  }
                }
              },
              Enabled: {
                type: 'boolean'
              }
            }
          }
        }
      }
    },
    updateStreamingDistribution: {
      name: 'UpdateStreamingDistribution2012_05_05',
      http: {
        uri: '/2012-05-05/streaming-distribution/{Id}/config',
        method: 'PUT'
      },
      input: {
        xml: 'StreamingDistributionConfig',
        type: 'structure',
        members: {
          StreamingDistributionConfig: {
            type: 'structure',
            members: {
              CallerReference: {
                required: true
              },
              S3Origin: {
                type: 'structure',
                members: {
                  DomainName: {
                    required: true
                  },
                  OriginAccessIdentity: {
                    required: true
                  }
                },
                required: true
              },
              Aliases: {
                type: 'structure',
                members: {
                  Quantity: {
                    type: 'integer',
                    required: true
                  },
                  Items: {
                    type: 'list',
                    members: {
                      name: 'CNAME'
                    }
                  }
                },
                required: true
              },
              Comment: {
                required: true
              },
              Logging: {
                type: 'structure',
                members: {
                  Enabled: {
                    type: 'boolean',
                    required: true
                  },
                  Bucket: {
                    required: true
                  },
                  Prefix: {
                    required: true
                  }
                },
                required: true
              },
              TrustedSigners: {
                type: 'structure',
                members: {
                  Enabled: {
                    type: 'boolean',
                    required: true
                  },
                  Quantity: {
                    type: 'integer',
                    required: true
                  },
                  Items: {
                    type: 'list',
                    members: {
                      name: 'AwsAccountNumber'
                    }
                  }
                },
                required: true
              },
              Enabled: {
                type: 'boolean',
                required: true
              }
            },
            required: true
          },
          Id: {
            location: 'uri'
          },
          IfMatch: {
            location: 'header',
            name: 'If-Match'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          ETag: {
            location: 'header',
            name: 'ETag'
          },
          Id: {
          },
          Status: {
          },
          LastModifiedTime: {
            type: 'timestamp'
          },
          DomainName: {
          },
          ActiveTrustedSigners: {
            type: 'structure',
            members: {
              Enabled: {
                type: 'boolean'
              },
              Quantity: {
                type: 'integer'
              },
              Items: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    AwsAccountNumber: {
                    },
                    KeyPairIds: {
                      type: 'structure',
                      members: {
                        Quantity: {
                          type: 'integer'
                        },
                        Items: {
                          type: 'list',
                          members: {
                            name: 'KeyPairId'
                          }
                        }
                      }
                    }
                  },
                  name: 'Signer'
                }
              }
            }
          },
          StreamingDistributionConfig: {
            type: 'structure',
            members: {
              CallerReference: {
              },
              S3Origin: {
                type: 'structure',
                members: {
                  DomainName: {
                  },
                  OriginAccessIdentity: {
                  }
                }
              },
              Aliases: {
                type: 'structure',
                members: {
                  Quantity: {
                    type: 'integer'
                  },
                  Items: {
                    type: 'list',
                    members: {
                      name: 'CNAME'
                    }
                  }
                }
              },
              Comment: {
              },
              Logging: {
                type: 'structure',
                members: {
                  Enabled: {
                    type: 'boolean'
                  },
                  Bucket: {
                  },
                  Prefix: {
                  }
                }
              },
              TrustedSigners: {
                type: 'structure',
                members: {
                  Enabled: {
                    type: 'boolean'
                  },
                  Quantity: {
                    type: 'integer'
                  },
                  Items: {
                    type: 'list',
                    members: {
                      name: 'AwsAccountNumber'
                    }
                  }
                }
              },
              Enabled: {
                type: 'boolean'
              }
            }
          }
        }
      }
    }
  }
};

},{}],45:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

module.exports = {
  format: 'query',
  apiVersion: '2011-02-01',
  endpointPrefix: 'cloudsearch',
  resultWrapped: true,
  serviceFullName: 'Amazon CloudSearch',
  signatureVersion: 'v2',
  timestampFormat: 'iso8601',
  operations: {
    createDomain: {
      name: 'CreateDomain',
      input: {
        type: 'structure',
        members: {
          DomainName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          DomainStatus: {
            type: 'structure',
            members: {
              DomainId: {
              },
              DomainName: {
              },
              Created: {
                type: 'boolean'
              },
              Deleted: {
                type: 'boolean'
              },
              NumSearchableDocs: {
                type: 'integer'
              },
              DocService: {
                type: 'structure',
                members: {
                  Arn: {
                  },
                  Endpoint: {
                  }
                }
              },
              SearchService: {
                type: 'structure',
                members: {
                  Arn: {
                  },
                  Endpoint: {
                  }
                }
              },
              RequiresIndexDocuments: {
                type: 'boolean'
              },
              Processing: {
                type: 'boolean'
              },
              SearchInstanceType: {
              },
              SearchPartitionCount: {
                type: 'integer'
              },
              SearchInstanceCount: {
                type: 'integer'
              }
            }
          }
        }
      }
    },
    defineIndexField: {
      name: 'DefineIndexField',
      input: {
        type: 'structure',
        members: {
          DomainName: {
            required: true
          },
          IndexField: {
            type: 'structure',
            members: {
              IndexFieldName: {
                required: true
              },
              IndexFieldType: {
                required: true
              },
              UIntOptions: {
                type: 'structure',
                members: {
                  DefaultValue: {
                    type: 'integer'
                  }
                }
              },
              LiteralOptions: {
                type: 'structure',
                members: {
                  DefaultValue: {
                  },
                  SearchEnabled: {
                    type: 'boolean'
                  },
                  FacetEnabled: {
                    type: 'boolean'
                  },
                  ResultEnabled: {
                    type: 'boolean'
                  }
                }
              },
              TextOptions: {
                type: 'structure',
                members: {
                  DefaultValue: {
                  },
                  FacetEnabled: {
                    type: 'boolean'
                  },
                  ResultEnabled: {
                    type: 'boolean'
                  },
                  TextProcessor: {
                  }
                }
              },
              SourceAttributes: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    SourceDataFunction: {
                      required: true
                    },
                    SourceDataCopy: {
                      type: 'structure',
                      members: {
                        SourceName: {
                          required: true
                        },
                        DefaultValue: {
                        }
                      }
                    },
                    SourceDataTrimTitle: {
                      type: 'structure',
                      members: {
                        SourceName: {
                          required: true
                        },
                        DefaultValue: {
                        },
                        Separator: {
                        },
                        Language: {
                        }
                      }
                    },
                    SourceDataMap: {
                      type: 'structure',
                      members: {
                        SourceName: {
                          required: true
                        },
                        DefaultValue: {
                        },
                        Cases: {
                          type: 'map'
                        }
                      }
                    }
                  }
                }
              }
            },
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          IndexField: {
            type: 'structure',
            members: {
              Options: {
                type: 'structure',
                members: {
                  IndexFieldName: {
                  },
                  IndexFieldType: {
                  },
                  UIntOptions: {
                    type: 'structure',
                    members: {
                      DefaultValue: {
                        type: 'integer'
                      }
                    }
                  },
                  LiteralOptions: {
                    type: 'structure',
                    members: {
                      DefaultValue: {
                      },
                      SearchEnabled: {
                        type: 'boolean'
                      },
                      FacetEnabled: {
                        type: 'boolean'
                      },
                      ResultEnabled: {
                        type: 'boolean'
                      }
                    }
                  },
                  TextOptions: {
                    type: 'structure',
                    members: {
                      DefaultValue: {
                      },
                      FacetEnabled: {
                        type: 'boolean'
                      },
                      ResultEnabled: {
                        type: 'boolean'
                      },
                      TextProcessor: {
                      }
                    }
                  },
                  SourceAttributes: {
                    type: 'list',
                    members: {
                      type: 'structure',
                      members: {
                        SourceDataFunction: {
                        },
                        SourceDataCopy: {
                          type: 'structure',
                          members: {
                            SourceName: {
                            },
                            DefaultValue: {
                            }
                          }
                        },
                        SourceDataTrimTitle: {
                          type: 'structure',
                          members: {
                            SourceName: {
                            },
                            DefaultValue: {
                            },
                            Separator: {
                            },
                            Language: {
                            }
                          }
                        },
                        SourceDataMap: {
                          type: 'structure',
                          members: {
                            SourceName: {
                            },
                            DefaultValue: {
                            },
                            Cases: {
                              type: 'map'
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              Status: {
                type: 'structure',
                members: {
                  CreationDate: {
                    type: 'timestamp'
                  },
                  UpdateDate: {
                    type: 'timestamp'
                  },
                  UpdateVersion: {
                    type: 'integer'
                  },
                  State: {
                  },
                  PendingDeletion: {
                    type: 'boolean'
                  }
                }
              }
            }
          }
        }
      }
    },
    defineRankExpression: {
      name: 'DefineRankExpression',
      input: {
        type: 'structure',
        members: {
          DomainName: {
            required: true
          },
          RankExpression: {
            type: 'structure',
            members: {
              RankName: {
                required: true
              },
              RankExpression: {
                required: true
              }
            },
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          RankExpression: {
            type: 'structure',
            members: {
              Options: {
                type: 'structure',
                members: {
                  RankName: {
                  },
                  RankExpression: {
                  }
                }
              },
              Status: {
                type: 'structure',
                members: {
                  CreationDate: {
                    type: 'timestamp'
                  },
                  UpdateDate: {
                    type: 'timestamp'
                  },
                  UpdateVersion: {
                    type: 'integer'
                  },
                  State: {
                  },
                  PendingDeletion: {
                    type: 'boolean'
                  }
                }
              }
            }
          }
        }
      }
    },
    deleteDomain: {
      name: 'DeleteDomain',
      input: {
        type: 'structure',
        members: {
          DomainName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          DomainStatus: {
            type: 'structure',
            members: {
              DomainId: {
              },
              DomainName: {
              },
              Created: {
                type: 'boolean'
              },
              Deleted: {
                type: 'boolean'
              },
              NumSearchableDocs: {
                type: 'integer'
              },
              DocService: {
                type: 'structure',
                members: {
                  Arn: {
                  },
                  Endpoint: {
                  }
                }
              },
              SearchService: {
                type: 'structure',
                members: {
                  Arn: {
                  },
                  Endpoint: {
                  }
                }
              },
              RequiresIndexDocuments: {
                type: 'boolean'
              },
              Processing: {
                type: 'boolean'
              },
              SearchInstanceType: {
              },
              SearchPartitionCount: {
                type: 'integer'
              },
              SearchInstanceCount: {
                type: 'integer'
              }
            }
          }
        }
      }
    },
    deleteIndexField: {
      name: 'DeleteIndexField',
      input: {
        type: 'structure',
        members: {
          DomainName: {
            required: true
          },
          IndexFieldName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          IndexField: {
            type: 'structure',
            members: {
              Options: {
                type: 'structure',
                members: {
                  IndexFieldName: {
                  },
                  IndexFieldType: {
                  },
                  UIntOptions: {
                    type: 'structure',
                    members: {
                      DefaultValue: {
                        type: 'integer'
                      }
                    }
                  },
                  LiteralOptions: {
                    type: 'structure',
                    members: {
                      DefaultValue: {
                      },
                      SearchEnabled: {
                        type: 'boolean'
                      },
                      FacetEnabled: {
                        type: 'boolean'
                      },
                      ResultEnabled: {
                        type: 'boolean'
                      }
                    }
                  },
                  TextOptions: {
                    type: 'structure',
                    members: {
                      DefaultValue: {
                      },
                      FacetEnabled: {
                        type: 'boolean'
                      },
                      ResultEnabled: {
                        type: 'boolean'
                      },
                      TextProcessor: {
                      }
                    }
                  },
                  SourceAttributes: {
                    type: 'list',
                    members: {
                      type: 'structure',
                      members: {
                        SourceDataFunction: {
                        },
                        SourceDataCopy: {
                          type: 'structure',
                          members: {
                            SourceName: {
                            },
                            DefaultValue: {
                            }
                          }
                        },
                        SourceDataTrimTitle: {
                          type: 'structure',
                          members: {
                            SourceName: {
                            },
                            DefaultValue: {
                            },
                            Separator: {
                            },
                            Language: {
                            }
                          }
                        },
                        SourceDataMap: {
                          type: 'structure',
                          members: {
                            SourceName: {
                            },
                            DefaultValue: {
                            },
                            Cases: {
                              type: 'map'
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              Status: {
                type: 'structure',
                members: {
                  CreationDate: {
                    type: 'timestamp'
                  },
                  UpdateDate: {
                    type: 'timestamp'
                  },
                  UpdateVersion: {
                    type: 'integer'
                  },
                  State: {
                  },
                  PendingDeletion: {
                    type: 'boolean'
                  }
                }
              }
            }
          }
        }
      }
    },
    deleteRankExpression: {
      name: 'DeleteRankExpression',
      input: {
        type: 'structure',
        members: {
          DomainName: {
            required: true
          },
          RankName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          RankExpression: {
            type: 'structure',
            members: {
              Options: {
                type: 'structure',
                members: {
                  RankName: {
                  },
                  RankExpression: {
                  }
                }
              },
              Status: {
                type: 'structure',
                members: {
                  CreationDate: {
                    type: 'timestamp'
                  },
                  UpdateDate: {
                    type: 'timestamp'
                  },
                  UpdateVersion: {
                    type: 'integer'
                  },
                  State: {
                  },
                  PendingDeletion: {
                    type: 'boolean'
                  }
                }
              }
            }
          }
        }
      }
    },
    describeDefaultSearchField: {
      name: 'DescribeDefaultSearchField',
      input: {
        type: 'structure',
        members: {
          DomainName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          DefaultSearchField: {
            type: 'structure',
            members: {
              Options: {
              },
              Status: {
                type: 'structure',
                members: {
                  CreationDate: {
                    type: 'timestamp'
                  },
                  UpdateDate: {
                    type: 'timestamp'
                  },
                  UpdateVersion: {
                    type: 'integer'
                  },
                  State: {
                  },
                  PendingDeletion: {
                    type: 'boolean'
                  }
                }
              }
            }
          }
        }
      }
    },
    describeDomains: {
      name: 'DescribeDomains',
      input: {
        type: 'structure',
        members: {
          DomainNames: {
            type: 'list'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          DomainStatusList: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                DomainId: {
                },
                DomainName: {
                },
                Created: {
                  type: 'boolean'
                },
                Deleted: {
                  type: 'boolean'
                },
                NumSearchableDocs: {
                  type: 'integer'
                },
                DocService: {
                  type: 'structure',
                  members: {
                    Arn: {
                    },
                    Endpoint: {
                    }
                  }
                },
                SearchService: {
                  type: 'structure',
                  members: {
                    Arn: {
                    },
                    Endpoint: {
                    }
                  }
                },
                RequiresIndexDocuments: {
                  type: 'boolean'
                },
                Processing: {
                  type: 'boolean'
                },
                SearchInstanceType: {
                },
                SearchPartitionCount: {
                  type: 'integer'
                },
                SearchInstanceCount: {
                  type: 'integer'
                }
              }
            }
          }
        }
      }
    },
    describeIndexFields: {
      name: 'DescribeIndexFields',
      input: {
        type: 'structure',
        members: {
          DomainName: {
            required: true
          },
          FieldNames: {
            type: 'list'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          IndexFields: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Options: {
                  type: 'structure',
                  members: {
                    IndexFieldName: {
                    },
                    IndexFieldType: {
                    },
                    UIntOptions: {
                      type: 'structure',
                      members: {
                        DefaultValue: {
                          type: 'integer'
                        }
                      }
                    },
                    LiteralOptions: {
                      type: 'structure',
                      members: {
                        DefaultValue: {
                        },
                        SearchEnabled: {
                          type: 'boolean'
                        },
                        FacetEnabled: {
                          type: 'boolean'
                        },
                        ResultEnabled: {
                          type: 'boolean'
                        }
                      }
                    },
                    TextOptions: {
                      type: 'structure',
                      members: {
                        DefaultValue: {
                        },
                        FacetEnabled: {
                          type: 'boolean'
                        },
                        ResultEnabled: {
                          type: 'boolean'
                        },
                        TextProcessor: {
                        }
                      }
                    },
                    SourceAttributes: {
                      type: 'list',
                      members: {
                        type: 'structure',
                        members: {
                          SourceDataFunction: {
                          },
                          SourceDataCopy: {
                            type: 'structure',
                            members: {
                              SourceName: {
                              },
                              DefaultValue: {
                              }
                            }
                          },
                          SourceDataTrimTitle: {
                            type: 'structure',
                            members: {
                              SourceName: {
                              },
                              DefaultValue: {
                              },
                              Separator: {
                              },
                              Language: {
                              }
                            }
                          },
                          SourceDataMap: {
                            type: 'structure',
                            members: {
                              SourceName: {
                              },
                              DefaultValue: {
                              },
                              Cases: {
                                type: 'map'
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                Status: {
                  type: 'structure',
                  members: {
                    CreationDate: {
                      type: 'timestamp'
                    },
                    UpdateDate: {
                      type: 'timestamp'
                    },
                    UpdateVersion: {
                      type: 'integer'
                    },
                    State: {
                    },
                    PendingDeletion: {
                      type: 'boolean'
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    describeRankExpressions: {
      name: 'DescribeRankExpressions',
      input: {
        type: 'structure',
        members: {
          DomainName: {
            required: true
          },
          RankNames: {
            type: 'list'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          RankExpressions: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Options: {
                  type: 'structure',
                  members: {
                    RankName: {
                    },
                    RankExpression: {
                    }
                  }
                },
                Status: {
                  type: 'structure',
                  members: {
                    CreationDate: {
                      type: 'timestamp'
                    },
                    UpdateDate: {
                      type: 'timestamp'
                    },
                    UpdateVersion: {
                      type: 'integer'
                    },
                    State: {
                    },
                    PendingDeletion: {
                      type: 'boolean'
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    describeServiceAccessPolicies: {
      name: 'DescribeServiceAccessPolicies',
      input: {
        type: 'structure',
        members: {
          DomainName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          AccessPolicies: {
            type: 'structure',
            members: {
              Options: {
              },
              Status: {
                type: 'structure',
                members: {
                  CreationDate: {
                    type: 'timestamp'
                  },
                  UpdateDate: {
                    type: 'timestamp'
                  },
                  UpdateVersion: {
                    type: 'integer'
                  },
                  State: {
                  },
                  PendingDeletion: {
                    type: 'boolean'
                  }
                }
              }
            }
          }
        }
      }
    },
    describeStemmingOptions: {
      name: 'DescribeStemmingOptions',
      input: {
        type: 'structure',
        members: {
          DomainName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Stems: {
            type: 'structure',
            members: {
              Options: {
              },
              Status: {
                type: 'structure',
                members: {
                  CreationDate: {
                    type: 'timestamp'
                  },
                  UpdateDate: {
                    type: 'timestamp'
                  },
                  UpdateVersion: {
                    type: 'integer'
                  },
                  State: {
                  },
                  PendingDeletion: {
                    type: 'boolean'
                  }
                }
              }
            }
          }
        }
      }
    },
    describeStopwordOptions: {
      name: 'DescribeStopwordOptions',
      input: {
        type: 'structure',
        members: {
          DomainName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Stopwords: {
            type: 'structure',
            members: {
              Options: {
              },
              Status: {
                type: 'structure',
                members: {
                  CreationDate: {
                    type: 'timestamp'
                  },
                  UpdateDate: {
                    type: 'timestamp'
                  },
                  UpdateVersion: {
                    type: 'integer'
                  },
                  State: {
                  },
                  PendingDeletion: {
                    type: 'boolean'
                  }
                }
              }
            }
          }
        }
      }
    },
    describeSynonymOptions: {
      name: 'DescribeSynonymOptions',
      input: {
        type: 'structure',
        members: {
          DomainName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Synonyms: {
            type: 'structure',
            members: {
              Options: {
              },
              Status: {
                type: 'structure',
                members: {
                  CreationDate: {
                    type: 'timestamp'
                  },
                  UpdateDate: {
                    type: 'timestamp'
                  },
                  UpdateVersion: {
                    type: 'integer'
                  },
                  State: {
                  },
                  PendingDeletion: {
                    type: 'boolean'
                  }
                }
              }
            }
          }
        }
      }
    },
    indexDocuments: {
      name: 'IndexDocuments',
      input: {
        type: 'structure',
        members: {
          DomainName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          FieldNames: {
            type: 'list'
          }
        }
      }
    },
    updateDefaultSearchField: {
      name: 'UpdateDefaultSearchField',
      input: {
        type: 'structure',
        members: {
          DomainName: {
            required: true
          },
          DefaultSearchField: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          DefaultSearchField: {
            type: 'structure',
            members: {
              Options: {
              },
              Status: {
                type: 'structure',
                members: {
                  CreationDate: {
                    type: 'timestamp'
                  },
                  UpdateDate: {
                    type: 'timestamp'
                  },
                  UpdateVersion: {
                    type: 'integer'
                  },
                  State: {
                  },
                  PendingDeletion: {
                    type: 'boolean'
                  }
                }
              }
            }
          }
        }
      }
    },
    updateServiceAccessPolicies: {
      name: 'UpdateServiceAccessPolicies',
      input: {
        type: 'structure',
        members: {
          DomainName: {
            required: true
          },
          AccessPolicies: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          AccessPolicies: {
            type: 'structure',
            members: {
              Options: {
              },
              Status: {
                type: 'structure',
                members: {
                  CreationDate: {
                    type: 'timestamp'
                  },
                  UpdateDate: {
                    type: 'timestamp'
                  },
                  UpdateVersion: {
                    type: 'integer'
                  },
                  State: {
                  },
                  PendingDeletion: {
                    type: 'boolean'
                  }
                }
              }
            }
          }
        }
      }
    },
    updateStemmingOptions: {
      name: 'UpdateStemmingOptions',
      input: {
        type: 'structure',
        members: {
          DomainName: {
            required: true
          },
          Stems: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Stems: {
            type: 'structure',
            members: {
              Options: {
              },
              Status: {
                type: 'structure',
                members: {
                  CreationDate: {
                    type: 'timestamp'
                  },
                  UpdateDate: {
                    type: 'timestamp'
                  },
                  UpdateVersion: {
                    type: 'integer'
                  },
                  State: {
                  },
                  PendingDeletion: {
                    type: 'boolean'
                  }
                }
              }
            }
          }
        }
      }
    },
    updateStopwordOptions: {
      name: 'UpdateStopwordOptions',
      input: {
        type: 'structure',
        members: {
          DomainName: {
            required: true
          },
          Stopwords: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Stopwords: {
            type: 'structure',
            members: {
              Options: {
              },
              Status: {
                type: 'structure',
                members: {
                  CreationDate: {
                    type: 'timestamp'
                  },
                  UpdateDate: {
                    type: 'timestamp'
                  },
                  UpdateVersion: {
                    type: 'integer'
                  },
                  State: {
                  },
                  PendingDeletion: {
                    type: 'boolean'
                  }
                }
              }
            }
          }
        }
      }
    },
    updateSynonymOptions: {
      name: 'UpdateSynonymOptions',
      input: {
        type: 'structure',
        members: {
          DomainName: {
            required: true
          },
          Synonyms: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Synonyms: {
            type: 'structure',
            members: {
              Options: {
              },
              Status: {
                type: 'structure',
                members: {
                  CreationDate: {
                    type: 'timestamp'
                  },
                  UpdateDate: {
                    type: 'timestamp'
                  },
                  UpdateVersion: {
                    type: 'integer'
                  },
                  State: {
                  },
                  PendingDeletion: {
                    type: 'boolean'
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};

},{}],46:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

module.exports = {
  format: 'query',
  apiVersion: '2010-08-01',
  endpointPrefix: 'monitoring',
  resultWrapped: true,
  serviceAbbreviation: 'CloudWatch',
  serviceFullName: 'Amazon CloudWatch',
  signatureVersion: 'v2',
  timestampFormat: 'iso8601',
  operations: {
    deleteAlarms: {
      name: 'DeleteAlarms',
      input: {
        type: 'structure',
        members: {
          AlarmNames: {
            type: 'list',
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    describeAlarmHistory: {
      name: 'DescribeAlarmHistory',
      input: {
        type: 'structure',
        members: {
          AlarmName: {
          },
          HistoryItemType: {
          },
          StartDate: {
            type: 'timestamp'
          },
          EndDate: {
            type: 'timestamp'
          },
          MaxRecords: {
            type: 'integer'
          },
          NextToken: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          AlarmHistoryItems: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                AlarmName: {
                },
                Timestamp: {
                  type: 'timestamp'
                },
                HistoryItemType: {
                },
                HistorySummary: {
                },
                HistoryData: {
                }
              }
            }
          },
          NextToken: {
          }
        }
      }
    },
    describeAlarms: {
      name: 'DescribeAlarms',
      input: {
        type: 'structure',
        members: {
          AlarmNames: {
            type: 'list'
          },
          AlarmNamePrefix: {
          },
          StateValue: {
          },
          ActionPrefix: {
          },
          MaxRecords: {
            type: 'integer'
          },
          NextToken: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          MetricAlarms: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                AlarmName: {
                },
                AlarmArn: {
                },
                AlarmDescription: {
                },
                AlarmConfigurationUpdatedTimestamp: {
                  type: 'timestamp'
                },
                ActionsEnabled: {
                  type: 'boolean'
                },
                OKActions: {
                  type: 'list'
                },
                AlarmActions: {
                  type: 'list'
                },
                InsufficientDataActions: {
                  type: 'list'
                },
                StateValue: {
                },
                StateReason: {
                },
                StateReasonData: {
                },
                StateUpdatedTimestamp: {
                  type: 'timestamp'
                },
                MetricName: {
                },
                Namespace: {
                },
                Statistic: {
                },
                Dimensions: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      Name: {
                      },
                      Value: {
                      }
                    }
                  }
                },
                Period: {
                  type: 'integer'
                },
                Unit: {
                },
                EvaluationPeriods: {
                  type: 'integer'
                },
                Threshold: {
                  type: 'float'
                },
                ComparisonOperator: {
                }
              }
            }
          },
          NextToken: {
          }
        }
      }
    },
    describeAlarmsForMetric: {
      name: 'DescribeAlarmsForMetric',
      input: {
        type: 'structure',
        members: {
          MetricName: {
            required: true
          },
          Namespace: {
            required: true
          },
          Statistic: {
          },
          Dimensions: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                  required: true
                },
                Value: {
                  required: true
                }
              },
              order: [
                'Name',
                'Value'
              ]
            }
          },
          Period: {
            type: 'integer'
          },
          Unit: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          MetricAlarms: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                AlarmName: {
                },
                AlarmArn: {
                },
                AlarmDescription: {
                },
                AlarmConfigurationUpdatedTimestamp: {
                  type: 'timestamp'
                },
                ActionsEnabled: {
                  type: 'boolean'
                },
                OKActions: {
                  type: 'list'
                },
                AlarmActions: {
                  type: 'list'
                },
                InsufficientDataActions: {
                  type: 'list'
                },
                StateValue: {
                },
                StateReason: {
                },
                StateReasonData: {
                },
                StateUpdatedTimestamp: {
                  type: 'timestamp'
                },
                MetricName: {
                },
                Namespace: {
                },
                Statistic: {
                },
                Dimensions: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      Name: {
                      },
                      Value: {
                      }
                    }
                  }
                },
                Period: {
                  type: 'integer'
                },
                Unit: {
                },
                EvaluationPeriods: {
                  type: 'integer'
                },
                Threshold: {
                  type: 'float'
                },
                ComparisonOperator: {
                }
              }
            }
          }
        }
      }
    },
    disableAlarmActions: {
      name: 'DisableAlarmActions',
      input: {
        type: 'structure',
        members: {
          AlarmNames: {
            type: 'list',
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    enableAlarmActions: {
      name: 'EnableAlarmActions',
      input: {
        type: 'structure',
        members: {
          AlarmNames: {
            type: 'list',
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    getMetricStatistics: {
      name: 'GetMetricStatistics',
      input: {
        type: 'structure',
        members: {
          Namespace: {
            required: true
          },
          MetricName: {
            required: true
          },
          Dimensions: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                  required: true
                },
                Value: {
                  required: true
                }
              },
              order: [
                'Name',
                'Value'
              ]
            }
          },
          StartTime: {
            type: 'timestamp',
            required: true
          },
          EndTime: {
            type: 'timestamp',
            required: true
          },
          Period: {
            type: 'integer',
            required: true
          },
          Statistics: {
            type: 'list',
            required: true
          },
          Unit: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Label: {
          },
          Datapoints: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Timestamp: {
                  type: 'timestamp'
                },
                SampleCount: {
                  type: 'float'
                },
                Average: {
                  type: 'float'
                },
                Sum: {
                  type: 'float'
                },
                Minimum: {
                  type: 'float'
                },
                Maximum: {
                  type: 'float'
                },
                Unit: {
                }
              }
            }
          }
        }
      }
    },
    listMetrics: {
      name: 'ListMetrics',
      input: {
        type: 'structure',
        members: {
          Namespace: {
          },
          MetricName: {
          },
          Dimensions: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                  required: true
                },
                Value: {
                }
              }
            }
          },
          NextToken: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Metrics: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Namespace: {
                },
                MetricName: {
                },
                Dimensions: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      Name: {
                      },
                      Value: {
                      }
                    }
                  }
                }
              }
            }
          },
          NextToken: {
          }
        }
      }
    },
    putMetricAlarm: {
      name: 'PutMetricAlarm',
      input: {
        type: 'structure',
        members: {
          AlarmName: {
            required: true
          },
          AlarmDescription: {
          },
          ActionsEnabled: {
            type: 'boolean'
          },
          OKActions: {
            type: 'list'
          },
          AlarmActions: {
            type: 'list'
          },
          InsufficientDataActions: {
            type: 'list'
          },
          MetricName: {
            required: true
          },
          Namespace: {
            required: true
          },
          Statistic: {
            required: true
          },
          Dimensions: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                  required: true
                },
                Value: {
                  required: true
                }
              },
              order: [
                'Name',
                'Value'
              ]
            }
          },
          Period: {
            type: 'integer',
            required: true
          },
          Unit: {
          },
          EvaluationPeriods: {
            type: 'integer',
            required: true
          },
          Threshold: {
            type: 'float',
            required: true
          },
          ComparisonOperator: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    putMetricData: {
      name: 'PutMetricData',
      input: {
        type: 'structure',
        members: {
          Namespace: {
            required: true
          },
          MetricData: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                MetricName: {
                  required: true
                },
                Dimensions: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      Name: {
                        required: true
                      },
                      Value: {
                        required: true
                      }
                    },
                    order: [
                      'Name',
                      'Value'
                    ]
                  }
                },
                Timestamp: {
                  type: 'timestamp'
                },
                Value: {
                  type: 'float'
                },
                StatisticValues: {
                  type: 'structure',
                  members: {
                    SampleCount: {
                      type: 'float',
                      required: true
                    },
                    Sum: {
                      type: 'float',
                      required: true
                    },
                    Minimum: {
                      type: 'float',
                      required: true
                    },
                    Maximum: {
                      type: 'float',
                      required: true
                    }
                  }
                },
                Unit: {
                }
              }
            },
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    setAlarmState: {
      name: 'SetAlarmState',
      input: {
        type: 'structure',
        members: {
          AlarmName: {
            required: true
          },
          StateValue: {
            required: true
          },
          StateReason: {
            required: true
          },
          StateReasonData: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    }
  }
};

},{}],47:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

module.exports = {
  format: 'json',
  apiVersion: '2012-10-29',
  endpointPrefix: 'datapipeline',
  jsonVersion: '1.1',
  serviceFullName: 'AWS Data Pipeline',
  signatureVersion: 'v4',
  targetPrefix: 'DataPipeline',
  timestampFormat: 'iso8601',
  operations: {
    activatePipeline: {
      name: 'ActivatePipeline',
      input: {
        type: 'structure',
        members: {
          pipelineId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure'
      }
    },
    createPipeline: {
      name: 'CreatePipeline',
      input: {
        type: 'structure',
        members: {
          name: {
            required: true
          },
          uniqueId: {
            required: true
          },
          description: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          pipelineId: {
          }
        }
      }
    },
    deletePipeline: {
      name: 'DeletePipeline',
      input: {
        type: 'structure',
        members: {
          pipelineId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    describeObjects: {
      name: 'DescribeObjects',
      input: {
        type: 'structure',
        members: {
          pipelineId: {
            required: true
          },
          objectIds: {
            type: 'list',
            required: true
          },
          evaluateExpressions: {
            type: 'boolean'
          },
          marker: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          pipelineObjects: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                id: {
                },
                name: {
                },
                fields: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      key: {
                      },
                      stringValue: {
                      },
                      refValue: {
                      }
                    }
                  }
                }
              }
            }
          },
          marker: {
          },
          hasMoreResults: {
            type: 'boolean'
          }
        }
      }
    },
    describePipelines: {
      name: 'DescribePipelines',
      input: {
        type: 'structure',
        members: {
          pipelineIds: {
            type: 'list',
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          pipelineDescriptionList: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                pipelineId: {
                },
                name: {
                },
                fields: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      key: {
                      },
                      stringValue: {
                      },
                      refValue: {
                      }
                    }
                  }
                },
                description: {
                }
              }
            }
          }
        }
      }
    },
    evaluateExpression: {
      name: 'EvaluateExpression',
      input: {
        type: 'structure',
        members: {
          pipelineId: {
            required: true
          },
          objectId: {
            required: true
          },
          expression: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          evaluatedExpression: {
          }
        }
      }
    },
    getPipelineDefinition: {
      name: 'GetPipelineDefinition',
      input: {
        type: 'structure',
        members: {
          pipelineId: {
            required: true
          },
          version: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          pipelineObjects: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                id: {
                },
                name: {
                },
                fields: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      key: {
                      },
                      stringValue: {
                      },
                      refValue: {
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    listPipelines: {
      name: 'ListPipelines',
      input: {
        type: 'structure',
        members: {
          marker: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          pipelineIdList: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                id: {
                },
                name: {
                }
              }
            }
          },
          marker: {
          },
          hasMoreResults: {
            type: 'boolean'
          }
        }
      }
    },
    pollForTask: {
      name: 'PollForTask',
      input: {
        type: 'structure',
        members: {
          workerGroup: {
            required: true
          },
          hostname: {
          },
          instanceIdentity: {
            type: 'structure',
            members: {
              document: {
              },
              signature: {
              }
            }
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          taskObject: {
            type: 'structure',
            members: {
              taskId: {
              },
              pipelineId: {
              },
              attemptId: {
              },
              objects: {
                type: 'map',
                members: {
                  type: 'structure',
                  members: {
                    id: {
                    },
                    name: {
                    },
                    fields: {
                      type: 'list',
                      members: {
                        type: 'structure',
                        members: {
                          key: {
                          },
                          stringValue: {
                          },
                          refValue: {
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    putPipelineDefinition: {
      name: 'PutPipelineDefinition',
      input: {
        type: 'structure',
        members: {
          pipelineId: {
            required: true
          },
          pipelineObjects: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                id: {
                  required: true
                },
                name: {
                  required: true
                },
                fields: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      key: {
                        required: true
                      },
                      stringValue: {
                      },
                      refValue: {
                      }
                    }
                  },
                  required: true
                }
              }
            },
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          validationErrors: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                id: {
                },
                errors: {
                  type: 'list'
                }
              }
            }
          },
          errored: {
            type: 'boolean'
          }
        }
      }
    },
    queryObjects: {
      name: 'QueryObjects',
      input: {
        type: 'structure',
        members: {
          pipelineId: {
            required: true
          },
          query: {
            type: 'structure',
            members: {
              selectors: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    fieldName: {
                    },
                    operator: {
                      type: 'structure',
                      members: {
                        type: {
                        },
                        values: {
                          type: 'list'
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          sphere: {
            required: true
          },
          marker: {
          },
          limit: {
            type: 'integer'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          ids: {
            type: 'list'
          },
          marker: {
          },
          hasMoreResults: {
            type: 'boolean'
          }
        }
      }
    },
    reportTaskProgress: {
      name: 'ReportTaskProgress',
      input: {
        type: 'structure',
        members: {
          taskId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          canceled: {
            type: 'boolean'
          }
        }
      }
    },
    reportTaskRunnerHeartbeat: {
      name: 'ReportTaskRunnerHeartbeat',
      input: {
        type: 'structure',
        members: {
          taskrunnerId: {
            required: true
          },
          workerGroup: {
          },
          hostname: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          terminate: {
            type: 'boolean'
          }
        }
      }
    },
    setStatus: {
      name: 'SetStatus',
      input: {
        type: 'structure',
        members: {
          pipelineId: {
            required: true
          },
          objectIds: {
            type: 'list',
            required: true
          },
          status: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    setTaskStatus: {
      name: 'SetTaskStatus',
      input: {
        type: 'structure',
        members: {
          taskId: {
            required: true
          },
          taskStatus: {
            required: true
          },
          errorCode: {
            type: 'integer'
          },
          errorMessage: {
          },
          errorStackTrace: {
          }
        }
      },
      output: {
        type: 'structure'
      }
    },
    validatePipelineDefinition: {
      name: 'ValidatePipelineDefinition',
      input: {
        type: 'structure',
        members: {
          pipelineId: {
            required: true
          },
          pipelineObjects: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                id: {
                  required: true
                },
                name: {
                  required: true
                },
                fields: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      key: {
                        required: true
                      },
                      stringValue: {
                      },
                      refValue: {
                      }
                    }
                  },
                  required: true
                }
              }
            },
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          validationErrors: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                id: {
                },
                errors: {
                  type: 'list'
                }
              }
            }
          },
          errored: {
            type: 'boolean'
          }
        }
      }
    }
  }
};

},{}],48:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

module.exports = {
  format: 'json',
  apiVersion: '2012-10-25',
  endpointPrefix: 'directconnect',
  jsonVersion: '1.1',
  serviceFullName: 'AWS Direct Connect',
  signatureVersion: 'v4',
  targetPrefix: 'OvertureService',
  timestampFormat: 'iso8601',
  operations: {
    createConnection: {
      name: 'CreateConnection',
      input: {
        type: 'structure',
        members: {
          offeringId: {
            required: true
          },
          connectionName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          connectionId: {
          },
          connectionName: {
          },
          connectionState: {
          },
          region: {
          },
          location: {
          }
        }
      }
    },
    createPrivateVirtualInterface: {
      name: 'CreatePrivateVirtualInterface',
      input: {
        type: 'structure',
        members: {
          connectionId: {
          },
          newPrivateVirtualInterface: {
            type: 'structure',
            members: {
              virtualInterfaceName: {
              },
              vlan: {
                type: 'integer'
              },
              asn: {
                type: 'integer'
              },
              authKey: {
              },
              amazonAddress: {
              },
              customerAddress: {
              },
              virtualGatewayId: {
              }
            }
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          virtualInterfaceId: {
          },
          location: {
          },
          connectionId: {
          },
          virtualInterfaceType: {
          },
          virtualInterfaceName: {
          },
          vlan: {
            type: 'integer'
          },
          asn: {
            type: 'integer'
          },
          authKey: {
          },
          amazonAddress: {
          },
          customerAddress: {
          },
          virtualInterfaceState: {
          },
          customerRouterConfig: {
          },
          virtualGatewayId: {
          },
          routeFilterPrefixes: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                cidr: {
                }
              }
            }
          }
        }
      }
    },
    createPublicVirtualInterface: {
      name: 'CreatePublicVirtualInterface',
      input: {
        type: 'structure',
        members: {
          connectionId: {
          },
          newPublicVirtualInterface: {
            type: 'structure',
            members: {
              virtualInterfaceName: {
              },
              vlan: {
                type: 'integer'
              },
              asn: {
                type: 'integer'
              },
              authKey: {
              },
              amazonAddress: {
              },
              customerAddress: {
              },
              routeFilterPrefixes: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    cidr: {
                    }
                  }
                }
              }
            }
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          virtualInterfaceId: {
          },
          location: {
          },
          connectionId: {
          },
          virtualInterfaceType: {
          },
          virtualInterfaceName: {
          },
          vlan: {
            type: 'integer'
          },
          asn: {
            type: 'integer'
          },
          authKey: {
          },
          amazonAddress: {
          },
          customerAddress: {
          },
          virtualInterfaceState: {
          },
          customerRouterConfig: {
          },
          virtualGatewayId: {
          },
          routeFilterPrefixes: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                cidr: {
                }
              }
            }
          }
        }
      }
    },
    deleteConnection: {
      name: 'DeleteConnection',
      input: {
        type: 'structure',
        members: {
          connectionId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          connectionId: {
          },
          connectionName: {
          },
          connectionState: {
          },
          region: {
          },
          location: {
          }
        }
      }
    },
    deleteVirtualInterface: {
      name: 'DeleteVirtualInterface',
      input: {
        type: 'structure',
        members: {
          virtualInterfaceId: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          virtualInterfaceState: {
          }
        }
      }
    },
    describeConnectionDetail: {
      name: 'DescribeConnectionDetail',
      input: {
        type: 'structure',
        members: {
          connectionId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          connectionId: {
          },
          connectionName: {
          },
          connectionState: {
          },
          region: {
          },
          location: {
          },
          bandwidth: {
          },
          connectionCosts: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                name: {
                },
                unit: {
                },
                currencyCode: {
                },
                amount: {
                }
              }
            }
          },
          orderSteps: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                number: {
                },
                name: {
                },
                description: {
                },
                owner: {
                },
                sla: {
                  type: 'integer'
                },
                stepState: {
                }
              }
            }
          }
        }
      }
    },
    describeConnections: {
      name: 'DescribeConnections',
      input: {
        type: 'structure',
        members: {
          connectionId: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          connections: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                connectionId: {
                },
                connectionName: {
                },
                connectionState: {
                },
                region: {
                },
                location: {
                }
              }
            }
          }
        }
      }
    },
    describeOfferingDetail: {
      name: 'DescribeOfferingDetail',
      input: {
        type: 'structure',
        members: {
          offeringId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          offeringId: {
          },
          region: {
          },
          location: {
          },
          offeringName: {
          },
          description: {
          },
          bandwidth: {
          },
          connectionCosts: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                name: {
                },
                unit: {
                },
                currencyCode: {
                },
                amount: {
                }
              }
            }
          },
          orderSteps: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                number: {
                },
                name: {
                },
                description: {
                },
                owner: {
                },
                sla: {
                  type: 'integer'
                }
              }
            }
          }
        }
      }
    },
    describeOfferings: {
      name: 'DescribeOfferings',
      input: {
        type: 'structure',
        members: {
        }
      },
      output: {
        type: 'structure',
        members: {
          offerings: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                offeringId: {
                },
                region: {
                },
                location: {
                },
                offeringName: {
                },
                description: {
                },
                bandwidth: {
                },
                connectionCosts: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      name: {
                      },
                      unit: {
                      },
                      currencyCode: {
                      },
                      amount: {
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    describeVirtualGateways: {
      name: 'DescribeVirtualGateways',
      input: {
        type: 'structure',
        members: {
        }
      },
      output: {
        type: 'structure',
        members: {
          virtualGateways: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                virtualGatewayId: {
                },
                virtualGatewayState: {
                }
              }
            }
          }
        }
      }
    },
    describeVirtualInterfaces: {
      name: 'DescribeVirtualInterfaces',
      input: {
        type: 'structure',
        members: {
          connectionId: {
          },
          virtualInterfaceId: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          virtualInterfaces: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                virtualInterfaceId: {
                },
                location: {
                },
                connectionId: {
                },
                virtualInterfaceType: {
                },
                virtualInterfaceName: {
                },
                vlan: {
                  type: 'integer'
                },
                asn: {
                  type: 'integer'
                },
                authKey: {
                },
                amazonAddress: {
                },
                customerAddress: {
                },
                virtualInterfaceState: {
                },
                customerRouterConfig: {
                },
                virtualGatewayId: {
                },
                routeFilterPrefixes: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      cidr: {
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};

},{}],49:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

module.exports = {
  format: 'json',
  apiVersion: '2011-12-05',
  endpointPrefix: 'dynamodb',
  jsonVersion: '1.0',
  serviceAbbreviation: 'DynamoDB',
  serviceFullName: 'Amazon DynamoDB',
  signatureVersion: 'v4',
  targetPrefix: 'DynamoDB_20111205',
  timestampFormat: 'iso8601',
  operations: {
    batchGetItem: {
      name: 'BatchGetItem',
      input: {
        type: 'structure',
        members: {
          RequestItems: {
            type: 'map',
            members: {
              type: 'structure',
              members: {
                Keys: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      HashKeyElement: {
                        type: 'structure',
                        members: {
                          S: {
                          },
                          N: {
                          },
                          B: {
                            type: 'base64'
                          },
                          SS: {
                            type: 'list'
                          },
                          NS: {
                            type: 'list'
                          },
                          BS: {
                            type: 'list',
                            members: {
                              type: 'base64'
                            }
                          }
                        },
                        required: true
                      },
                      RangeKeyElement: {
                        type: 'structure',
                        members: {
                          S: {
                          },
                          N: {
                          },
                          B: {
                            type: 'base64'
                          },
                          SS: {
                            type: 'list'
                          },
                          NS: {
                            type: 'list'
                          },
                          BS: {
                            type: 'list',
                            members: {
                              type: 'base64'
                            }
                          }
                        }
                      }
                    }
                  },
                  required: true
                },
                AttributesToGet: {
                  type: 'list'
                },
                ConsistentRead: {
                  type: 'boolean'
                }
              }
            },
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Responses: {
            type: 'map',
            members: {
              type: 'structure',
              members: {
                Items: {
                  type: 'list',
                  members: {
                    type: 'map',
                    members: {
                      type: 'structure',
                      members: {
                        S: {
                        },
                        N: {
                        },
                        B: {
                          type: 'base64'
                        },
                        SS: {
                          type: 'list'
                        },
                        NS: {
                          type: 'list'
                        },
                        BS: {
                          type: 'list',
                          members: {
                            type: 'base64'
                          }
                        }
                      }
                    }
                  }
                },
                ConsumedCapacityUnits: {
                  type: 'float'
                }
              }
            }
          },
          UnprocessedKeys: {
            type: 'map',
            members: {
              type: 'structure',
              members: {
                Keys: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      HashKeyElement: {
                        type: 'structure',
                        members: {
                          S: {
                          },
                          N: {
                          },
                          B: {
                            type: 'base64'
                          },
                          SS: {
                            type: 'list'
                          },
                          NS: {
                            type: 'list'
                          },
                          BS: {
                            type: 'list',
                            members: {
                              type: 'base64'
                            }
                          }
                        }
                      },
                      RangeKeyElement: {
                        type: 'structure',
                        members: {
                          S: {
                          },
                          N: {
                          },
                          B: {
                            type: 'base64'
                          },
                          SS: {
                            type: 'list'
                          },
                          NS: {
                            type: 'list'
                          },
                          BS: {
                            type: 'list',
                            members: {
                              type: 'base64'
                            }
                          }
                        }
                      }
                    }
                  }
                },
                AttributesToGet: {
                  type: 'list'
                },
                ConsistentRead: {
                  type: 'boolean'
                }
              }
            }
          }
        }
      }
    },
    batchWriteItem: {
      name: 'BatchWriteItem',
      input: {
        type: 'structure',
        members: {
          RequestItems: {
            type: 'map',
            members: {
              type: 'list',
              members: {
                type: 'structure',
                members: {
                  PutRequest: {
                    type: 'structure',
                    members: {
                      Item: {
                        type: 'map',
                        members: {
                          type: 'structure',
                          members: {
                            S: {
                            },
                            N: {
                            },
                            B: {
                              type: 'base64'
                            },
                            SS: {
                              type: 'list'
                            },
                            NS: {
                              type: 'list'
                            },
                            BS: {
                              type: 'list',
                              members: {
                                type: 'base64'
                              }
                            }
                          }
                        },
                        required: true
                      }
                    }
                  },
                  DeleteRequest: {
                    type: 'structure',
                    members: {
                      Key: {
                        type: 'structure',
                        members: {
                          HashKeyElement: {
                            type: 'structure',
                            members: {
                              S: {
                              },
                              N: {
                              },
                              B: {
                                type: 'base64'
                              },
                              SS: {
                                type: 'list'
                              },
                              NS: {
                                type: 'list'
                              },
                              BS: {
                                type: 'list',
                                members: {
                                  type: 'base64'
                                }
                              }
                            },
                            required: true
                          },
                          RangeKeyElement: {
                            type: 'structure',
                            members: {
                              S: {
                              },
                              N: {
                              },
                              B: {
                                type: 'base64'
                              },
                              SS: {
                                type: 'list'
                              },
                              NS: {
                                type: 'list'
                              },
                              BS: {
                                type: 'list',
                                members: {
                                  type: 'base64'
                                }
                              }
                            }
                          }
                        },
                        required: true
                      }
                    }
                  }
                }
              }
            },
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Responses: {
            type: 'map',
            members: {
              type: 'structure',
              members: {
                ConsumedCapacityUnits: {
                  type: 'float'
                }
              }
            }
          },
          UnprocessedItems: {
            type: 'map',
            members: {
              type: 'list',
              members: {
                type: 'structure',
                members: {
                  PutRequest: {
                    type: 'structure',
                    members: {
                      Item: {
                        type: 'map',
                        members: {
                          type: 'structure',
                          members: {
                            S: {
                            },
                            N: {
                            },
                            B: {
                              type: 'base64'
                            },
                            SS: {
                              type: 'list'
                            },
                            NS: {
                              type: 'list'
                            },
                            BS: {
                              type: 'list',
                              members: {
                                type: 'base64'
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  DeleteRequest: {
                    type: 'structure',
                    members: {
                      Key: {
                        type: 'structure',
                        members: {
                          HashKeyElement: {
                            type: 'structure',
                            members: {
                              S: {
                              },
                              N: {
                              },
                              B: {
                                type: 'base64'
                              },
                              SS: {
                                type: 'list'
                              },
                              NS: {
                                type: 'list'
                              },
                              BS: {
                                type: 'list',
                                members: {
                                  type: 'base64'
                                }
                              }
                            }
                          },
                          RangeKeyElement: {
                            type: 'structure',
                            members: {
                              S: {
                              },
                              N: {
                              },
                              B: {
                                type: 'base64'
                              },
                              SS: {
                                type: 'list'
                              },
                              NS: {
                                type: 'list'
                              },
                              BS: {
                                type: 'list',
                                members: {
                                  type: 'base64'
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    createTable: {
      name: 'CreateTable',
      input: {
        type: 'structure',
        members: {
          TableName: {
            required: true
          },
          KeySchema: {
            type: 'structure',
            members: {
              HashKeyElement: {
                type: 'structure',
                members: {
                  AttributeName: {
                    required: true
                  },
                  AttributeType: {
                    required: true
                  }
                },
                required: true
              },
              RangeKeyElement: {
                type: 'structure',
                members: {
                  AttributeName: {
                    required: true
                  },
                  AttributeType: {
                    required: true
                  }
                }
              }
            },
            required: true
          },
          ProvisionedThroughput: {
            type: 'structure',
            members: {
              ReadCapacityUnits: {
                type: 'integer',
                required: true
              },
              WriteCapacityUnits: {
                type: 'integer',
                required: true
              }
            },
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          TableDescription: {
            type: 'structure',
            members: {
              TableName: {
              },
              KeySchema: {
                type: 'structure',
                members: {
                  HashKeyElement: {
                    type: 'structure',
                    members: {
                      AttributeName: {
                      },
                      AttributeType: {
                      }
                    }
                  },
                  RangeKeyElement: {
                    type: 'structure',
                    members: {
                      AttributeName: {
                      },
                      AttributeType: {
                      }
                    }
                  }
                }
              },
              TableStatus: {
              },
              CreationDateTime: {
                type: 'timestamp'
              },
              ProvisionedThroughput: {
                type: 'structure',
                members: {
                  LastIncreaseDateTime: {
                    type: 'timestamp'
                  },
                  LastDecreaseDateTime: {
                    type: 'timestamp'
                  },
                  ReadCapacityUnits: {
                    type: 'integer'
                  },
                  WriteCapacityUnits: {
                    type: 'integer'
                  }
                }
              },
              TableSizeBytes: {
                type: 'integer'
              },
              ItemCount: {
                type: 'integer'
              }
            }
          }
        }
      }
    },
    deleteItem: {
      name: 'DeleteItem',
      input: {
        type: 'structure',
        members: {
          TableName: {
            required: true
          },
          Key: {
            type: 'structure',
            members: {
              HashKeyElement: {
                type: 'structure',
                members: {
                  S: {
                  },
                  N: {
                  },
                  B: {
                    type: 'base64'
                  },
                  SS: {
                    type: 'list'
                  },
                  NS: {
                    type: 'list'
                  },
                  BS: {
                    type: 'list',
                    members: {
                      type: 'base64'
                    }
                  }
                },
                required: true
              },
              RangeKeyElement: {
                type: 'structure',
                members: {
                  S: {
                  },
                  N: {
                  },
                  B: {
                    type: 'base64'
                  },
                  SS: {
                    type: 'list'
                  },
                  NS: {
                    type: 'list'
                  },
                  BS: {
                    type: 'list',
                    members: {
                      type: 'base64'
                    }
                  }
                }
              }
            },
            required: true
          },
          Expected: {
            type: 'map',
            members: {
              type: 'structure',
              members: {
                Value: {
                  type: 'structure',
                  members: {
                    S: {
                    },
                    N: {
                    },
                    B: {
                      type: 'base64'
                    },
                    SS: {
                      type: 'list'
                    },
                    NS: {
                      type: 'list'
                    },
                    BS: {
                      type: 'list',
                      members: {
                        type: 'base64'
                      }
                    }
                  }
                },
                Exists: {
                  type: 'boolean'
                }
              }
            }
          },
          ReturnValues: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Attributes: {
            type: 'map',
            members: {
              type: 'structure',
              members: {
                S: {
                },
                N: {
                },
                B: {
                  type: 'base64'
                },
                SS: {
                  type: 'list'
                },
                NS: {
                  type: 'list'
                },
                BS: {
                  type: 'list',
                  members: {
                    type: 'base64'
                  }
                }
              }
            }
          },
          ConsumedCapacityUnits: {
            type: 'float'
          }
        }
      }
    },
    deleteTable: {
      name: 'DeleteTable',
      input: {
        type: 'structure',
        members: {
          TableName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          TableDescription: {
            type: 'structure',
            members: {
              TableName: {
              },
              KeySchema: {
                type: 'structure',
                members: {
                  HashKeyElement: {
                    type: 'structure',
                    members: {
                      AttributeName: {
                      },
                      AttributeType: {
                      }
                    }
                  },
                  RangeKeyElement: {
                    type: 'structure',
                    members: {
                      AttributeName: {
                      },
                      AttributeType: {
                      }
                    }
                  }
                }
              },
              TableStatus: {
              },
              CreationDateTime: {
                type: 'timestamp'
              },
              ProvisionedThroughput: {
                type: 'structure',
                members: {
                  LastIncreaseDateTime: {
                    type: 'timestamp'
                  },
                  LastDecreaseDateTime: {
                    type: 'timestamp'
                  },
                  ReadCapacityUnits: {
                    type: 'integer'
                  },
                  WriteCapacityUnits: {
                    type: 'integer'
                  }
                }
              },
              TableSizeBytes: {
                type: 'integer'
              },
              ItemCount: {
                type: 'integer'
              }
            }
          }
        }
      }
    },
    describeTable: {
      name: 'DescribeTable',
      input: {
        type: 'structure',
        members: {
          TableName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Table: {
            type: 'structure',
            members: {
              TableName: {
              },
              KeySchema: {
                type: 'structure',
                members: {
                  HashKeyElement: {
                    type: 'structure',
                    members: {
                      AttributeName: {
                      },
                      AttributeType: {
                      }
                    }
                  },
                  RangeKeyElement: {
                    type: 'structure',
                    members: {
                      AttributeName: {
                      },
                      AttributeType: {
                      }
                    }
                  }
                }
              },
              TableStatus: {
              },
              CreationDateTime: {
                type: 'timestamp'
              },
              ProvisionedThroughput: {
                type: 'structure',
                members: {
                  LastIncreaseDateTime: {
                    type: 'timestamp'
                  },
                  LastDecreaseDateTime: {
                    type: 'timestamp'
                  },
                  ReadCapacityUnits: {
                    type: 'integer'
                  },
                  WriteCapacityUnits: {
                    type: 'integer'
                  }
                }
              },
              TableSizeBytes: {
                type: 'integer'
              },
              ItemCount: {
                type: 'integer'
              }
            }
          }
        }
      }
    },
    getItem: {
      name: 'GetItem',
      input: {
        type: 'structure',
        members: {
          TableName: {
            required: true
          },
          Key: {
            type: 'structure',
            members: {
              HashKeyElement: {
                type: 'structure',
                members: {
                  S: {
                  },
                  N: {
                  },
                  B: {
                    type: 'base64'
                  },
                  SS: {
                    type: 'list'
                  },
                  NS: {
                    type: 'list'
                  },
                  BS: {
                    type: 'list',
                    members: {
                      type: 'base64'
                    }
                  }
                },
                required: true
              },
              RangeKeyElement: {
                type: 'structure',
                members: {
                  S: {
                  },
                  N: {
                  },
                  B: {
                    type: 'base64'
                  },
                  SS: {
                    type: 'list'
                  },
                  NS: {
                    type: 'list'
                  },
                  BS: {
                    type: 'list',
                    members: {
                      type: 'base64'
                    }
                  }
                }
              }
            },
            required: true
          },
          AttributesToGet: {
            type: 'list'
          },
          ConsistentRead: {
            type: 'boolean'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Item: {
            type: 'map',
            members: {
              type: 'structure',
              members: {
                S: {
                },
                N: {
                },
                B: {
                  type: 'base64'
                },
                SS: {
                  type: 'list'
                },
                NS: {
                  type: 'list'
                },
                BS: {
                  type: 'list',
                  members: {
                    type: 'base64'
                  }
                }
              }
            }
          },
          ConsumedCapacityUnits: {
            type: 'float'
          }
        }
      }
    },
    listTables: {
      name: 'ListTables',
      input: {
        type: 'structure',
        members: {
          ExclusiveStartTableName: {
          },
          Limit: {
            type: 'integer'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          TableNames: {
            type: 'list'
          },
          LastEvaluatedTableName: {
          }
        }
      }
    },
    putItem: {
      name: 'PutItem',
      input: {
        type: 'structure',
        members: {
          TableName: {
            required: true
          },
          Item: {
            type: 'map',
            members: {
              type: 'structure',
              members: {
                S: {
                },
                N: {
                },
                B: {
                  type: 'base64'
                },
                SS: {
                  type: 'list'
                },
                NS: {
                  type: 'list'
                },
                BS: {
                  type: 'list',
                  members: {
                    type: 'base64'
                  }
                }
              }
            },
            required: true
          },
          Expected: {
            type: 'map',
            members: {
              type: 'structure',
              members: {
                Value: {
                  type: 'structure',
                  members: {
                    S: {
                    },
                    N: {
                    },
                    B: {
                      type: 'base64'
                    },
                    SS: {
                      type: 'list'
                    },
                    NS: {
                      type: 'list'
                    },
                    BS: {
                      type: 'list',
                      members: {
                        type: 'base64'
                      }
                    }
                  }
                },
                Exists: {
                  type: 'boolean'
                }
              }
            }
          },
          ReturnValues: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Attributes: {
            type: 'map',
            members: {
              type: 'structure',
              members: {
                S: {
                },
                N: {
                },
                B: {
                  type: 'base64'
                },
                SS: {
                  type: 'list'
                },
                NS: {
                  type: 'list'
                },
                BS: {
                  type: 'list',
                  members: {
                    type: 'base64'
                  }
                }
              }
            }
          },
          ConsumedCapacityUnits: {
            type: 'float'
          }
        }
      }
    },
    query: {
      name: 'Query',
      input: {
        type: 'structure',
        members: {
          TableName: {
            required: true
          },
          AttributesToGet: {
            type: 'list'
          },
          Limit: {
            type: 'integer'
          },
          ConsistentRead: {
            type: 'boolean'
          },
          Count: {
            type: 'boolean'
          },
          HashKeyValue: {
            type: 'structure',
            members: {
              S: {
              },
              N: {
              },
              B: {
                type: 'base64'
              },
              SS: {
                type: 'list'
              },
              NS: {
                type: 'list'
              },
              BS: {
                type: 'list',
                members: {
                  type: 'base64'
                }
              }
            },
            required: true
          },
          RangeKeyCondition: {
            type: 'structure',
            members: {
              AttributeValueList: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    S: {
                    },
                    N: {
                    },
                    B: {
                      type: 'base64'
                    },
                    SS: {
                      type: 'list'
                    },
                    NS: {
                      type: 'list'
                    },
                    BS: {
                      type: 'list',
                      members: {
                        type: 'base64'
                      }
                    }
                  }
                }
              },
              ComparisonOperator: {
                required: true
              }
            }
          },
          ScanIndexForward: {
            type: 'boolean'
          },
          ExclusiveStartKey: {
            type: 'structure',
            members: {
              HashKeyElement: {
                type: 'structure',
                members: {
                  S: {
                  },
                  N: {
                  },
                  B: {
                    type: 'base64'
                  },
                  SS: {
                    type: 'list'
                  },
                  NS: {
                    type: 'list'
                  },
                  BS: {
                    type: 'list',
                    members: {
                      type: 'base64'
                    }
                  }
                },
                required: true
              },
              RangeKeyElement: {
                type: 'structure',
                members: {
                  S: {
                  },
                  N: {
                  },
                  B: {
                    type: 'base64'
                  },
                  SS: {
                    type: 'list'
                  },
                  NS: {
                    type: 'list'
                  },
                  BS: {
                    type: 'list',
                    members: {
                      type: 'base64'
                    }
                  }
                }
              }
            }
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Items: {
            type: 'list',
            members: {
              type: 'map',
              members: {
                type: 'structure',
                members: {
                  S: {
                  },
                  N: {
                  },
                  B: {
                    type: 'base64'
                  },
                  SS: {
                    type: 'list'
                  },
                  NS: {
                    type: 'list'
                  },
                  BS: {
                    type: 'list',
                    members: {
                      type: 'base64'
                    }
                  }
                }
              }
            }
          },
          Count: {
            type: 'integer'
          },
          LastEvaluatedKey: {
            type: 'structure',
            members: {
              HashKeyElement: {
                type: 'structure',
                members: {
                  S: {
                  },
                  N: {
                  },
                  B: {
                    type: 'base64'
                  },
                  SS: {
                    type: 'list'
                  },
                  NS: {
                    type: 'list'
                  },
                  BS: {
                    type: 'list',
                    members: {
                      type: 'base64'
                    }
                  }
                }
              },
              RangeKeyElement: {
                type: 'structure',
                members: {
                  S: {
                  },
                  N: {
                  },
                  B: {
                    type: 'base64'
                  },
                  SS: {
                    type: 'list'
                  },
                  NS: {
                    type: 'list'
                  },
                  BS: {
                    type: 'list',
                    members: {
                      type: 'base64'
                    }
                  }
                }
              }
            }
          },
          ConsumedCapacityUnits: {
            type: 'float'
          }
        }
      }
    },
    scan: {
      name: 'Scan',
      input: {
        type: 'structure',
        members: {
          TableName: {
            required: true
          },
          AttributesToGet: {
            type: 'list'
          },
          Limit: {
            type: 'integer'
          },
          Count: {
            type: 'boolean'
          },
          ScanFilter: {
            type: 'map',
            members: {
              type: 'structure',
              members: {
                AttributeValueList: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      S: {
                      },
                      N: {
                      },
                      B: {
                        type: 'base64'
                      },
                      SS: {
                        type: 'list'
                      },
                      NS: {
                        type: 'list'
                      },
                      BS: {
                        type: 'list',
                        members: {
                          type: 'base64'
                        }
                      }
                    }
                  }
                },
                ComparisonOperator: {
                  required: true
                }
              }
            }
          },
          ExclusiveStartKey: {
            type: 'structure',
            members: {
              HashKeyElement: {
                type: 'structure',
                members: {
                  S: {
                  },
                  N: {
                  },
                  B: {
                    type: 'base64'
                  },
                  SS: {
                    type: 'list'
                  },
                  NS: {
                    type: 'list'
                  },
                  BS: {
                    type: 'list',
                    members: {
                      type: 'base64'
                    }
                  }
                },
                required: true
              },
              RangeKeyElement: {
                type: 'structure',
                members: {
                  S: {
                  },
                  N: {
                  },
                  B: {
                    type: 'base64'
                  },
                  SS: {
                    type: 'list'
                  },
                  NS: {
                    type: 'list'
                  },
                  BS: {
                    type: 'list',
                    members: {
                      type: 'base64'
                    }
                  }
                }
              }
            }
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Items: {
            type: 'list',
            members: {
              type: 'map',
              members: {
                type: 'structure',
                members: {
                  S: {
                  },
                  N: {
                  },
                  B: {
                    type: 'base64'
                  },
                  SS: {
                    type: 'list'
                  },
                  NS: {
                    type: 'list'
                  },
                  BS: {
                    type: 'list',
                    members: {
                      type: 'base64'
                    }
                  }
                }
              }
            }
          },
          Count: {
            type: 'integer'
          },
          ScannedCount: {
            type: 'integer'
          },
          LastEvaluatedKey: {
            type: 'structure',
            members: {
              HashKeyElement: {
                type: 'structure',
                members: {
                  S: {
                  },
                  N: {
                  },
                  B: {
                    type: 'base64'
                  },
                  SS: {
                    type: 'list'
                  },
                  NS: {
                    type: 'list'
                  },
                  BS: {
                    type: 'list',
                    members: {
                      type: 'base64'
                    }
                  }
                }
              },
              RangeKeyElement: {
                type: 'structure',
                members: {
                  S: {
                  },
                  N: {
                  },
                  B: {
                    type: 'base64'
                  },
                  SS: {
                    type: 'list'
                  },
                  NS: {
                    type: 'list'
                  },
                  BS: {
                    type: 'list',
                    members: {
                      type: 'base64'
                    }
                  }
                }
              }
            }
          },
          ConsumedCapacityUnits: {
            type: 'float'
          }
        }
      }
    },
    updateItem: {
      name: 'UpdateItem',
      input: {
        type: 'structure',
        members: {
          TableName: {
            required: true
          },
          Key: {
            type: 'structure',
            members: {
              HashKeyElement: {
                type: 'structure',
                members: {
                  S: {
                  },
                  N: {
                  },
                  B: {
                    type: 'base64'
                  },
                  SS: {
                    type: 'list'
                  },
                  NS: {
                    type: 'list'
                  },
                  BS: {
                    type: 'list',
                    members: {
                      type: 'base64'
                    }
                  }
                },
                required: true
              },
              RangeKeyElement: {
                type: 'structure',
                members: {
                  S: {
                  },
                  N: {
                  },
                  B: {
                    type: 'base64'
                  },
                  SS: {
                    type: 'list'
                  },
                  NS: {
                    type: 'list'
                  },
                  BS: {
                    type: 'list',
                    members: {
                      type: 'base64'
                    }
                  }
                }
              }
            },
            required: true
          },
          AttributeUpdates: {
            type: 'map',
            members: {
              type: 'structure',
              members: {
                Value: {
                  type: 'structure',
                  members: {
                    S: {
                    },
                    N: {
                    },
                    B: {
                      type: 'base64'
                    },
                    SS: {
                      type: 'list'
                    },
                    NS: {
                      type: 'list'
                    },
                    BS: {
                      type: 'list',
                      members: {
                        type: 'base64'
                      }
                    }
                  }
                },
                Action: {
                }
              }
            },
            required: true
          },
          Expected: {
            type: 'map',
            members: {
              type: 'structure',
              members: {
                Value: {
                  type: 'structure',
                  members: {
                    S: {
                    },
                    N: {
                    },
                    B: {
                      type: 'base64'
                    },
                    SS: {
                      type: 'list'
                    },
                    NS: {
                      type: 'list'
                    },
                    BS: {
                      type: 'list',
                      members: {
                        type: 'base64'
                      }
                    }
                  }
                },
                Exists: {
                  type: 'boolean'
                }
              }
            }
          },
          ReturnValues: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Attributes: {
            type: 'map',
            members: {
              type: 'structure',
              members: {
                S: {
                },
                N: {
                },
                B: {
                  type: 'base64'
                },
                SS: {
                  type: 'list'
                },
                NS: {
                  type: 'list'
                },
                BS: {
                  type: 'list',
                  members: {
                    type: 'base64'
                  }
                }
              }
            }
          },
          ConsumedCapacityUnits: {
            type: 'float'
          }
        }
      }
    },
    updateTable: {
      name: 'UpdateTable',
      input: {
        type: 'structure',
        members: {
          TableName: {
            required: true
          },
          ProvisionedThroughput: {
            type: 'structure',
            members: {
              ReadCapacityUnits: {
                type: 'integer',
                required: true
              },
              WriteCapacityUnits: {
                type: 'integer',
                required: true
              }
            },
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          TableDescription: {
            type: 'structure',
            members: {
              TableName: {
              },
              KeySchema: {
                type: 'structure',
                members: {
                  HashKeyElement: {
                    type: 'structure',
                    members: {
                      AttributeName: {
                      },
                      AttributeType: {
                      }
                    }
                  },
                  RangeKeyElement: {
                    type: 'structure',
                    members: {
                      AttributeName: {
                      },
                      AttributeType: {
                      }
                    }
                  }
                }
              },
              TableStatus: {
              },
              CreationDateTime: {
                type: 'timestamp'
              },
              ProvisionedThroughput: {
                type: 'structure',
                members: {
                  LastIncreaseDateTime: {
                    type: 'timestamp'
                  },
                  LastDecreaseDateTime: {
                    type: 'timestamp'
                  },
                  ReadCapacityUnits: {
                    type: 'integer'
                  },
                  WriteCapacityUnits: {
                    type: 'integer'
                  }
                }
              },
              TableSizeBytes: {
                type: 'integer'
              },
              ItemCount: {
                type: 'integer'
              }
            }
          }
        }
      }
    }
  }
};

},{}],50:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

module.exports = {
  format: 'query',
  apiVersion: '2012-12-01',
  endpointPrefix: 'ec2',
  serviceAbbreviation: 'Amazon EC2',
  serviceFullName: 'Amazon Elastic Compute Cloud',
  signatureVersion: 'v2',
  timestampFormat: 'iso8601',
  operations: {
    activateLicense: {
      name: 'ActivateLicense',
      input: {
        type: 'structure',
        members: {
          LicenseId: {
            required: true
          },
          Capacity: {
            type: 'integer',
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    allocateAddress: {
      name: 'AllocateAddress',
      input: {
        type: 'structure',
        members: {
          Domain: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          publicIp: {
            name: 'PublicIp'
          },
          domain: {
            name: 'Domain'
          },
          allocationId: {
            name: 'AllocationId'
          }
        }
      }
    },
    assignPrivateIpAddresses: {
      name: 'AssignPrivateIpAddresses',
      input: {
        type: 'structure',
        members: {
          NetworkInterfaceId: {
            required: true
          },
          PrivateIpAddresses: {
            type: 'list',
            members: {
              name: 'PrivateIpAddress'
            },
            flattened: true
          },
          SecondaryPrivateIpAddressCount: {
            type: 'integer'
          },
          AllowReassignment: {
            type: 'boolean'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    associateAddress: {
      name: 'AssociateAddress',
      input: {
        type: 'structure',
        members: {
          InstanceId: {
          },
          PublicIp: {
          },
          AllocationId: {
          },
          NetworkInterfaceId: {
          },
          PrivateIpAddress: {
          },
          AllowReassociation: {
            type: 'boolean'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          associationId: {
            name: 'AssociationId'
          }
        }
      }
    },
    associateDhcpOptions: {
      name: 'AssociateDhcpOptions',
      input: {
        type: 'structure',
        members: {
          DhcpOptionsId: {
            required: true
          },
          VpcId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    associateRouteTable: {
      name: 'AssociateRouteTable',
      input: {
        type: 'structure',
        members: {
          SubnetId: {
            required: true
          },
          RouteTableId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          associationId: {
            name: 'AssociationId'
          }
        }
      }
    },
    attachInternetGateway: {
      name: 'AttachInternetGateway',
      input: {
        type: 'structure',
        members: {
          InternetGatewayId: {
            required: true
          },
          VpcId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    attachNetworkInterface: {
      name: 'AttachNetworkInterface',
      input: {
        type: 'structure',
        members: {
          NetworkInterfaceId: {
            required: true
          },
          InstanceId: {
            required: true
          },
          DeviceIndex: {
            type: 'integer',
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          attachmentId: {
            name: 'AttachmentId'
          }
        }
      }
    },
    attachVolume: {
      name: 'AttachVolume',
      input: {
        type: 'structure',
        members: {
          VolumeId: {
            required: true
          },
          InstanceId: {
            required: true
          },
          Device: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          volumeId: {
            name: 'VolumeId'
          },
          instanceId: {
            name: 'InstanceId'
          },
          device: {
            name: 'Device'
          },
          status: {
            name: 'State'
          },
          attachTime: {
            type: 'timestamp',
            name: 'AttachTime'
          },
          deleteOnTermination: {
            type: 'boolean',
            name: 'DeleteOnTermination'
          }
        },
        name: 'attachment'
      }
    },
    attachVpnGateway: {
      name: 'AttachVpnGateway',
      input: {
        type: 'structure',
        members: {
          VpnGatewayId: {
            required: true
          },
          VpcId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          attachment: {
            type: 'structure',
            members: {
              vpcId: {
                name: 'VpcId'
              },
              state: {
                name: 'State'
              }
            },
            name: 'VpcAttachement'
          }
        }
      }
    },
    authorizeSecurityGroupEgress: {
      name: 'AuthorizeSecurityGroupEgress',
      input: {
        type: 'structure',
        members: {
          GroupId: {
            required: true
          },
          SourceSecurityGroupName: {
          },
          SourceSecurityGroupOwnerId: {
          },
          IpProtocol: {
          },
          FromPort: {
            type: 'integer'
          },
          ToPort: {
            type: 'integer'
          },
          CidrIp: {
          },
          IpPermissions: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                IpProtocol: {
                },
                FromPort: {
                  type: 'integer'
                },
                ToPort: {
                  type: 'integer'
                },
                UserIdGroupPairs: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      UserId: {
                      },
                      GroupName: {
                      },
                      GroupId: {
                      }
                    },
                    name: 'Groups'
                  },
                  flattened: true
                },
                IpRanges: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      CidrIp: {
                      }
                    }
                  },
                  flattened: true
                }
              }
            },
            flattened: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    authorizeSecurityGroupIngress: {
      name: 'AuthorizeSecurityGroupIngress',
      input: {
        type: 'structure',
        members: {
          GroupName: {
          },
          GroupId: {
          },
          SourceSecurityGroupName: {
          },
          SourceSecurityGroupOwnerId: {
          },
          IpProtocol: {
          },
          FromPort: {
            type: 'integer'
          },
          ToPort: {
            type: 'integer'
          },
          CidrIp: {
          },
          IpPermissions: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                IpProtocol: {
                },
                FromPort: {
                  type: 'integer'
                },
                ToPort: {
                  type: 'integer'
                },
                UserIdGroupPairs: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      UserId: {
                      },
                      GroupName: {
                      },
                      GroupId: {
                      }
                    },
                    name: 'Groups'
                  },
                  flattened: true
                },
                IpRanges: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      CidrIp: {
                      }
                    }
                  },
                  flattened: true
                }
              }
            },
            flattened: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    bundleInstance: {
      name: 'BundleInstance',
      input: {
        type: 'structure',
        members: {
          InstanceId: {
            required: true
          },
          Storage: {
            type: 'structure',
            members: {
              S3: {
                type: 'structure',
                members: {
                  Bucket: {
                  },
                  Prefix: {
                  },
                  AWSAccessKeyId: {
                  },
                  UploadPolicy: {
                  },
                  UploadPolicySignature: {
                  }
                }
              }
            },
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          bundleInstanceTask: {
            type: 'structure',
            members: {
              instanceId: {
                name: 'InstanceId'
              },
              bundleId: {
                name: 'BundleId'
              },
              state: {
                name: 'State'
              },
              startTime: {
                type: 'timestamp',
                name: 'StartTime'
              },
              updateTime: {
                type: 'timestamp',
                name: 'UpdateTime'
              },
              storage: {
                type: 'structure',
                members: {
                  S3: {
                    type: 'structure',
                    members: {
                      bucket: {
                        name: 'Bucket'
                      },
                      prefix: {
                        name: 'Prefix'
                      },
                      AWSAccessKeyId: {
                      },
                      uploadPolicy: {
                        name: 'UploadPolicy'
                      },
                      uploadPolicySignature: {
                        name: 'UploadPolicySignature'
                      }
                    }
                  }
                },
                name: 'Storage'
              },
              progress: {
                name: 'Progress'
              },
              error: {
                type: 'structure',
                members: {
                  code: {
                    name: 'Code'
                  },
                  message: {
                    name: 'Message'
                  }
                },
                name: 'BundleTaskError'
              }
            },
            name: 'BundleTask'
          }
        }
      }
    },
    cancelBundleTask: {
      name: 'CancelBundleTask',
      input: {
        type: 'structure',
        members: {
          BundleId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          bundleInstanceTask: {
            type: 'structure',
            members: {
              instanceId: {
                name: 'InstanceId'
              },
              bundleId: {
                name: 'BundleId'
              },
              state: {
                name: 'State'
              },
              startTime: {
                type: 'timestamp',
                name: 'StartTime'
              },
              updateTime: {
                type: 'timestamp',
                name: 'UpdateTime'
              },
              storage: {
                type: 'structure',
                members: {
                  S3: {
                    type: 'structure',
                    members: {
                      bucket: {
                        name: 'Bucket'
                      },
                      prefix: {
                        name: 'Prefix'
                      },
                      AWSAccessKeyId: {
                      },
                      uploadPolicy: {
                        name: 'UploadPolicy'
                      },
                      uploadPolicySignature: {
                        name: 'UploadPolicySignature'
                      }
                    }
                  }
                },
                name: 'Storage'
              },
              progress: {
                name: 'Progress'
              },
              error: {
                type: 'structure',
                members: {
                  code: {
                    name: 'Code'
                  },
                  message: {
                    name: 'Message'
                  }
                },
                name: 'BundleTaskError'
              }
            },
            name: 'BundleTask'
          }
        }
      }
    },
    cancelConversionTask: {
      name: 'CancelConversionTask',
      input: {
        type: 'structure',
        members: {
          ConversionTaskId: {
            required: true
          },
          ReasonMessage: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    cancelExportTask: {
      name: 'CancelExportTask',
      input: {
        type: 'structure',
        members: {
          ExportTaskId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    cancelReservedInstancesListing: {
      name: 'CancelReservedInstancesListing',
      input: {
        type: 'structure',
        members: {
          ReservedInstancesListingId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          reservedInstancesListingsSet: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                reservedInstancesListingId: {
                  name: 'ReservedInstancesListingId'
                },
                reservedInstancesId: {
                  name: 'ReservedInstancesId'
                },
                createDate: {
                  type: 'timestamp',
                  name: 'CreateDate'
                },
                updateDate: {
                  type: 'timestamp',
                  name: 'UpdateDate'
                },
                status: {
                  name: 'Status'
                },
                statusMessage: {
                  name: 'StatusMessage'
                },
                instanceCounts: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      state: {
                        name: 'State'
                      },
                      instanceCount: {
                        type: 'integer',
                        name: 'InstanceCount'
                      }
                    },
                    name: 'item'
                  },
                  name: 'InstanceCounts'
                },
                priceSchedules: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      term: {
                        type: 'integer',
                        name: 'Term'
                      },
                      price: {
                        type: 'float',
                        name: 'Price'
                      },
                      currencyCode: {
                        name: 'CurrencyCode'
                      },
                      active: {
                        type: 'boolean',
                        name: 'Active'
                      }
                    },
                    name: 'item'
                  },
                  name: 'PriceSchedules'
                },
                tagSet: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      key: {
                        name: 'Key'
                      },
                      value: {
                        name: 'Value'
                      }
                    },
                    name: 'item'
                  },
                  name: 'Tags'
                },
                clientToken: {
                  name: 'ClientToken'
                }
              },
              name: 'item'
            },
            name: 'ReservedInstancesListings'
          }
        }
      }
    },
    cancelSpotInstanceRequests: {
      name: 'CancelSpotInstanceRequests',
      input: {
        type: 'structure',
        members: {
          SpotInstanceRequestIds: {
            type: 'list',
            members: {
              name: 'SpotInstanceRequestId'
            },
            required: true,
            flattened: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          spotInstanceRequestSet: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                spotInstanceRequestId: {
                  name: 'SpotInstanceRequestId'
                },
                state: {
                  name: 'State'
                }
              },
              name: 'item'
            },
            name: 'CancelledSpotInstanceRequests'
          }
        }
      }
    },
    confirmProductInstance: {
      name: 'ConfirmProductInstance',
      input: {
        type: 'structure',
        members: {
          ProductCode: {
            required: true
          },
          InstanceId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          ownerId: {
            name: 'OwnerId'
          }
        }
      }
    },
    copySnapshot: {
      name: 'CopySnapshot',
      input: {
        type: 'structure',
        members: {
          SourceRegion: {
            required: true
          },
          SourceSnapshotId: {
            required: true
          },
          Description: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          snapshotId: {
            name: 'SnapshotId'
          }
        }
      }
    },
    createCustomerGateway: {
      name: 'CreateCustomerGateway',
      input: {
        type: 'structure',
        members: {
          Type: {
            required: true
          },
          PublicIp: {
            required: true,
            name: 'IpAddress'
          },
          BgpAsn: {
            type: 'integer',
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          customerGateway: {
            type: 'structure',
            members: {
              customerGatewayId: {
                name: 'CustomerGatewayId'
              },
              state: {
                name: 'State'
              },
              type: {
                name: 'Type'
              },
              ipAddress: {
                name: 'IpAddress'
              },
              bgpAsn: {
                name: 'BgpAsn'
              },
              tagSet: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    key: {
                      name: 'Key'
                    },
                    value: {
                      name: 'Value'
                    }
                  },
                  name: 'item'
                },
                name: 'Tags'
              }
            },
            name: 'CustomerGateway'
          }
        }
      }
    },
    createDhcpOptions: {
      name: 'CreateDhcpOptions',
      input: {
        type: 'structure',
        members: {
          DhcpConfigurations: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Key: {
                },
                Values: {
                  type: 'list',
                  members: {
                    name: 'Value'
                  },
                  flattened: true
                }
              },
              name: 'DhcpConfiguration'
            },
            required: true,
            flattened: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          dhcpOptions: {
            type: 'structure',
            members: {
              dhcpOptionsId: {
                name: 'DhcpOptionsId'
              },
              dhcpConfigurationSet: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    key: {
                      name: 'Key'
                    },
                    valueSet: {
                      type: 'list',
                      members: {
                        name: 'item'
                      },
                      name: 'Values'
                    }
                  },
                  name: 'item'
                },
                name: 'DhcpConfigurations'
              },
              tagSet: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    key: {
                      name: 'Key'
                    },
                    value: {
                      name: 'Value'
                    }
                  },
                  name: 'item'
                },
                name: 'Tags'
              }
            },
            name: 'DhcpOptions'
          }
        }
      }
    },
    createImage: {
      name: 'CreateImage',
      input: {
        type: 'structure',
        members: {
          InstanceId: {
            required: true
          },
          Name: {
            required: true
          },
          Description: {
          },
          NoReboot: {
            type: 'boolean'
          },
          BlockDeviceMappings: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                VirtualName: {
                },
                DeviceName: {
                },
                Ebs: {
                  type: 'structure',
                  members: {
                    SnapshotId: {
                    },
                    VolumeSize: {
                      type: 'integer'
                    },
                    DeleteOnTermination: {
                      type: 'boolean'
                    },
                    VolumeType: {
                    },
                    Iops: {
                      type: 'integer'
                    }
                  }
                },
                NoDevice: {
                }
              },
              name: 'BlockDeviceMapping'
            },
            flattened: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          imageId: {
            name: 'ImageId'
          }
        }
      }
    },
    createInstanceExportTask: {
      name: 'CreateInstanceExportTask',
      input: {
        type: 'structure',
        members: {
          Description: {
          },
          InstanceId: {
            required: true
          },
          TargetEnvironment: {
          },
          ExportToS3Task: {
            type: 'structure',
            members: {
              DiskImageFormat: {
              },
              ContainerFormat: {
              },
              S3Bucket: {
              },
              S3Prefix: {
              }
            },
            name: 'ExportToS3'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          exportTask: {
            type: 'structure',
            members: {
              exportTaskId: {
                name: 'ExportTaskId'
              },
              description: {
                name: 'Description'
              },
              state: {
                name: 'State'
              },
              statusMessage: {
                name: 'StatusMessage'
              },
              instanceExport: {
                type: 'structure',
                members: {
                  instanceId: {
                    name: 'InstanceId'
                  },
                  targetEnvironment: {
                    name: 'TargetEnvironment'
                  }
                },
                name: 'InstanceExportDetails'
              },
              exportToS3: {
                type: 'structure',
                members: {
                  diskImageFormat: {
                    name: 'DiskImageFormat'
                  },
                  containerFormat: {
                    name: 'ContainerFormat'
                  },
                  s3Bucket: {
                    name: 'S3Bucket'
                  },
                  s3Key: {
                    name: 'S3Key'
                  }
                },
                name: 'ExportToS3Task'
              }
            },
            name: 'ExportTask'
          }
        }
      }
    },
    createInternetGateway: {
      name: 'CreateInternetGateway',
      input: {
        type: 'structure'
      },
      output: {
        type: 'structure',
        members: {
          internetGateway: {
            type: 'structure',
            members: {
              internetGatewayId: {
                name: 'InternetGatewayId'
              },
              attachmentSet: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    vpcId: {
                      name: 'VpcId'
                    },
                    state: {
                      name: 'State'
                    }
                  },
                  name: 'item'
                },
                name: 'Attachments'
              },
              tagSet: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    key: {
                      name: 'Key'
                    },
                    value: {
                      name: 'Value'
                    }
                  },
                  name: 'item'
                },
                name: 'Tags'
              }
            },
            name: 'InternetGateway'
          }
        }
      }
    },
    createKeyPair: {
      name: 'CreateKeyPair',
      input: {
        type: 'structure',
        members: {
          KeyName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          keyPair: {
            type: 'structure',
            members: {
              keyName: {
                name: 'KeyName'
              },
              keyFingerprint: {
                name: 'KeyFingerprint'
              },
              keyMaterial: {
                name: 'KeyMaterial'
              }
            },
            name: 'KeyPair'
          }
        }
      }
    },
    createNetworkAcl: {
      name: 'CreateNetworkAcl',
      input: {
        type: 'structure',
        members: {
          VpcId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          networkAcl: {
            type: 'structure',
            members: {
              networkAclId: {
                name: 'NetworkAclId'
              },
              vpcId: {
                name: 'VpcId'
              },
              'default': {
                type: 'boolean',
                name: 'IsDefault'
              },
              entrySet: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    ruleNumber: {
                      type: 'integer',
                      name: 'RuleNumber'
                    },
                    protocol: {
                      name: 'Protocol'
                    },
                    ruleAction: {
                      name: 'RuleAction'
                    },
                    egress: {
                      type: 'boolean',
                      name: 'Egress'
                    },
                    cidrBlock: {
                      name: 'CidrBlock'
                    },
                    icmpTypeCode: {
                      type: 'structure',
                      members: {
                        type: {
                          type: 'integer',
                          name: 'Type'
                        },
                        code: {
                          type: 'integer',
                          name: 'Code'
                        }
                      },
                      name: 'IcmpTypeCode'
                    },
                    portRange: {
                      type: 'structure',
                      members: {
                        from: {
                          type: 'integer',
                          name: 'From'
                        },
                        to: {
                          type: 'integer',
                          name: 'To'
                        }
                      },
                      name: 'PortRange'
                    }
                  },
                  name: 'item'
                },
                name: 'Entries'
              },
              associationSet: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    networkAclAssociationId: {
                      name: 'NetworkAclAssociationId'
                    },
                    networkAclId: {
                      name: 'NetworkAclId'
                    },
                    subnetId: {
                      name: 'SubnetId'
                    }
                  },
                  name: 'item'
                },
                name: 'Associations'
              },
              tagSet: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    key: {
                      name: 'Key'
                    },
                    value: {
                      name: 'Value'
                    }
                  },
                  name: 'item'
                },
                name: 'Tags'
              }
            },
            name: 'NetworkAcl'
          }
        }
      }
    },
    createNetworkAclEntry: {
      name: 'CreateNetworkAclEntry',
      input: {
        type: 'structure',
        members: {
          NetworkAclId: {
            required: true
          },
          RuleNumber: {
            type: 'integer',
            required: true
          },
          Protocol: {
            required: true
          },
          RuleAction: {
            required: true
          },
          Egress: {
            type: 'boolean',
            required: true
          },
          CidrBlock: {
            required: true
          },
          IcmpTypeCode: {
            type: 'structure',
            members: {
              Type: {
                type: 'integer'
              },
              Code: {
                type: 'integer'
              }
            },
            name: 'Icmp'
          },
          PortRange: {
            type: 'structure',
            members: {
              From: {
                type: 'integer'
              },
              To: {
                type: 'integer'
              }
            }
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    createNetworkInterface: {
      name: 'CreateNetworkInterface',
      input: {
        type: 'structure',
        members: {
          SubnetId: {
            required: true
          },
          Description: {
          },
          PrivateIpAddress: {
          },
          Groups: {
            type: 'list',
            members: {
              name: 'SecurityGroupId'
            },
            flattened: true
          },
          PrivateIpAddresses: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                PrivateIpAddress: {
                  required: true
                },
                Primary: {
                  type: 'boolean'
                }
              }
            },
            flattened: true
          },
          SecondaryPrivateIpAddressCount: {
            type: 'integer'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          networkInterface: {
            type: 'structure',
            members: {
              networkInterfaceId: {
                name: 'NetworkInterfaceId'
              },
              subnetId: {
                name: 'SubnetId'
              },
              vpcId: {
                name: 'VpcId'
              },
              availabilityZone: {
                name: 'AvailabilityZone'
              },
              description: {
                name: 'Description'
              },
              ownerId: {
                name: 'OwnerId'
              },
              requesterId: {
                name: 'RequesterId'
              },
              requesterManaged: {
                type: 'boolean',
                name: 'RequesterManaged'
              },
              status: {
                name: 'Status'
              },
              macAddress: {
                name: 'MacAddress'
              },
              privateIpAddress: {
                name: 'PrivateIpAddress'
              },
              privateDnsName: {
                name: 'PrivateDnsName'
              },
              sourceDestCheck: {
                type: 'boolean',
                name: 'SourceDestCheck'
              },
              groupSet: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    groupName: {
                      name: 'GroupName'
                    },
                    groupId: {
                      name: 'GroupId'
                    }
                  },
                  name: 'item'
                },
                name: 'Groups'
              },
              attachment: {
                type: 'structure',
                members: {
                  attachmentId: {
                    name: 'AttachmentId'
                  },
                  instanceId: {
                    name: 'InstanceId'
                  },
                  instanceOwnerId: {
                    name: 'InstanceOwnerId'
                  },
                  deviceIndex: {
                    type: 'integer',
                    name: 'DeviceIndex'
                  },
                  status: {
                    name: 'Status'
                  },
                  attachTime: {
                    type: 'timestamp',
                    name: 'AttachTime'
                  },
                  deleteOnTermination: {
                    type: 'boolean',
                    name: 'DeleteOnTermination'
                  }
                },
                name: 'Attachment'
              },
              association: {
                type: 'structure',
                members: {
                  publicIp: {
                    name: 'PublicIp'
                  },
                  ipOwnerId: {
                    name: 'IpOwnerId'
                  },
                  allocationId: {
                    name: 'AllocationId'
                  },
                  associationId: {
                    name: 'AssociationId'
                  }
                },
                name: 'Association'
              },
              tagSet: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    key: {
                      name: 'Key'
                    },
                    value: {
                      name: 'Value'
                    }
                  },
                  name: 'item'
                },
                name: 'TagSet'
              },
              privateIpAddressesSet: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    privateIpAddress: {
                      name: 'PrivateIpAddress'
                    },
                    primary: {
                      type: 'boolean',
                      name: 'Primary'
                    },
                    association: {
                      type: 'structure',
                      members: {
                        publicIp: {
                          name: 'PublicIp'
                        },
                        ipOwnerId: {
                          name: 'IpOwnerId'
                        },
                        allocationId: {
                          name: 'AllocationId'
                        },
                        associationId: {
                          name: 'AssociationId'
                        }
                      },
                      name: 'Association'
                    }
                  },
                  name: 'item'
                },
                name: 'PrivateIpAddresses'
              }
            },
            name: 'NetworkInterface'
          }
        }
      }
    },
    createPlacementGroup: {
      name: 'CreatePlacementGroup',
      input: {
        type: 'structure',
        members: {
          GroupName: {
            required: true
          },
          Strategy: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    createReservedInstancesListing: {
      name: 'CreateReservedInstancesListing',
      input: {
        type: 'structure',
        members: {
          ReservedInstancesId: {
            required: true
          },
          InstanceCount: {
            type: 'integer',
            required: true
          },
          PriceSchedules: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Term: {
                  type: 'integer'
                },
                Price: {
                  type: 'float'
                },
                CurrencyCode: {
                }
              }
            },
            required: true,
            flattened: true
          },
          ClientToken: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          reservedInstancesListingsSet: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                reservedInstancesListingId: {
                  name: 'ReservedInstancesListingId'
                },
                reservedInstancesId: {
                  name: 'ReservedInstancesId'
                },
                createDate: {
                  type: 'timestamp',
                  name: 'CreateDate'
                },
                updateDate: {
                  type: 'timestamp',
                  name: 'UpdateDate'
                },
                status: {
                  name: 'Status'
                },
                statusMessage: {
                  name: 'StatusMessage'
                },
                instanceCounts: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      state: {
                        name: 'State'
                      },
                      instanceCount: {
                        type: 'integer',
                        name: 'InstanceCount'
                      }
                    },
                    name: 'item'
                  },
                  name: 'InstanceCounts'
                },
                priceSchedules: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      term: {
                        type: 'integer',
                        name: 'Term'
                      },
                      price: {
                        type: 'float',
                        name: 'Price'
                      },
                      currencyCode: {
                        name: 'CurrencyCode'
                      },
                      active: {
                        type: 'boolean',
                        name: 'Active'
                      }
                    },
                    name: 'item'
                  },
                  name: 'PriceSchedules'
                },
                tagSet: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      key: {
                        name: 'Key'
                      },
                      value: {
                        name: 'Value'
                      }
                    },
                    name: 'item'
                  },
                  name: 'Tags'
                },
                clientToken: {
                  name: 'ClientToken'
                }
              },
              name: 'item'
            },
            name: 'ReservedInstancesListings'
          }
        }
      }
    },
    createRoute: {
      name: 'CreateRoute',
      input: {
        type: 'structure',
        members: {
          RouteTableId: {
            required: true
          },
          DestinationCidrBlock: {
            required: true
          },
          GatewayId: {
          },
          InstanceId: {
          },
          NetworkInterfaceId: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    createRouteTable: {
      name: 'CreateRouteTable',
      input: {
        type: 'structure',
        members: {
          VpcId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          routeTable: {
            type: 'structure',
            members: {
              routeTableId: {
                name: 'RouteTableId'
              },
              vpcId: {
                name: 'VpcId'
              },
              routeSet: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    destinationCidrBlock: {
                      name: 'DestinationCidrBlock'
                    },
                    gatewayId: {
                      name: 'GatewayId'
                    },
                    instanceId: {
                      name: 'InstanceId'
                    },
                    instanceOwnerId: {
                      name: 'InstanceOwnerId'
                    },
                    networkInterfaceId: {
                      name: 'NetworkInterfaceId'
                    },
                    state: {
                      name: 'State'
                    }
                  },
                  name: 'item'
                },
                name: 'Routes'
              },
              associationSet: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    routeTableAssociationId: {
                      name: 'RouteTableAssociationId'
                    },
                    routeTableId: {
                      name: 'RouteTableId'
                    },
                    subnetId: {
                      name: 'SubnetId'
                    },
                    main: {
                      type: 'boolean',
                      name: 'Main'
                    }
                  },
                  name: 'item'
                },
                name: 'Associations'
              },
              tagSet: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    key: {
                      name: 'Key'
                    },
                    value: {
                      name: 'Value'
                    }
                  },
                  name: 'item'
                },
                name: 'Tags'
              },
              propagatingVgwSet: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    gatewayId: {
                      name: 'GatewayId'
                    }
                  },
                  name: 'item'
                },
                name: 'PropagatingVgws'
              },
              propagatedRouteSet: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    destinationCidrBlock: {
                      name: 'DestinationCidrBlock'
                    },
                    gatewayId: {
                      name: 'GatewayId'
                    },
                    status: {
                      name: 'Status'
                    },
                    sourceId: {
                      name: 'SourceId'
                    }
                  },
                  name: 'item'
                },
                name: 'PropagatedRoutes'
              }
            },
            name: 'RouteTable'
          }
        }
      }
    },
    createSecurityGroup: {
      name: 'CreateSecurityGroup',
      input: {
        type: 'structure',
        members: {
          GroupName: {
            required: true
          },
          Description: {
            required: true,
            name: 'GroupDescription'
          },
          VpcId: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          groupId: {
            name: 'GroupId'
          }
        }
      }
    },
    createSnapshot: {
      name: 'CreateSnapshot',
      input: {
        type: 'structure',
        members: {
          VolumeId: {
            required: true
          },
          Description: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          snapshotId: {
            name: 'SnapshotId'
          },
          volumeId: {
            name: 'VolumeId'
          },
          status: {
            name: 'State'
          },
          startTime: {
            type: 'timestamp',
            name: 'StartTime'
          },
          progress: {
            name: 'Progress'
          },
          ownerId: {
            name: 'OwnerId'
          },
          description: {
            name: 'Description'
          },
          volumeSize: {
            type: 'integer',
            name: 'VolumeSize'
          },
          ownerAlias: {
            name: 'OwnerAlias'
          },
          tagSet: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                key: {
                  name: 'Key'
                },
                value: {
                  name: 'Value'
                }
              },
              name: 'item'
            },
            name: 'Tags'
          }
        },
        name: 'snapshot'
      }
    },
    createSpotDatafeedSubscription: {
      name: 'CreateSpotDatafeedSubscription',
      input: {
        type: 'structure',
        members: {
          Bucket: {
            required: true
          },
          Prefix: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          spotDatafeedSubscription: {
            type: 'structure',
            members: {
              ownerId: {
                name: 'OwnerId'
              },
              bucket: {
                name: 'Bucket'
              },
              prefix: {
                name: 'Prefix'
              },
              state: {
                name: 'State'
              },
              fault: {
                type: 'structure',
                members: {
                  code: {
                    name: 'Code'
                  },
                  message: {
                    name: 'Message'
                  }
                },
                name: 'Fault'
              }
            },
            name: 'SpotDatafeedSubscription'
          }
        }
      }
    },
    createSubnet: {
      name: 'CreateSubnet',
      input: {
        type: 'structure',
        members: {
          VpcId: {
            required: true
          },
          CidrBlock: {
            required: true
          },
          AvailabilityZone: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          subnet: {
            type: 'structure',
            members: {
              subnetId: {
                name: 'SubnetId'
              },
              state: {
                name: 'State'
              },
              vpcId: {
                name: 'VpcId'
              },
              cidrBlock: {
                name: 'CidrBlock'
              },
              availableIpAddressCount: {
                type: 'integer',
                name: 'AvailableIpAddressCount'
              },
              availabilityZone: {
                name: 'AvailabilityZone'
              },
              tagSet: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    key: {
                      name: 'Key'
                    },
                    value: {
                      name: 'Value'
                    }
                  },
                  name: 'item'
                },
                name: 'Tags'
              }
            },
            name: 'Subnet'
          }
        }
      }
    },
    createTags: {
      name: 'CreateTags',
      input: {
        type: 'structure',
        members: {
          Resources: {
            type: 'list',
            members: {
              name: 'ResourceId'
            },
            required: true,
            flattened: true
          },
          Tags: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Key: {
                },
                Value: {
                }
              },
              name: 'Tag'
            },
            required: true,
            flattened: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    createVolume: {
      name: 'CreateVolume',
      input: {
        type: 'structure',
        members: {
          Size: {
            type: 'integer'
          },
          SnapshotId: {
          },
          AvailabilityZone: {
            required: true
          },
          VolumeType: {
          },
          Iops: {
            type: 'integer'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          volumeId: {
            name: 'VolumeId'
          },
          size: {
            type: 'integer',
            name: 'Size'
          },
          snapshotId: {
            name: 'SnapshotId'
          },
          availabilityZone: {
            name: 'AvailabilityZone'
          },
          status: {
            name: 'State'
          },
          createTime: {
            type: 'timestamp',
            name: 'CreateTime'
          },
          attachmentSet: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                volumeId: {
                  name: 'VolumeId'
                },
                instanceId: {
                  name: 'InstanceId'
                },
                device: {
                  name: 'Device'
                },
                status: {
                  name: 'State'
                },
                attachTime: {
                  type: 'timestamp',
                  name: 'AttachTime'
                },
                deleteOnTermination: {
                  type: 'boolean',
                  name: 'DeleteOnTermination'
                }
              },
              name: 'item'
            },
            name: 'Attachments'
          },
          tagSet: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                key: {
                  name: 'Key'
                },
                value: {
                  name: 'Value'
                }
              },
              name: 'item'
            },
            name: 'Tags'
          },
          volumeType: {
            name: 'VolumeType'
          },
          iops: {
            type: 'integer',
            name: 'Iops'
          }
        },
        name: 'volume'
      }
    },
    createVpc: {
      name: 'CreateVpc',
      input: {
        type: 'structure',
        members: {
          CidrBlock: {
            required: true
          },
          InstanceTenancy: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          vpc: {
            type: 'structure',
            members: {
              vpcId: {
                name: 'VpcId'
              },
              state: {
                name: 'State'
              },
              cidrBlock: {
                name: 'CidrBlock'
              },
              dhcpOptionsId: {
                name: 'DhcpOptionsId'
              },
              tagSet: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    key: {
                      name: 'Key'
                    },
                    value: {
                      name: 'Value'
                    }
                  },
                  name: 'item'
                },
                name: 'Tags'
              },
              instanceTenancy: {
                name: 'InstanceTenancy'
              }
            },
            name: 'Vpc'
          }
        }
      }
    },
    createVpnConnection: {
      name: 'CreateVpnConnection',
      input: {
        type: 'structure',
        members: {
          Type: {
            required: true
          },
          CustomerGatewayId: {
            required: true
          },
          VpnGatewayId: {
            required: true
          },
          Options: {
            type: 'structure',
            members: {
              StaticRoutesOnly: {
                type: 'boolean'
              }
            }
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          vpnConnection: {
            type: 'structure',
            members: {
              vpnConnectionId: {
                name: 'VpnConnectionId'
              },
              state: {
                name: 'State'
              },
              customerGatewayConfiguration: {
                name: 'CustomerGatewayConfiguration'
              },
              type: {
                name: 'Type'
              },
              customerGatewayId: {
                name: 'CustomerGatewayId'
              },
              vpnGatewayId: {
                name: 'VpnGatewayId'
              },
              tagSet: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    key: {
                      name: 'Key'
                    },
                    value: {
                      name: 'Value'
                    }
                  },
                  name: 'item'
                },
                name: 'Tags'
              },
              vgwTelemetry: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    outsideIpAddress: {
                      name: 'OutsideIpAddress'
                    },
                    status: {
                      name: 'Status'
                    },
                    lastStatusChange: {
                      type: 'timestamp',
                      name: 'LastStatusChange'
                    },
                    statusMessage: {
                      name: 'StatusMessage'
                    },
                    acceptedRouteCount: {
                      type: 'integer',
                      name: 'AcceptedRouteCount'
                    }
                  },
                  name: 'item'
                },
                name: 'VgwTelemetry'
              },
              options: {
                type: 'structure',
                members: {
                  staticRoutesOnly: {
                    type: 'boolean',
                    name: 'StaticRoutesOnly'
                  }
                },
                name: 'Options'
              },
              routes: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    destinationCidrBlock: {
                      name: 'DestinationCidrBlock'
                    },
                    source: {
                      name: 'Source'
                    },
                    state: {
                      name: 'State'
                    }
                  },
                  name: 'item'
                },
                name: 'Routes'
              }
            },
            name: 'VpnConnection'
          }
        }
      }
    },
    createVpnConnectionRoute: {
      name: 'CreateVpnConnectionRoute',
      input: {
        type: 'structure',
        members: {
          VpnConnectionId: {
            required: true
          },
          DestinationCidrBlock: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    createVpnGateway: {
      name: 'CreateVpnGateway',
      input: {
        type: 'structure',
        members: {
          Type: {
            required: true
          },
          AvailabilityZone: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          vpnGateway: {
            type: 'structure',
            members: {
              vpnGatewayId: {
                name: 'VpnGatewayId'
              },
              state: {
                name: 'State'
              },
              type: {
                name: 'Type'
              },
              availabilityZone: {
                name: 'AvailabilityZone'
              },
              attachments: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    vpcId: {
                      name: 'VpcId'
                    },
                    state: {
                      name: 'State'
                    }
                  },
                  name: 'item'
                },
                name: 'VpcAttachments'
              },
              tagSet: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    key: {
                      name: 'Key'
                    },
                    value: {
                      name: 'Value'
                    }
                  },
                  name: 'item'
                },
                name: 'Tags'
              }
            },
            name: 'VpnGateway'
          }
        }
      }
    },
    deactivateLicense: {
      name: 'DeactivateLicense',
      input: {
        type: 'structure',
        members: {
          LicenseId: {
            required: true
          },
          Capacity: {
            type: 'integer',
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteCustomerGateway: {
      name: 'DeleteCustomerGateway',
      input: {
        type: 'structure',
        members: {
          CustomerGatewayId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteDhcpOptions: {
      name: 'DeleteDhcpOptions',
      input: {
        type: 'structure',
        members: {
          DhcpOptionsId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteInternetGateway: {
      name: 'DeleteInternetGateway',
      input: {
        type: 'structure',
        members: {
          InternetGatewayId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteKeyPair: {
      name: 'DeleteKeyPair',
      input: {
        type: 'structure',
        members: {
          KeyName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteNetworkAcl: {
      name: 'DeleteNetworkAcl',
      input: {
        type: 'structure',
        members: {
          NetworkAclId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteNetworkAclEntry: {
      name: 'DeleteNetworkAclEntry',
      input: {
        type: 'structure',
        members: {
          NetworkAclId: {
            required: true
          },
          RuleNumber: {
            type: 'integer',
            required: true
          },
          Egress: {
            type: 'boolean',
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteNetworkInterface: {
      name: 'DeleteNetworkInterface',
      input: {
        type: 'structure',
        members: {
          NetworkInterfaceId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deletePlacementGroup: {
      name: 'DeletePlacementGroup',
      input: {
        type: 'structure',
        members: {
          GroupName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteRoute: {
      name: 'DeleteRoute',
      input: {
        type: 'structure',
        members: {
          RouteTableId: {
            required: true
          },
          DestinationCidrBlock: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteRouteTable: {
      name: 'DeleteRouteTable',
      input: {
        type: 'structure',
        members: {
          RouteTableId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteSecurityGroup: {
      name: 'DeleteSecurityGroup',
      input: {
        type: 'structure',
        members: {
          GroupName: {
          },
          GroupId: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteSnapshot: {
      name: 'DeleteSnapshot',
      input: {
        type: 'structure',
        members: {
          SnapshotId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteSpotDatafeedSubscription: {
      name: 'DeleteSpotDatafeedSubscription',
      input: {
        type: 'structure'
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteSubnet: {
      name: 'DeleteSubnet',
      input: {
        type: 'structure',
        members: {
          SubnetId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteTags: {
      name: 'DeleteTags',
      input: {
        type: 'structure',
        members: {
          Resources: {
            type: 'list',
            members: {
              name: 'ResourceId'
            },
            required: true,
            flattened: true
          },
          Tags: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Key: {
                },
                Value: {
                }
              },
              name: 'Tag'
            },
            flattened: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteVolume: {
      name: 'DeleteVolume',
      input: {
        type: 'structure',
        members: {
          VolumeId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteVpc: {
      name: 'DeleteVpc',
      input: {
        type: 'structure',
        members: {
          VpcId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteVpnConnection: {
      name: 'DeleteVpnConnection',
      input: {
        type: 'structure',
        members: {
          VpnConnectionId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteVpnConnectionRoute: {
      name: 'DeleteVpnConnectionRoute',
      input: {
        type: 'structure',
        members: {
          VpnConnectionId: {
            required: true
          },
          DestinationCidrBlock: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteVpnGateway: {
      name: 'DeleteVpnGateway',
      input: {
        type: 'structure',
        members: {
          VpnGatewayId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deregisterImage: {
      name: 'DeregisterImage',
      input: {
        type: 'structure',
        members: {
          ImageId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    describeAddresses: {
      name: 'DescribeAddresses',
      input: {
        type: 'structure',
        members: {
          PublicIps: {
            type: 'list',
            members: {
              name: 'PublicIp'
            },
            flattened: true
          },
          Filters: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                },
                Values: {
                  type: 'list',
                  members: {
                    name: 'Value'
                  },
                  flattened: true
                }
              },
              name: 'Filter'
            },
            flattened: true
          },
          AllocationIds: {
            type: 'list',
            members: {
              name: 'AllocationId'
            },
            flattened: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          addressesSet: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                instanceId: {
                  name: 'InstanceId'
                },
                publicIp: {
                  name: 'PublicIp'
                },
                allocationId: {
                  name: 'AllocationId'
                },
                associationId: {
                  name: 'AssociationId'
                },
                domain: {
                  name: 'Domain'
                },
                networkInterfaceId: {
                  name: 'NetworkInterfaceId'
                },
                networkInterfaceOwnerId: {
                  name: 'NetworkInterfaceOwnerId'
                },
                privateIpAddress: {
                  name: 'PrivateIpAddress'
                }
              },
              name: 'item'
            },
            name: 'Addresses'
          }
        }
      }
    },
    describeAvailabilityZones: {
      name: 'DescribeAvailabilityZones',
      input: {
        type: 'structure',
        members: {
          ZoneNames: {
            type: 'list',
            members: {
              name: 'ZoneName'
            },
            flattened: true
          },
          Filters: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                },
                Values: {
                  type: 'list',
                  members: {
                    name: 'Value'
                  },
                  flattened: true
                }
              },
              name: 'Filter'
            },
            flattened: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          availabilityZoneInfo: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                zoneName: {
                  name: 'ZoneName'
                },
                zoneState: {
                  name: 'State'
                },
                regionName: {
                  name: 'RegionName'
                },
                messageSet: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      message: {
                        name: 'Message'
                      }
                    },
                    name: 'item'
                  },
                  name: 'Messages'
                }
              },
              name: 'item'
            },
            name: 'AvailabilityZones'
          }
        }
      }
    },
    describeBundleTasks: {
      name: 'DescribeBundleTasks',
      input: {
        type: 'structure',
        members: {
          BundleIds: {
            type: 'list',
            members: {
              name: 'BundleId'
            },
            flattened: true
          },
          Filters: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                },
                Values: {
                  type: 'list',
                  members: {
                    name: 'Value'
                  },
                  flattened: true
                }
              },
              name: 'Filter'
            },
            flattened: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          bundleInstanceTasksSet: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                instanceId: {
                  name: 'InstanceId'
                },
                bundleId: {
                  name: 'BundleId'
                },
                state: {
                  name: 'State'
                },
                startTime: {
                  type: 'timestamp',
                  name: 'StartTime'
                },
                updateTime: {
                  type: 'timestamp',
                  name: 'UpdateTime'
                },
                storage: {
                  type: 'structure',
                  members: {
                    S3: {
                      type: 'structure',
                      members: {
                        bucket: {
                          name: 'Bucket'
                        },
                        prefix: {
                          name: 'Prefix'
                        },
                        AWSAccessKeyId: {
                        },
                        uploadPolicy: {
                          name: 'UploadPolicy'
                        },
                        uploadPolicySignature: {
                          name: 'UploadPolicySignature'
                        }
                      }
                    }
                  },
                  name: 'Storage'
                },
                progress: {
                  name: 'Progress'
                },
                error: {
                  type: 'structure',
                  members: {
                    code: {
                      name: 'Code'
                    },
                    message: {
                      name: 'Message'
                    }
                  },
                  name: 'BundleTaskError'
                }
              },
              name: 'item'
            },
            name: 'BundleTasks'
          }
        }
      }
    },
    describeConversionTasks: {
      name: 'DescribeConversionTasks',
      input: {
        type: 'structure',
        members: {
          Filters: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                },
                Values: {
                  type: 'list',
                  members: {
                    name: 'Value'
                  },
                  flattened: true
                }
              },
              name: 'Filter'
            },
            flattened: true
          },
          ConversionTaskIds: {
            type: 'list',
            members: {
              name: 'ConversionTaskId'
            },
            flattened: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          conversionTasks: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                conversionTaskId: {
                  name: 'ConversionTaskId'
                },
                expirationTime: {
                  name: 'ExpirationTime'
                },
                importInstance: {
                  type: 'structure',
                  members: {
                    volumes: {
                      type: 'list',
                      members: {
                        type: 'structure',
                        members: {
                          bytesConverted: {
                            type: 'integer',
                            name: 'BytesConverted'
                          },
                          availabilityZone: {
                            name: 'AvailabilityZone'
                          },
                          image: {
                            type: 'structure',
                            members: {
                              format: {
                                name: 'Format'
                              },
                              size: {
                                type: 'integer',
                                name: 'Size'
                              },
                              importManifestUrl: {
                                name: 'ImportManifestUrl'
                              },
                              checksum: {
                                name: 'Checksum'
                              }
                            },
                            name: 'Image'
                          },
                          volume: {
                            type: 'structure',
                            members: {
                              size: {
                                type: 'integer',
                                name: 'Size'
                              },
                              id: {
                                name: 'Id'
                              }
                            },
                            name: 'Volume'
                          },
                          status: {
                            name: 'Status'
                          },
                          statusMessage: {
                            name: 'StatusMessage'
                          },
                          description: {
                            name: 'Description'
                          }
                        },
                        name: 'item'
                      },
                      name: 'Volumes'
                    },
                    instanceId: {
                      name: 'InstanceId'
                    },
                    platform: {
                      name: 'Platform'
                    },
                    description: {
                      name: 'Description'
                    }
                  },
                  name: 'ImportInstance'
                },
                importVolume: {
                  type: 'structure',
                  members: {
                    bytesConverted: {
                      type: 'integer',
                      name: 'BytesConverted'
                    },
                    availabilityZone: {
                      name: 'AvailabilityZone'
                    },
                    description: {
                      name: 'Description'
                    },
                    image: {
                      type: 'structure',
                      members: {
                        format: {
                          name: 'Format'
                        },
                        size: {
                          type: 'integer',
                          name: 'Size'
                        },
                        importManifestUrl: {
                          name: 'ImportManifestUrl'
                        },
                        checksum: {
                          name: 'Checksum'
                        }
                      },
                      name: 'Image'
                    },
                    volume: {
                      type: 'structure',
                      members: {
                        size: {
                          type: 'integer',
                          name: 'Size'
                        },
                        id: {
                          name: 'Id'
                        }
                      },
                      name: 'Volume'
                    }
                  },
                  name: 'ImportVolume'
                },
                state: {
                  name: 'State'
                },
                statusMessage: {
                  name: 'StatusMessage'
                },
                tagSet: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      key: {
                        name: 'Key'
                      },
                      value: {
                        name: 'Value'
                      }
                    },
                    name: 'item'
                  },
                  name: 'Tags'
                }
              },
              name: 'item'
            },
            name: 'ConversionTasks'
          }
        }
      }
    },
    describeCustomerGateways: {
      name: 'DescribeCustomerGateways',
      input: {
        type: 'structure',
        members: {
          CustomerGatewayIds: {
            type: 'list',
            members: {
              name: 'CustomerGatewayId'
            },
            flattened: true
          },
          Filters: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                },
                Values: {
                  type: 'list',
                  members: {
                    name: 'Value'
                  },
                  flattened: true
                }
              },
              name: 'Filter'
            },
            flattened: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          customerGatewaySet: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                customerGatewayId: {
                  name: 'CustomerGatewayId'
                },
                state: {
                  name: 'State'
                },
                type: {
                  name: 'Type'
                },
                ipAddress: {
                  name: 'IpAddress'
                },
                bgpAsn: {
                  name: 'BgpAsn'
                },
                tagSet: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      key: {
                        name: 'Key'
                      },
                      value: {
                        name: 'Value'
                      }
                    },
                    name: 'item'
                  },
                  name: 'Tags'
                }
              },
              name: 'item'
            },
            name: 'CustomerGateways'
          }
        }
      }
    },
    describeDhcpOptions: {
      name: 'DescribeDhcpOptions',
      input: {
        type: 'structure',
        members: {
          DhcpOptionsIds: {
            type: 'list',
            members: {
              name: 'DhcpOptionsId'
            },
            flattened: true
          },
          Filters: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                },
                Values: {
                  type: 'list',
                  members: {
                    name: 'Value'
                  },
                  flattened: true
                }
              },
              name: 'Filter'
            },
            flattened: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          dhcpOptionsSet: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                dhcpOptionsId: {
                  name: 'DhcpOptionsId'
                },
                dhcpConfigurationSet: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      key: {
                        name: 'Key'
                      },
                      valueSet: {
                        type: 'list',
                        members: {
                          name: 'item'
                        },
                        name: 'Values'
                      }
                    },
                    name: 'item'
                  },
                  name: 'DhcpConfigurations'
                },
                tagSet: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      key: {
                        name: 'Key'
                      },
                      value: {
                        name: 'Value'
                      }
                    },
                    name: 'item'
                  },
                  name: 'Tags'
                }
              },
              name: 'item'
            },
            name: 'DhcpOptions'
          }
        }
      }
    },
    describeExportTasks: {
      name: 'DescribeExportTasks',
      input: {
        type: 'structure',
        members: {
          ExportTaskIds: {
            type: 'list',
            members: {
              name: 'ExportTaskId'
            },
            flattened: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          exportTaskSet: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                exportTaskId: {
                  name: 'ExportTaskId'
                },
                description: {
                  name: 'Description'
                },
                state: {
                  name: 'State'
                },
                statusMessage: {
                  name: 'StatusMessage'
                },
                instanceExport: {
                  type: 'structure',
                  members: {
                    instanceId: {
                      name: 'InstanceId'
                    },
                    targetEnvironment: {
                      name: 'TargetEnvironment'
                    }
                  },
                  name: 'InstanceExportDetails'
                },
                exportToS3: {
                  type: 'structure',
                  members: {
                    diskImageFormat: {
                      name: 'DiskImageFormat'
                    },
                    containerFormat: {
                      name: 'ContainerFormat'
                    },
                    s3Bucket: {
                      name: 'S3Bucket'
                    },
                    s3Key: {
                      name: 'S3Key'
                    }
                  },
                  name: 'ExportToS3Task'
                }
              },
              name: 'item'
            },
            name: 'ExportTasks'
          }
        }
      }
    },
    describeImageAttribute: {
      name: 'DescribeImageAttribute',
      input: {
        type: 'structure',
        members: {
          ImageId: {
            required: true
          },
          Attribute: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          imageId: {
            name: 'ImageId'
          },
          launchPermission: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                userId: {
                  name: 'UserId'
                },
                group: {
                  name: 'Group'
                }
              },
              name: 'item'
            },
            name: 'LaunchPermissions'
          },
          productCodes: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                productCode: {
                  name: 'ProductCodeId'
                },
                type: {
                  name: 'ProductCodeType'
                }
              },
              name: 'item'
            },
            name: 'ProductCodes'
          },
          kernel: {
            type: 'structure',
            members: {
              value: {
                name: 'Value'
              }
            },
            name: 'KernelId'
          },
          ramdisk: {
            type: 'structure',
            members: {
              value: {
                name: 'Value'
              }
            },
            name: 'RamdiskId'
          },
          description: {
            type: 'structure',
            members: {
              value: {
                name: 'Value'
              }
            },
            name: 'Description'
          },
          blockDeviceMapping: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                virtualName: {
                  name: 'VirtualName'
                },
                deviceName: {
                  name: 'DeviceName'
                },
                ebs: {
                  type: 'structure',
                  members: {
                    snapshotId: {
                      name: 'SnapshotId'
                    },
                    volumeSize: {
                      type: 'integer',
                      name: 'VolumeSize'
                    },
                    deleteOnTermination: {
                      type: 'boolean',
                      name: 'DeleteOnTermination'
                    },
                    volumeType: {
                      name: 'VolumeType'
                    },
                    iops: {
                      type: 'integer',
                      name: 'Iops'
                    }
                  },
                  name: 'Ebs'
                },
                noDevice: {
                  name: 'NoDevice'
                }
              },
              name: 'item'
            },
            name: 'BlockDeviceMappings'
          }
        },
        name: 'imageAttribute'
      }
    },
    describeImages: {
      name: 'DescribeImages',
      input: {
        type: 'structure',
        members: {
          ImageIds: {
            type: 'list',
            members: {
              name: 'ImageId'
            },
            flattened: true
          },
          Owners: {
            type: 'list',
            members: {
              name: 'Owner'
            },
            flattened: true
          },
          ExecutableUsers: {
            type: 'list',
            members: {
              name: 'ExecutableBy'
            },
            flattened: true
          },
          Filters: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                },
                Values: {
                  type: 'list',
                  members: {
                    name: 'Value'
                  },
                  flattened: true
                }
              },
              name: 'Filter'
            },
            flattened: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          imagesSet: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                imageId: {
                  name: 'ImageId'
                },
                imageLocation: {
                  name: 'ImageLocation'
                },
                imageState: {
                  name: 'State'
                },
                imageOwnerId: {
                  name: 'OwnerId'
                },
                isPublic: {
                  type: 'boolean',
                  name: 'Public'
                },
                productCodes: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      productCode: {
                        name: 'ProductCodeId'
                      },
                      type: {
                        name: 'ProductCodeType'
                      }
                    },
                    name: 'item'
                  },
                  name: 'ProductCodes'
                },
                architecture: {
                  name: 'Architecture'
                },
                imageType: {
                  name: 'ImageType'
                },
                kernelId: {
                  name: 'KernelId'
                },
                ramdiskId: {
                  name: 'RamdiskId'
                },
                platform: {
                  name: 'Platform'
                },
                stateReason: {
                  type: 'structure',
                  members: {
                    code: {
                      name: 'Code'
                    },
                    message: {
                      name: 'Message'
                    }
                  },
                  name: 'StateReason'
                },
                imageOwnerAlias: {
                  name: 'ImageOwnerAlias'
                },
                name: {
                  name: 'Name'
                },
                description: {
                  name: 'Description'
                },
                rootDeviceType: {
                  name: 'RootDeviceType'
                },
                rootDeviceName: {
                  name: 'RootDeviceName'
                },
                blockDeviceMapping: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      virtualName: {
                        name: 'VirtualName'
                      },
                      deviceName: {
                        name: 'DeviceName'
                      },
                      ebs: {
                        type: 'structure',
                        members: {
                          snapshotId: {
                            name: 'SnapshotId'
                          },
                          volumeSize: {
                            type: 'integer',
                            name: 'VolumeSize'
                          },
                          deleteOnTermination: {
                            type: 'boolean',
                            name: 'DeleteOnTermination'
                          },
                          volumeType: {
                            name: 'VolumeType'
                          },
                          iops: {
                            type: 'integer',
                            name: 'Iops'
                          }
                        },
                        name: 'Ebs'
                      },
                      noDevice: {
                        name: 'NoDevice'
                      }
                    },
                    name: 'item'
                  },
                  name: 'BlockDeviceMappings'
                },
                virtualizationType: {
                  name: 'VirtualizationType'
                },
                tagSet: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      key: {
                        name: 'Key'
                      },
                      value: {
                        name: 'Value'
                      }
                    },
                    name: 'item'
                  },
                  name: 'Tags'
                },
                hypervisor: {
                  name: 'Hypervisor'
                }
              },
              name: 'item'
            },
            name: 'Images'
          }
        }
      }
    },
    describeInstanceAttribute: {
      name: 'DescribeInstanceAttribute',
      input: {
        type: 'structure',
        members: {
          InstanceId: {
            required: true
          },
          Attribute: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          instanceId: {
            name: 'InstanceId'
          },
          instanceType: {
            type: 'structure',
            members: {
              value: {
                name: 'Value'
              }
            },
            name: 'InstanceType'
          },
          kernel: {
            type: 'structure',
            members: {
              value: {
                name: 'Value'
              }
            },
            name: 'KernelId'
          },
          ramdisk: {
            type: 'structure',
            members: {
              value: {
                name: 'Value'
              }
            },
            name: 'RamdiskId'
          },
          userData: {
            type: 'structure',
            members: {
              value: {
                name: 'Value'
              }
            },
            name: 'UserData'
          },
          disableApiTermination: {
            type: 'structure',
            members: {
              value: {
                type: 'boolean',
                name: 'Value'
              }
            },
            name: 'DisableApiTermination'
          },
          instanceInitiatedShutdownBehavior: {
            type: 'structure',
            members: {
              value: {
                name: 'Value'
              }
            },
            name: 'InstanceInitiatedShutdownBehavior'
          },
          rootDeviceName: {
            type: 'structure',
            members: {
              value: {
                name: 'Value'
              }
            },
            name: 'RootDeviceName'
          },
          blockDeviceMapping: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                deviceName: {
                  name: 'DeviceName'
                },
                ebs: {
                  type: 'structure',
                  members: {
                    volumeId: {
                      name: 'VolumeId'
                    },
                    status: {
                      name: 'Status'
                    },
                    attachTime: {
                      type: 'timestamp',
                      name: 'AttachTime'
                    },
                    deleteOnTermination: {
                      type: 'boolean',
                      name: 'DeleteOnTermination'
                    }
                  },
                  name: 'Ebs'
                }
              },
              name: 'item'
            },
            name: 'BlockDeviceMappings'
          },
          productCodes: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                productCode: {
                  name: 'ProductCodeId'
                },
                type: {
                  name: 'ProductCodeType'
                }
              },
              name: 'item'
            },
            name: 'ProductCodes'
          },
          ebsOptimized: {
            type: 'structure',
            members: {
              value: {
                type: 'boolean',
                name: 'Value'
              }
            },
            name: 'EbsOptimized'
          }
        }
      }
    },
    describeInstanceStatus: {
      name: 'DescribeInstanceStatus',
      input: {
        type: 'structure',
        members: {
          InstanceIds: {
            type: 'list',
            members: {
              name: 'InstanceId'
            },
            flattened: true
          },
          Filters: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                },
                Values: {
                  type: 'list',
                  members: {
                    name: 'Value'
                  },
                  flattened: true
                }
              },
              name: 'Filter'
            },
            flattened: true
          },
          NextToken: {
          },
          MaxResults: {
            type: 'integer'
          },
          IncludeAllInstances: {
            type: 'boolean'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          instanceStatusSet: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                instanceId: {
                  name: 'InstanceId'
                },
                availabilityZone: {
                  name: 'AvailabilityZone'
                },
                eventsSet: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      code: {
                        name: 'Code'
                      },
                      description: {
                        name: 'Description'
                      },
                      notBefore: {
                        type: 'timestamp',
                        name: 'NotBefore'
                      },
                      notAfter: {
                        type: 'timestamp',
                        name: 'NotAfter'
                      }
                    },
                    name: 'item'
                  },
                  name: 'Events'
                },
                instanceState: {
                  type: 'structure',
                  members: {
                    code: {
                      type: 'integer',
                      name: 'Code'
                    },
                    name: {
                      name: 'Name'
                    }
                  },
                  name: 'InstanceState'
                },
                systemStatus: {
                  type: 'structure',
                  members: {
                    status: {
                      name: 'Status'
                    },
                    details: {
                      type: 'list',
                      members: {
                        type: 'structure',
                        members: {
                          name: {
                            name: 'Name'
                          },
                          status: {
                            name: 'Status'
                          },
                          impairedSince: {
                            type: 'timestamp',
                            name: 'ImpairedSince'
                          }
                        },
                        name: 'item'
                      },
                      name: 'Details'
                    }
                  },
                  name: 'SystemStatus'
                },
                instanceStatus: {
                  type: 'structure',
                  members: {
                    status: {
                      name: 'Status'
                    },
                    details: {
                      type: 'list',
                      members: {
                        type: 'structure',
                        members: {
                          name: {
                            name: 'Name'
                          },
                          status: {
                            name: 'Status'
                          },
                          impairedSince: {
                            type: 'timestamp',
                            name: 'ImpairedSince'
                          }
                        },
                        name: 'item'
                      },
                      name: 'Details'
                    }
                  },
                  name: 'InstanceStatus'
                }
              },
              name: 'item'
            },
            name: 'InstanceStatuses'
          },
          nextToken: {
            name: 'NextToken'
          }
        }
      }
    },
    describeInstances: {
      name: 'DescribeInstances',
      input: {
        type: 'structure',
        members: {
          InstanceIds: {
            type: 'list',
            members: {
              name: 'InstanceId'
            },
            flattened: true
          },
          Filters: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                },
                Values: {
                  type: 'list',
                  members: {
                    name: 'Value'
                  },
                  flattened: true
                }
              },
              name: 'Filter'
            },
            flattened: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          reservationSet: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                reservationId: {
                  name: 'ReservationId'
                },
                ownerId: {
                  name: 'OwnerId'
                },
                requesterId: {
                  name: 'RequesterId'
                },
                groupSet: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      groupName: {
                        name: 'GroupName'
                      },
                      groupId: {
                        name: 'GroupId'
                      }
                    },
                    name: 'item'
                  },
                  name: 'Groups'
                },
                instancesSet: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      instanceId: {
                        name: 'InstanceId'
                      },
                      imageId: {
                        name: 'ImageId'
                      },
                      instanceState: {
                        type: 'structure',
                        members: {
                          code: {
                            type: 'integer',
                            name: 'Code'
                          },
                          name: {
                            name: 'Name'
                          }
                        },
                        name: 'State'
                      },
                      privateDnsName: {
                        name: 'PrivateDnsName'
                      },
                      dnsName: {
                        name: 'PublicDnsName'
                      },
                      reason: {
                        name: 'StateTransitionReason'
                      },
                      keyName: {
                        name: 'KeyName'
                      },
                      amiLaunchIndex: {
                        type: 'integer',
                        name: 'AmiLaunchIndex'
                      },
                      productCodes: {
                        type: 'list',
                        members: {
                          type: 'structure',
                          members: {
                            productCode: {
                              name: 'ProductCodeId'
                            },
                            type: {
                              name: 'ProductCodeType'
                            }
                          },
                          name: 'item'
                        },
                        name: 'ProductCodes'
                      },
                      instanceType: {
                        name: 'InstanceType'
                      },
                      launchTime: {
                        type: 'timestamp',
                        name: 'LaunchTime'
                      },
                      placement: {
                        type: 'structure',
                        members: {
                          availabilityZone: {
                            name: 'AvailabilityZone'
                          },
                          groupName: {
                            name: 'GroupName'
                          },
                          tenancy: {
                            name: 'Tenancy'
                          }
                        },
                        name: 'Placement'
                      },
                      kernelId: {
                        name: 'KernelId'
                      },
                      ramdiskId: {
                        name: 'RamdiskId'
                      },
                      platform: {
                        name: 'Platform'
                      },
                      monitoring: {
                        type: 'structure',
                        members: {
                          state: {
                            name: 'State'
                          }
                        },
                        name: 'Monitoring'
                      },
                      subnetId: {
                        name: 'SubnetId'
                      },
                      vpcId: {
                        name: 'VpcId'
                      },
                      privateIpAddress: {
                        name: 'PrivateIpAddress'
                      },
                      ipAddress: {
                        name: 'PublicIpAddress'
                      },
                      stateReason: {
                        type: 'structure',
                        members: {
                          code: {
                            name: 'Code'
                          },
                          message: {
                            name: 'Message'
                          }
                        },
                        name: 'StateReason'
                      },
                      architecture: {
                        name: 'Architecture'
                      },
                      rootDeviceType: {
                        name: 'RootDeviceType'
                      },
                      rootDeviceName: {
                        name: 'RootDeviceName'
                      },
                      blockDeviceMapping: {
                        type: 'list',
                        members: {
                          type: 'structure',
                          members: {
                            deviceName: {
                              name: 'DeviceName'
                            },
                            ebs: {
                              type: 'structure',
                              members: {
                                volumeId: {
                                  name: 'VolumeId'
                                },
                                status: {
                                  name: 'Status'
                                },
                                attachTime: {
                                  type: 'timestamp',
                                  name: 'AttachTime'
                                },
                                deleteOnTermination: {
                                  type: 'boolean',
                                  name: 'DeleteOnTermination'
                                }
                              },
                              name: 'Ebs'
                            }
                          },
                          name: 'item'
                        },
                        name: 'BlockDeviceMappings'
                      },
                      virtualizationType: {
                        name: 'VirtualizationType'
                      },
                      instanceLifecycle: {
                        name: 'InstanceLifecycle'
                      },
                      spotInstanceRequestId: {
                        name: 'SpotInstanceRequestId'
                      },
                      license: {
                        type: 'structure',
                        members: {
                          pool: {
                            name: 'Pool'
                          }
                        },
                        name: 'License'
                      },
                      clientToken: {
                        name: 'ClientToken'
                      },
                      tagSet: {
                        type: 'list',
                        members: {
                          type: 'structure',
                          members: {
                            key: {
                              name: 'Key'
                            },
                            value: {
                              name: 'Value'
                            }
                          },
                          name: 'item'
                        },
                        name: 'Tags'
                      },
                      groupSet: {
                        type: 'list',
                        members: {
                          type: 'structure',
                          members: {
                            groupName: {
                              name: 'GroupName'
                            },
                            groupId: {
                              name: 'GroupId'
                            }
                          },
                          name: 'item'
                        },
                        name: 'SecurityGroups'
                      },
                      sourceDestCheck: {
                        type: 'boolean',
                        name: 'SourceDestCheck'
                      },
                      hypervisor: {
                        name: 'Hypervisor'
                      },
                      networkInterfaceSet: {
                        type: 'list',
                        members: {
                          type: 'structure',
                          members: {
                            networkInterfaceId: {
                              name: 'NetworkInterfaceId'
                            },
                            subnetId: {
                              name: 'SubnetId'
                            },
                            vpcId: {
                              name: 'VpcId'
                            },
                            description: {
                              name: 'Description'
                            },
                            ownerId: {
                              name: 'OwnerId'
                            },
                            status: {
                              name: 'Status'
                            },
                            privateIpAddress: {
                              name: 'PrivateIpAddress'
                            },
                            privateDnsName: {
                              name: 'PrivateDnsName'
                            },
                            sourceDestCheck: {
                              type: 'boolean',
                              name: 'SourceDestCheck'
                            },
                            groupSet: {
                              type: 'list',
                              members: {
                                type: 'structure',
                                members: {
                                  groupName: {
                                    name: 'GroupName'
                                  },
                                  groupId: {
                                    name: 'GroupId'
                                  }
                                },
                                name: 'item'
                              },
                              name: 'Groups'
                            },
                            attachment: {
                              type: 'structure',
                              members: {
                                attachmentId: {
                                  name: 'AttachmentId'
                                },
                                deviceIndex: {
                                  type: 'integer',
                                  name: 'DeviceIndex'
                                },
                                status: {
                                  name: 'Status'
                                },
                                attachTime: {
                                  type: 'timestamp',
                                  name: 'AttachTime'
                                },
                                deleteOnTermination: {
                                  type: 'boolean',
                                  name: 'DeleteOnTermination'
                                }
                              },
                              name: 'Attachment'
                            },
                            association: {
                              type: 'structure',
                              members: {
                                publicIp: {
                                  name: 'PublicIp'
                                },
                                ipOwnerId: {
                                  name: 'IpOwnerId'
                                }
                              },
                              name: 'Association'
                            }
                          },
                          name: 'item'
                        },
                        name: 'NetworkInterfaces'
                      },
                      iamInstanceProfile: {
                        type: 'structure',
                        members: {
                          arn: {
                            name: 'Arn'
                          },
                          id: {
                            name: 'Id'
                          }
                        },
                        name: 'IamInstanceProfile'
                      },
                      ebsOptimized: {
                        type: 'boolean',
                        name: 'EbsOptimized'
                      }
                    },
                    name: 'item'
                  },
                  name: 'Instances'
                }
              },
              name: 'item'
            },
            name: 'Reservations'
          }
        }
      }
    },
    describeInternetGateways: {
      name: 'DescribeInternetGateways',
      input: {
        type: 'structure',
        members: {
          InternetGatewayIds: {
            type: 'list',
            members: {
              name: 'InternetGatewayId'
            },
            flattened: true
          },
          Filters: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                },
                Values: {
                  type: 'list',
                  members: {
                    name: 'Value'
                  },
                  flattened: true
                }
              },
              name: 'Filter'
            },
            flattened: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          internetGatewaySet: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                internetGatewayId: {
                  name: 'InternetGatewayId'
                },
                attachmentSet: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      vpcId: {
                        name: 'VpcId'
                      },
                      state: {
                        name: 'State'
                      }
                    },
                    name: 'item'
                  },
                  name: 'Attachments'
                },
                tagSet: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      key: {
                        name: 'Key'
                      },
                      value: {
                        name: 'Value'
                      }
                    },
                    name: 'item'
                  },
                  name: 'Tags'
                }
              },
              name: 'item'
            },
            name: 'InternetGateways'
          }
        }
      }
    },
    describeKeyPairs: {
      name: 'DescribeKeyPairs',
      input: {
        type: 'structure',
        members: {
          KeyNames: {
            type: 'list',
            members: {
              name: 'KeyName'
            },
            flattened: true
          },
          Filters: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                },
                Values: {
                  type: 'list',
                  members: {
                    name: 'Value'
                  },
                  flattened: true
                }
              },
              name: 'Filter'
            },
            flattened: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          keySet: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                keyName: {
                  name: 'KeyName'
                },
                keyFingerprint: {
                  name: 'KeyFingerprint'
                }
              },
              name: 'item'
            },
            name: 'KeyPairs'
          }
        }
      }
    },
    describeLicenses: {
      name: 'DescribeLicenses',
      input: {
        type: 'structure',
        members: {
          LicenseIds: {
            type: 'list',
            members: {
              name: 'LicenseId'
            },
            flattened: true
          },
          Filters: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                },
                Values: {
                  type: 'list',
                  members: {
                    name: 'Value'
                  },
                  flattened: true
                }
              },
              name: 'Filter'
            },
            flattened: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          licenseSet: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                licenseId: {
                  name: 'LicenseId'
                },
                type: {
                  name: 'Type'
                },
                pool: {
                  name: 'Pool'
                },
                capacitySet: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      capacity: {
                        type: 'integer',
                        name: 'Capacity'
                      },
                      instanceCapacity: {
                        type: 'integer',
                        name: 'InstanceCapacity'
                      },
                      state: {
                        name: 'State'
                      },
                      earliestAllowedDeactivationTime: {
                        type: 'timestamp',
                        name: 'EarliestAllowedDeactivationTime'
                      }
                    },
                    name: 'item'
                  },
                  name: 'Capacities'
                },
                tagSet: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      key: {
                        name: 'Key'
                      },
                      value: {
                        name: 'Value'
                      }
                    },
                    name: 'item'
                  },
                  name: 'Tags'
                }
              },
              name: 'item'
            },
            name: 'Licenses'
          }
        }
      }
    },
    describeNetworkAcls: {
      name: 'DescribeNetworkAcls',
      input: {
        type: 'structure',
        members: {
          NetworkAclIds: {
            type: 'list',
            members: {
              name: 'NetworkAclId'
            },
            flattened: true
          },
          Filters: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                },
                Values: {
                  type: 'list',
                  members: {
                    name: 'Value'
                  },
                  flattened: true
                }
              },
              name: 'Filter'
            },
            flattened: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          networkAclSet: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                networkAclId: {
                  name: 'NetworkAclId'
                },
                vpcId: {
                  name: 'VpcId'
                },
                'default': {
                  type: 'boolean',
                  name: 'IsDefault'
                },
                entrySet: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      ruleNumber: {
                        type: 'integer',
                        name: 'RuleNumber'
                      },
                      protocol: {
                        name: 'Protocol'
                      },
                      ruleAction: {
                        name: 'RuleAction'
                      },
                      egress: {
                        type: 'boolean',
                        name: 'Egress'
                      },
                      cidrBlock: {
                        name: 'CidrBlock'
                      },
                      icmpTypeCode: {
                        type: 'structure',
                        members: {
                          type: {
                            type: 'integer',
                            name: 'Type'
                          },
                          code: {
                            type: 'integer',
                            name: 'Code'
                          }
                        },
                        name: 'IcmpTypeCode'
                      },
                      portRange: {
                        type: 'structure',
                        members: {
                          from: {
                            type: 'integer',
                            name: 'From'
                          },
                          to: {
                            type: 'integer',
                            name: 'To'
                          }
                        },
                        name: 'PortRange'
                      }
                    },
                    name: 'item'
                  },
                  name: 'Entries'
                },
                associationSet: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      networkAclAssociationId: {
                        name: 'NetworkAclAssociationId'
                      },
                      networkAclId: {
                        name: 'NetworkAclId'
                      },
                      subnetId: {
                        name: 'SubnetId'
                      }
                    },
                    name: 'item'
                  },
                  name: 'Associations'
                },
                tagSet: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      key: {
                        name: 'Key'
                      },
                      value: {
                        name: 'Value'
                      }
                    },
                    name: 'item'
                  },
                  name: 'Tags'
                }
              },
              name: 'item'
            },
            name: 'NetworkAcls'
          }
        }
      }
    },
    describeNetworkInterfaceAttribute: {
      name: 'DescribeNetworkInterfaceAttribute',
      input: {
        type: 'structure',
        members: {
          NetworkInterfaceId: {
            required: true
          },
          Description: {
          },
          SourceDestCheck: {
          },
          Groups: {
            name: 'GroupSet'
          },
          Attachment: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          networkInterfaceId: {
            name: 'NetworkInterfaceId'
          },
          description: {
            type: 'structure',
            members: {
              value: {
                name: 'Value'
              }
            },
            name: 'Description'
          },
          sourceDestCheck: {
            type: 'structure',
            members: {
              value: {
                type: 'boolean',
                name: 'Value'
              }
            },
            name: 'SourceDestCheck'
          },
          groupSet: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                groupName: {
                  name: 'GroupName'
                },
                groupId: {
                  name: 'GroupId'
                }
              },
              name: 'item'
            },
            name: 'Groups'
          },
          attachment: {
            type: 'structure',
            members: {
              attachmentId: {
                name: 'AttachmentId'
              },
              instanceId: {
                name: 'InstanceId'
              },
              instanceOwnerId: {
                name: 'InstanceOwnerId'
              },
              deviceIndex: {
                type: 'integer',
                name: 'DeviceIndex'
              },
              status: {
                name: 'Status'
              },
              attachTime: {
                type: 'timestamp',
                name: 'AttachTime'
              },
              deleteOnTermination: {
                type: 'boolean',
                name: 'DeleteOnTermination'
              }
            },
            name: 'Attachment'
          }
        }
      }
    },
    describeNetworkInterfaces: {
      name: 'DescribeNetworkInterfaces',
      input: {
        type: 'structure',
        members: {
          NetworkInterfaceIds: {
            type: 'list',
            members: {
              name: 'NetworkInterfaceId'
            },
            flattened: true
          },
          Filters: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                },
                Values: {
                  type: 'list',
                  members: {
                    name: 'Value'
                  },
                  flattened: true
                }
              },
              name: 'Filter'
            },
            flattened: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          networkInterfaceSet: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                networkInterfaceId: {
                  name: 'NetworkInterfaceId'
                },
                subnetId: {
                  name: 'SubnetId'
                },
                vpcId: {
                  name: 'VpcId'
                },
                availabilityZone: {
                  name: 'AvailabilityZone'
                },
                description: {
                  name: 'Description'
                },
                ownerId: {
                  name: 'OwnerId'
                },
                requesterId: {
                  name: 'RequesterId'
                },
                requesterManaged: {
                  type: 'boolean',
                  name: 'RequesterManaged'
                },
                status: {
                  name: 'Status'
                },
                macAddress: {
                  name: 'MacAddress'
                },
                privateIpAddress: {
                  name: 'PrivateIpAddress'
                },
                privateDnsName: {
                  name: 'PrivateDnsName'
                },
                sourceDestCheck: {
                  type: 'boolean',
                  name: 'SourceDestCheck'
                },
                groupSet: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      groupName: {
                        name: 'GroupName'
                      },
                      groupId: {
                        name: 'GroupId'
                      }
                    },
                    name: 'item'
                  },
                  name: 'Groups'
                },
                attachment: {
                  type: 'structure',
                  members: {
                    attachmentId: {
                      name: 'AttachmentId'
                    },
                    instanceId: {
                      name: 'InstanceId'
                    },
                    instanceOwnerId: {
                      name: 'InstanceOwnerId'
                    },
                    deviceIndex: {
                      type: 'integer',
                      name: 'DeviceIndex'
                    },
                    status: {
                      name: 'Status'
                    },
                    attachTime: {
                      type: 'timestamp',
                      name: 'AttachTime'
                    },
                    deleteOnTermination: {
                      type: 'boolean',
                      name: 'DeleteOnTermination'
                    }
                  },
                  name: 'Attachment'
                },
                association: {
                  type: 'structure',
                  members: {
                    publicIp: {
                      name: 'PublicIp'
                    },
                    ipOwnerId: {
                      name: 'IpOwnerId'
                    },
                    allocationId: {
                      name: 'AllocationId'
                    },
                    associationId: {
                      name: 'AssociationId'
                    }
                  },
                  name: 'Association'
                },
                tagSet: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      key: {
                        name: 'Key'
                      },
                      value: {
                        name: 'Value'
                      }
                    },
                    name: 'item'
                  },
                  name: 'TagSet'
                },
                privateIpAddressesSet: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      privateIpAddress: {
                        name: 'PrivateIpAddress'
                      },
                      primary: {
                        type: 'boolean',
                        name: 'Primary'
                      },
                      association: {
                        type: 'structure',
                        members: {
                          publicIp: {
                            name: 'PublicIp'
                          },
                          ipOwnerId: {
                            name: 'IpOwnerId'
                          },
                          allocationId: {
                            name: 'AllocationId'
                          },
                          associationId: {
                            name: 'AssociationId'
                          }
                        },
                        name: 'Association'
                      }
                    },
                    name: 'item'
                  },
                  name: 'PrivateIpAddresses'
                }
              },
              name: 'item'
            },
            name: 'NetworkInterfaces'
          }
        }
      }
    },
    describePlacementGroups: {
      name: 'DescribePlacementGroups',
      input: {
        type: 'structure',
        members: {
          GroupNames: {
            type: 'list',
            members: {
              name: 'GroupName'
            },
            flattened: true
          },
          Filters: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                },
                Values: {
                  type: 'list',
                  members: {
                    name: 'Value'
                  },
                  flattened: true
                }
              },
              name: 'Filter'
            },
            flattened: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          placementGroupSet: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                groupName: {
                  name: 'GroupName'
                },
                strategy: {
                  name: 'Strategy'
                },
                state: {
                  name: 'State'
                }
              },
              name: 'item'
            },
            name: 'PlacementGroups'
          }
        }
      }
    },
    describeRegions: {
      name: 'DescribeRegions',
      input: {
        type: 'structure',
        members: {
          RegionNames: {
            type: 'list',
            members: {
              name: 'RegionName'
            },
            flattened: true
          },
          Filters: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                },
                Values: {
                  type: 'list',
                  members: {
                    name: 'Value'
                  },
                  flattened: true
                }
              },
              name: 'Filter'
            },
            flattened: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          regionInfo: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                regionName: {
                  name: 'RegionName'
                },
                regionEndpoint: {
                  name: 'Endpoint'
                }
              },
              name: 'item'
            },
            name: 'Regions'
          }
        }
      }
    },
    describeReservedInstances: {
      name: 'DescribeReservedInstances',
      input: {
        type: 'structure',
        members: {
          ReservedInstancesIds: {
            type: 'list',
            members: {
              name: 'ReservedInstancesId'
            },
            flattened: true
          },
          Filters: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                },
                Values: {
                  type: 'list',
                  members: {
                    name: 'Value'
                  },
                  flattened: true
                }
              },
              name: 'Filter'
            },
            flattened: true
          },
          OfferingType: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          reservedInstancesSet: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                reservedInstancesId: {
                  name: 'ReservedInstancesId'
                },
                instanceType: {
                  name: 'InstanceType'
                },
                availabilityZone: {
                  name: 'AvailabilityZone'
                },
                start: {
                  type: 'timestamp',
                  name: 'Start'
                },
                duration: {
                  type: 'integer',
                  name: 'Duration'
                },
                usagePrice: {
                  type: 'float',
                  name: 'UsagePrice'
                },
                fixedPrice: {
                  type: 'float',
                  name: 'FixedPrice'
                },
                instanceCount: {
                  type: 'integer',
                  name: 'InstanceCount'
                },
                productDescription: {
                  name: 'ProductDescription'
                },
                state: {
                  name: 'State'
                },
                tagSet: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      key: {
                        name: 'Key'
                      },
                      value: {
                        name: 'Value'
                      }
                    },
                    name: 'item'
                  },
                  name: 'Tags'
                },
                instanceTenancy: {
                  name: 'InstanceTenancy'
                },
                currencyCode: {
                  name: 'CurrencyCode'
                },
                offeringType: {
                  name: 'OfferingType'
                },
                recurringCharges: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      frequency: {
                        name: 'Frequency'
                      },
                      amount: {
                        type: 'float',
                        name: 'Amount'
                      }
                    },
                    name: 'item'
                  },
                  name: 'RecurringCharges'
                }
              },
              name: 'item'
            },
            name: 'ReservedInstances'
          }
        }
      }
    },
    describeReservedInstancesListings: {
      name: 'DescribeReservedInstancesListings',
      input: {
        type: 'structure',
        members: {
          ReservedInstancesId: {
          },
          ReservedInstancesListingId: {
          },
          Filters: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                },
                Values: {
                  type: 'list',
                  members: {
                    name: 'Value'
                  },
                  flattened: true
                }
              }
            },
            flattened: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          reservedInstancesListingsSet: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                reservedInstancesListingId: {
                  name: 'ReservedInstancesListingId'
                },
                reservedInstancesId: {
                  name: 'ReservedInstancesId'
                },
                createDate: {
                  type: 'timestamp',
                  name: 'CreateDate'
                },
                updateDate: {
                  type: 'timestamp',
                  name: 'UpdateDate'
                },
                status: {
                  name: 'Status'
                },
                statusMessage: {
                  name: 'StatusMessage'
                },
                instanceCounts: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      state: {
                        name: 'State'
                      },
                      instanceCount: {
                        type: 'integer',
                        name: 'InstanceCount'
                      }
                    },
                    name: 'item'
                  },
                  name: 'InstanceCounts'
                },
                priceSchedules: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      term: {
                        type: 'integer',
                        name: 'Term'
                      },
                      price: {
                        type: 'float',
                        name: 'Price'
                      },
                      currencyCode: {
                        name: 'CurrencyCode'
                      },
                      active: {
                        type: 'boolean',
                        name: 'Active'
                      }
                    },
                    name: 'item'
                  },
                  name: 'PriceSchedules'
                },
                tagSet: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      key: {
                        name: 'Key'
                      },
                      value: {
                        name: 'Value'
                      }
                    },
                    name: 'item'
                  },
                  name: 'Tags'
                },
                clientToken: {
                  name: 'ClientToken'
                }
              },
              name: 'item'
            },
            name: 'ReservedInstancesListings'
          }
        }
      }
    },
    describeReservedInstancesOfferings: {
      name: 'DescribeReservedInstancesOfferings',
      input: {
        type: 'structure',
        members: {
          ReservedInstancesOfferingIds: {
            type: 'list',
            members: {
              name: 'ReservedInstancesOfferingId'
            },
            flattened: true
          },
          InstanceType: {
          },
          AvailabilityZone: {
          },
          ProductDescription: {
          },
          Filters: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                },
                Values: {
                  type: 'list',
                  members: {
                    name: 'Value'
                  },
                  flattened: true
                }
              },
              name: 'Filter'
            },
            flattened: true
          },
          InstanceTenancy: {
          },
          OfferingType: {
          },
          NextToken: {
          },
          MaxResults: {
            type: 'integer'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          reservedInstancesOfferingsSet: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                reservedInstancesOfferingId: {
                  name: 'ReservedInstancesOfferingId'
                },
                instanceType: {
                  name: 'InstanceType'
                },
                availabilityZone: {
                  name: 'AvailabilityZone'
                },
                duration: {
                  type: 'integer',
                  name: 'Duration'
                },
                usagePrice: {
                  type: 'float',
                  name: 'UsagePrice'
                },
                fixedPrice: {
                  type: 'float',
                  name: 'FixedPrice'
                },
                productDescription: {
                  name: 'ProductDescription'
                },
                instanceTenancy: {
                  name: 'InstanceTenancy'
                },
                currencyCode: {
                  name: 'CurrencyCode'
                },
                offeringType: {
                  name: 'OfferingType'
                },
                recurringCharges: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      frequency: {
                        name: 'Frequency'
                      },
                      amount: {
                        type: 'float',
                        name: 'Amount'
                      }
                    },
                    name: 'item'
                  },
                  name: 'RecurringCharges'
                },
                marketplace: {
                  type: 'boolean',
                  name: 'Marketplace'
                },
                pricingDetailsSet: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      price: {
                        type: 'float',
                        name: 'Price'
                      },
                      count: {
                        type: 'integer',
                        name: 'Count'
                      }
                    },
                    name: 'item'
                  },
                  name: 'PricingDetails'
                }
              },
              name: 'item'
            },
            name: 'ReservedInstancesOfferings'
          },
          nextToken: {
            name: 'NextToken'
          }
        }
      }
    },
    describeRouteTables: {
      name: 'DescribeRouteTables',
      input: {
        type: 'structure',
        members: {
          RouteTableIds: {
            type: 'list',
            members: {
              name: 'RouteTableId'
            },
            flattened: true
          },
          Filters: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                },
                Values: {
                  type: 'list',
                  members: {
                    name: 'Value'
                  },
                  flattened: true
                }
              },
              name: 'Filter'
            },
            flattened: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          routeTableSet: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                routeTableId: {
                  name: 'RouteTableId'
                },
                vpcId: {
                  name: 'VpcId'
                },
                routeSet: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      destinationCidrBlock: {
                        name: 'DestinationCidrBlock'
                      },
                      gatewayId: {
                        name: 'GatewayId'
                      },
                      instanceId: {
                        name: 'InstanceId'
                      },
                      instanceOwnerId: {
                        name: 'InstanceOwnerId'
                      },
                      networkInterfaceId: {
                        name: 'NetworkInterfaceId'
                      },
                      state: {
                        name: 'State'
                      }
                    },
                    name: 'item'
                  },
                  name: 'Routes'
                },
                associationSet: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      routeTableAssociationId: {
                        name: 'RouteTableAssociationId'
                      },
                      routeTableId: {
                        name: 'RouteTableId'
                      },
                      subnetId: {
                        name: 'SubnetId'
                      },
                      main: {
                        type: 'boolean',
                        name: 'Main'
                      }
                    },
                    name: 'item'
                  },
                  name: 'Associations'
                },
                tagSet: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      key: {
                        name: 'Key'
                      },
                      value: {
                        name: 'Value'
                      }
                    },
                    name: 'item'
                  },
                  name: 'Tags'
                },
                propagatingVgwSet: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      gatewayId: {
                        name: 'GatewayId'
                      }
                    },
                    name: 'item'
                  },
                  name: 'PropagatingVgws'
                },
                propagatedRouteSet: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      destinationCidrBlock: {
                        name: 'DestinationCidrBlock'
                      },
                      gatewayId: {
                        name: 'GatewayId'
                      },
                      status: {
                        name: 'Status'
                      },
                      sourceId: {
                        name: 'SourceId'
                      }
                    },
                    name: 'item'
                  },
                  name: 'PropagatedRoutes'
                }
              },
              name: 'item'
            },
            name: 'RouteTables'
          }
        }
      }
    },
    describeSecurityGroups: {
      name: 'DescribeSecurityGroups',
      input: {
        type: 'structure',
        members: {
          GroupNames: {
            type: 'list',
            members: {
              name: 'GroupName'
            },
            flattened: true
          },
          GroupIds: {
            type: 'list',
            members: {
              name: 'GroupId'
            },
            flattened: true
          },
          Filters: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                },
                Values: {
                  type: 'list',
                  members: {
                    name: 'Value'
                  },
                  flattened: true
                }
              },
              name: 'Filter'
            },
            flattened: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          securityGroupInfo: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                ownerId: {
                  name: 'OwnerId'
                },
                groupName: {
                  name: 'GroupName'
                },
                groupId: {
                  name: 'GroupId'
                },
                groupDescription: {
                  name: 'Description'
                },
                ipPermissions: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      ipProtocol: {
                        name: 'IpProtocol'
                      },
                      fromPort: {
                        type: 'integer',
                        name: 'FromPort'
                      },
                      toPort: {
                        type: 'integer',
                        name: 'ToPort'
                      },
                      groups: {
                        type: 'list',
                        members: {
                          type: 'structure',
                          members: {
                            userId: {
                              name: 'UserId'
                            },
                            groupName: {
                              name: 'GroupName'
                            },
                            groupId: {
                              name: 'GroupId'
                            }
                          },
                          name: 'item'
                        },
                        name: 'UserIdGroupPairs'
                      },
                      ipRanges: {
                        type: 'list',
                        members: {
                          type: 'structure',
                          members: {
                            cidrIp: {
                              name: 'CidrIp'
                            }
                          },
                          name: 'item'
                        },
                        name: 'IpRanges'
                      }
                    },
                    name: 'item'
                  },
                  name: 'IpPermissions'
                },
                ipPermissionsEgress: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      ipProtocol: {
                        name: 'IpProtocol'
                      },
                      fromPort: {
                        type: 'integer',
                        name: 'FromPort'
                      },
                      toPort: {
                        type: 'integer',
                        name: 'ToPort'
                      },
                      groups: {
                        type: 'list',
                        members: {
                          type: 'structure',
                          members: {
                            userId: {
                              name: 'UserId'
                            },
                            groupName: {
                              name: 'GroupName'
                            },
                            groupId: {
                              name: 'GroupId'
                            }
                          },
                          name: 'item'
                        },
                        name: 'UserIdGroupPairs'
                      },
                      ipRanges: {
                        type: 'list',
                        members: {
                          type: 'structure',
                          members: {
                            cidrIp: {
                              name: 'CidrIp'
                            }
                          },
                          name: 'item'
                        },
                        name: 'IpRanges'
                      }
                    },
                    name: 'item'
                  },
                  name: 'IpPermissionsEgress'
                },
                vpcId: {
                  name: 'VpcId'
                },
                tagSet: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      key: {
                        name: 'Key'
                      },
                      value: {
                        name: 'Value'
                      }
                    },
                    name: 'item'
                  },
                  name: 'Tags'
                }
              },
              name: 'item'
            },
            name: 'SecurityGroups'
          }
        }
      }
    },
    describeSnapshotAttribute: {
      name: 'DescribeSnapshotAttribute',
      input: {
        type: 'structure',
        members: {
          SnapshotId: {
            required: true
          },
          Attribute: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          snapshotId: {
            name: 'SnapshotId'
          },
          createVolumePermission: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                userId: {
                  name: 'UserId'
                },
                group: {
                  name: 'Group'
                }
              },
              name: 'item'
            },
            name: 'CreateVolumePermissions'
          },
          productCodes: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                productCode: {
                  name: 'ProductCodeId'
                },
                type: {
                  name: 'ProductCodeType'
                }
              },
              name: 'item'
            },
            name: 'ProductCodes'
          }
        }
      }
    },
    describeSnapshots: {
      name: 'DescribeSnapshots',
      input: {
        type: 'structure',
        members: {
          SnapshotIds: {
            type: 'list',
            members: {
              name: 'SnapshotId'
            },
            flattened: true
          },
          OwnerIds: {
            type: 'list',
            members: {
              name: 'Owner'
            },
            flattened: true
          },
          RestorableByUserIds: {
            type: 'list',
            members: {
              name: 'RestorableBy'
            },
            flattened: true
          },
          Filters: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                },
                Values: {
                  type: 'list',
                  members: {
                    name: 'Value'
                  },
                  flattened: true
                }
              },
              name: 'Filter'
            },
            flattened: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          snapshotSet: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                snapshotId: {
                  name: 'SnapshotId'
                },
                volumeId: {
                  name: 'VolumeId'
                },
                status: {
                  name: 'State'
                },
                startTime: {
                  type: 'timestamp',
                  name: 'StartTime'
                },
                progress: {
                  name: 'Progress'
                },
                ownerId: {
                  name: 'OwnerId'
                },
                description: {
                  name: 'Description'
                },
                volumeSize: {
                  type: 'integer',
                  name: 'VolumeSize'
                },
                ownerAlias: {
                  name: 'OwnerAlias'
                },
                tagSet: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      key: {
                        name: 'Key'
                      },
                      value: {
                        name: 'Value'
                      }
                    },
                    name: 'item'
                  },
                  name: 'Tags'
                }
              },
              name: 'item'
            },
            name: 'Snapshots'
          }
        }
      }
    },
    describeSpotDatafeedSubscription: {
      name: 'DescribeSpotDatafeedSubscription',
      input: {
        type: 'structure'
      },
      output: {
        type: 'structure',
        members: {
          spotDatafeedSubscription: {
            type: 'structure',
            members: {
              ownerId: {
                name: 'OwnerId'
              },
              bucket: {
                name: 'Bucket'
              },
              prefix: {
                name: 'Prefix'
              },
              state: {
                name: 'State'
              },
              fault: {
                type: 'structure',
                members: {
                  code: {
                    name: 'Code'
                  },
                  message: {
                    name: 'Message'
                  }
                },
                name: 'Fault'
              }
            },
            name: 'SpotDatafeedSubscription'
          }
        }
      }
    },
    describeSpotInstanceRequests: {
      name: 'DescribeSpotInstanceRequests',
      input: {
        type: 'structure',
        members: {
          SpotInstanceRequestIds: {
            type: 'list',
            members: {
              name: 'SpotInstanceRequestId'
            },
            flattened: true
          },
          Filters: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                },
                Values: {
                  type: 'list',
                  members: {
                    name: 'Value'
                  },
                  flattened: true
                }
              },
              name: 'Filter'
            },
            flattened: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          spotInstanceRequestSet: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                spotInstanceRequestId: {
                  name: 'SpotInstanceRequestId'
                },
                spotPrice: {
                  name: 'SpotPrice'
                },
                type: {
                  name: 'Type'
                },
                state: {
                  name: 'State'
                },
                fault: {
                  type: 'structure',
                  members: {
                    code: {
                      name: 'Code'
                    },
                    message: {
                      name: 'Message'
                    }
                  },
                  name: 'Fault'
                },
                status: {
                  type: 'structure',
                  members: {
                    code: {
                      name: 'Code'
                    },
                    updateTime: {
                      type: 'timestamp',
                      name: 'UpdateTime'
                    },
                    message: {
                      name: 'Message'
                    }
                  },
                  name: 'Status'
                },
                validFrom: {
                  type: 'timestamp',
                  name: 'ValidFrom'
                },
                validUntil: {
                  type: 'timestamp',
                  name: 'ValidUntil'
                },
                launchGroup: {
                  name: 'LaunchGroup'
                },
                availabilityZoneGroup: {
                  name: 'AvailabilityZoneGroup'
                },
                launchSpecification: {
                  type: 'structure',
                  members: {
                    imageId: {
                      name: 'ImageId'
                    },
                    keyName: {
                      name: 'KeyName'
                    },
                    groupSet: {
                      type: 'list',
                      members: {
                        type: 'structure',
                        members: {
                          groupName: {
                            name: 'GroupName'
                          },
                          groupId: {
                            name: 'GroupId'
                          }
                        },
                        name: 'item'
                      },
                      name: 'SecurityGroups'
                    },
                    userData: {
                      name: 'UserData'
                    },
                    addressingType: {
                      name: 'AddressingType'
                    },
                    instanceType: {
                      name: 'InstanceType'
                    },
                    placement: {
                      type: 'structure',
                      members: {
                        availabilityZone: {
                          name: 'AvailabilityZone'
                        },
                        groupName: {
                          name: 'GroupName'
                        }
                      },
                      name: 'Placement'
                    },
                    kernelId: {
                      name: 'KernelId'
                    },
                    ramdiskId: {
                      name: 'RamdiskId'
                    },
                    blockDeviceMapping: {
                      type: 'list',
                      members: {
                        type: 'structure',
                        members: {
                          virtualName: {
                            name: 'VirtualName'
                          },
                          deviceName: {
                            name: 'DeviceName'
                          },
                          ebs: {
                            type: 'structure',
                            members: {
                              snapshotId: {
                                name: 'SnapshotId'
                              },
                              volumeSize: {
                                type: 'integer',
                                name: 'VolumeSize'
                              },
                              deleteOnTermination: {
                                type: 'boolean',
                                name: 'DeleteOnTermination'
                              },
                              volumeType: {
                                name: 'VolumeType'
                              },
                              iops: {
                                type: 'integer',
                                name: 'Iops'
                              }
                            },
                            name: 'Ebs'
                          },
                          noDevice: {
                            name: 'NoDevice'
                          }
                        },
                        name: 'item'
                      },
                      name: 'BlockDeviceMappings'
                    },
                    monitoringEnabled: {
                      type: 'boolean',
                      name: 'MonitoringEnabled'
                    },
                    subnetId: {
                      name: 'SubnetId'
                    },
                    networkInterfaceSet: {
                      type: 'list',
                      members: {
                        type: 'structure',
                        members: {
                          networkInterfaceId: {
                            name: 'NetworkInterfaceId'
                          },
                          deviceIndex: {
                            type: 'integer',
                            name: 'DeviceIndex'
                          },
                          subnetId: {
                            name: 'SubnetId'
                          },
                          description: {
                            name: 'Description'
                          },
                          privateIpAddress: {
                            name: 'PrivateIpAddress'
                          },
                          SecurityGroupId: {
                            type: 'list',
                            members: {
                              name: 'SecurityGroupId'
                            },
                            name: 'Groups'
                          },
                          deleteOnTermination: {
                            type: 'boolean',
                            name: 'DeleteOnTermination'
                          },
                          privateIpAddressesSet: {
                            type: 'list',
                            members: {
                              type: 'structure',
                              members: {
                                privateIpAddress: {
                                  name: 'PrivateIpAddress'
                                },
                                primary: {
                                  type: 'boolean',
                                  name: 'Primary'
                                }
                              },
                              name: 'item'
                            },
                            name: 'PrivateIpAddresses'
                          },
                          secondaryPrivateIpAddressCount: {
                            type: 'integer',
                            name: 'SecondaryPrivateIpAddressCount'
                          }
                        },
                        name: 'item'
                      },
                      name: 'NetworkInterfaces'
                    },
                    iamInstanceProfile: {
                      type: 'structure',
                      members: {
                        arn: {
                          name: 'Arn'
                        },
                        name: {
                          name: 'Name'
                        }
                      },
                      name: 'IamInstanceProfile'
                    },
                    ebsOptimized: {
                      type: 'boolean',
                      name: 'EbsOptimized'
                    }
                  },
                  name: 'LaunchSpecification'
                },
                instanceId: {
                  name: 'InstanceId'
                },
                createTime: {
                  type: 'timestamp',
                  name: 'CreateTime'
                },
                productDescription: {
                  name: 'ProductDescription'
                },
                tagSet: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      key: {
                        name: 'Key'
                      },
                      value: {
                        name: 'Value'
                      }
                    },
                    name: 'item'
                  },
                  name: 'Tags'
                },
                launchedAvailabilityZone: {
                  name: 'LaunchedAvailabilityZone'
                }
              },
              name: 'item'
            },
            name: 'SpotInstanceRequests'
          }
        }
      }
    },
    describeSpotPriceHistory: {
      name: 'DescribeSpotPriceHistory',
      input: {
        type: 'structure',
        members: {
          StartTime: {
            type: 'timestamp'
          },
          EndTime: {
            type: 'timestamp'
          },
          InstanceTypes: {
            type: 'list',
            members: {
              name: 'InstanceType'
            },
            flattened: true
          },
          ProductDescriptions: {
            type: 'list',
            members: {
              name: 'ProductDescription'
            },
            flattened: true
          },
          Filters: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                },
                Values: {
                  type: 'list',
                  members: {
                    name: 'Value'
                  },
                  flattened: true
                }
              },
              name: 'Filter'
            },
            flattened: true
          },
          AvailabilityZone: {
          },
          MaxResults: {
            type: 'integer'
          },
          NextToken: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          spotPriceHistorySet: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                instanceType: {
                  name: 'InstanceType'
                },
                productDescription: {
                  name: 'ProductDescription'
                },
                spotPrice: {
                  name: 'SpotPrice'
                },
                timestamp: {
                  type: 'timestamp',
                  name: 'Timestamp'
                },
                availabilityZone: {
                  name: 'AvailabilityZone'
                }
              },
              name: 'item'
            },
            name: 'SpotPriceHistory'
          },
          nextToken: {
            name: 'NextToken'
          }
        }
      }
    },
    describeSubnets: {
      name: 'DescribeSubnets',
      input: {
        type: 'structure',
        members: {
          SubnetIds: {
            type: 'list',
            members: {
              name: 'SubnetId'
            },
            flattened: true
          },
          Filters: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                },
                Values: {
                  type: 'list',
                  members: {
                    name: 'Value'
                  },
                  flattened: true
                }
              },
              name: 'Filter'
            },
            flattened: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          subnetSet: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                subnetId: {
                  name: 'SubnetId'
                },
                state: {
                  name: 'State'
                },
                vpcId: {
                  name: 'VpcId'
                },
                cidrBlock: {
                  name: 'CidrBlock'
                },
                availableIpAddressCount: {
                  type: 'integer',
                  name: 'AvailableIpAddressCount'
                },
                availabilityZone: {
                  name: 'AvailabilityZone'
                },
                tagSet: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      key: {
                        name: 'Key'
                      },
                      value: {
                        name: 'Value'
                      }
                    },
                    name: 'item'
                  },
                  name: 'Tags'
                }
              },
              name: 'item'
            },
            name: 'Subnets'
          }
        }
      }
    },
    describeTags: {
      name: 'DescribeTags',
      input: {
        type: 'structure',
        members: {
          Filters: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                },
                Values: {
                  type: 'list',
                  members: {
                    name: 'Value'
                  },
                  flattened: true
                }
              },
              name: 'Filter'
            },
            flattened: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          tagSet: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                resourceId: {
                  name: 'ResourceId'
                },
                resourceType: {
                  name: 'ResourceType'
                },
                key: {
                  name: 'Key'
                },
                value: {
                  name: 'Value'
                }
              },
              name: 'item'
            },
            name: 'Tags'
          }
        }
      }
    },
    describeVolumeAttribute: {
      name: 'DescribeVolumeAttribute',
      input: {
        type: 'structure',
        members: {
          VolumeId: {
            required: true
          },
          Attribute: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          volumeId: {
            name: 'VolumeId'
          },
          autoEnableIO: {
            type: 'structure',
            members: {
              value: {
                type: 'boolean',
                name: 'Value'
              }
            },
            name: 'AutoEnableIO'
          },
          productCodes: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                productCode: {
                  name: 'ProductCodeId'
                },
                type: {
                  name: 'ProductCodeType'
                }
              },
              name: 'item'
            },
            name: 'ProductCodes'
          }
        }
      }
    },
    describeVolumeStatus: {
      name: 'DescribeVolumeStatus',
      input: {
        type: 'structure',
        members: {
          VolumeIds: {
            type: 'list',
            members: {
              name: 'VolumeId'
            },
            flattened: true
          },
          Filters: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                },
                Values: {
                  type: 'list',
                  members: {
                    name: 'Value'
                  },
                  flattened: true
                }
              },
              name: 'Filter'
            },
            flattened: true
          },
          NextToken: {
          },
          MaxResults: {
            type: 'integer'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          volumeStatusSet: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                volumeId: {
                  name: 'VolumeId'
                },
                availabilityZone: {
                  name: 'AvailabilityZone'
                },
                volumeStatus: {
                  type: 'structure',
                  members: {
                    status: {
                      name: 'Status'
                    },
                    details: {
                      type: 'list',
                      members: {
                        type: 'structure',
                        members: {
                          name: {
                            name: 'Name'
                          },
                          status: {
                            name: 'Status'
                          }
                        },
                        name: 'item'
                      },
                      name: 'Details'
                    }
                  },
                  name: 'VolumeStatus'
                },
                eventsSet: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      eventType: {
                        name: 'EventType'
                      },
                      description: {
                        name: 'Description'
                      },
                      notBefore: {
                        type: 'timestamp',
                        name: 'NotBefore'
                      },
                      notAfter: {
                        type: 'timestamp',
                        name: 'NotAfter'
                      },
                      eventId: {
                        name: 'EventId'
                      }
                    },
                    name: 'item'
                  },
                  name: 'Events'
                },
                actionsSet: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      code: {
                        name: 'Code'
                      },
                      description: {
                        name: 'Description'
                      },
                      eventType: {
                        name: 'EventType'
                      },
                      eventId: {
                        name: 'EventId'
                      }
                    },
                    name: 'item'
                  },
                  name: 'Actions'
                }
              },
              name: 'item'
            },
            name: 'VolumeStatuses'
          },
          nextToken: {
            name: 'NextToken'
          }
        }
      }
    },
    describeVolumes: {
      name: 'DescribeVolumes',
      input: {
        type: 'structure',
        members: {
          VolumeIds: {
            type: 'list',
            members: {
              name: 'VolumeId'
            },
            flattened: true
          },
          Filters: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                },
                Values: {
                  type: 'list',
                  members: {
                    name: 'Value'
                  },
                  flattened: true
                }
              },
              name: 'Filter'
            },
            flattened: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          volumeSet: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                volumeId: {
                  name: 'VolumeId'
                },
                size: {
                  type: 'integer',
                  name: 'Size'
                },
                snapshotId: {
                  name: 'SnapshotId'
                },
                availabilityZone: {
                  name: 'AvailabilityZone'
                },
                status: {
                  name: 'State'
                },
                createTime: {
                  type: 'timestamp',
                  name: 'CreateTime'
                },
                attachmentSet: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      volumeId: {
                        name: 'VolumeId'
                      },
                      instanceId: {
                        name: 'InstanceId'
                      },
                      device: {
                        name: 'Device'
                      },
                      status: {
                        name: 'State'
                      },
                      attachTime: {
                        type: 'timestamp',
                        name: 'AttachTime'
                      },
                      deleteOnTermination: {
                        type: 'boolean',
                        name: 'DeleteOnTermination'
                      }
                    },
                    name: 'item'
                  },
                  name: 'Attachments'
                },
                tagSet: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      key: {
                        name: 'Key'
                      },
                      value: {
                        name: 'Value'
                      }
                    },
                    name: 'item'
                  },
                  name: 'Tags'
                },
                volumeType: {
                  name: 'VolumeType'
                },
                iops: {
                  type: 'integer',
                  name: 'Iops'
                }
              },
              name: 'item'
            },
            name: 'Volumes'
          }
        }
      }
    },
    describeVpcs: {
      name: 'DescribeVpcs',
      input: {
        type: 'structure',
        members: {
          VpcIds: {
            type: 'list',
            members: {
              name: 'VpcId'
            },
            flattened: true
          },
          Filters: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                },
                Values: {
                  type: 'list',
                  members: {
                    name: 'Value'
                  },
                  flattened: true
                }
              },
              name: 'Filter'
            },
            flattened: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          vpcSet: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                vpcId: {
                  name: 'VpcId'
                },
                state: {
                  name: 'State'
                },
                cidrBlock: {
                  name: 'CidrBlock'
                },
                dhcpOptionsId: {
                  name: 'DhcpOptionsId'
                },
                tagSet: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      key: {
                        name: 'Key'
                      },
                      value: {
                        name: 'Value'
                      }
                    },
                    name: 'item'
                  },
                  name: 'Tags'
                },
                instanceTenancy: {
                  name: 'InstanceTenancy'
                }
              },
              name: 'item'
            },
            name: 'Vpcs'
          }
        }
      }
    },
    describeVpnConnections: {
      name: 'DescribeVpnConnections',
      input: {
        type: 'structure',
        members: {
          VpnConnectionIds: {
            type: 'list',
            members: {
              name: 'VpnConnectionId'
            },
            flattened: true
          },
          Filters: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                },
                Values: {
                  type: 'list',
                  members: {
                    name: 'Value'
                  },
                  flattened: true
                }
              },
              name: 'Filter'
            },
            flattened: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          vpnConnectionSet: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                vpnConnectionId: {
                  name: 'VpnConnectionId'
                },
                state: {
                  name: 'State'
                },
                customerGatewayConfiguration: {
                  name: 'CustomerGatewayConfiguration'
                },
                type: {
                  name: 'Type'
                },
                customerGatewayId: {
                  name: 'CustomerGatewayId'
                },
                vpnGatewayId: {
                  name: 'VpnGatewayId'
                },
                tagSet: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      key: {
                        name: 'Key'
                      },
                      value: {
                        name: 'Value'
                      }
                    },
                    name: 'item'
                  },
                  name: 'Tags'
                },
                vgwTelemetry: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      outsideIpAddress: {
                        name: 'OutsideIpAddress'
                      },
                      status: {
                        name: 'Status'
                      },
                      lastStatusChange: {
                        type: 'timestamp',
                        name: 'LastStatusChange'
                      },
                      statusMessage: {
                        name: 'StatusMessage'
                      },
                      acceptedRouteCount: {
                        type: 'integer',
                        name: 'AcceptedRouteCount'
                      }
                    },
                    name: 'item'
                  },
                  name: 'VgwTelemetry'
                },
                options: {
                  type: 'structure',
                  members: {
                    staticRoutesOnly: {
                      type: 'boolean',
                      name: 'StaticRoutesOnly'
                    }
                  },
                  name: 'Options'
                },
                routes: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      destinationCidrBlock: {
                        name: 'DestinationCidrBlock'
                      },
                      source: {
                        name: 'Source'
                      },
                      state: {
                        name: 'State'
                      }
                    },
                    name: 'item'
                  },
                  name: 'Routes'
                }
              },
              name: 'item'
            },
            name: 'VpnConnections'
          }
        }
      }
    },
    describeVpnGateways: {
      name: 'DescribeVpnGateways',
      input: {
        type: 'structure',
        members: {
          VpnGatewayIds: {
            type: 'list',
            members: {
              name: 'VpnGatewayId'
            },
            flattened: true
          },
          Filters: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                },
                Values: {
                  type: 'list',
                  members: {
                    name: 'Value'
                  },
                  flattened: true
                }
              },
              name: 'Filter'
            },
            flattened: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          vpnGatewaySet: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                vpnGatewayId: {
                  name: 'VpnGatewayId'
                },
                state: {
                  name: 'State'
                },
                type: {
                  name: 'Type'
                },
                availabilityZone: {
                  name: 'AvailabilityZone'
                },
                attachments: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      vpcId: {
                        name: 'VpcId'
                      },
                      state: {
                        name: 'State'
                      }
                    },
                    name: 'item'
                  },
                  name: 'VpcAttachments'
                },
                tagSet: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      key: {
                        name: 'Key'
                      },
                      value: {
                        name: 'Value'
                      }
                    },
                    name: 'item'
                  },
                  name: 'Tags'
                }
              },
              name: 'item'
            },
            name: 'VpnGateways'
          }
        }
      }
    },
    detachInternetGateway: {
      name: 'DetachInternetGateway',
      input: {
        type: 'structure',
        members: {
          InternetGatewayId: {
            required: true
          },
          VpcId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    detachNetworkInterface: {
      name: 'DetachNetworkInterface',
      input: {
        type: 'structure',
        members: {
          AttachmentId: {
            required: true
          },
          Force: {
            type: 'boolean'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    detachVolume: {
      name: 'DetachVolume',
      input: {
        type: 'structure',
        members: {
          VolumeId: {
            required: true
          },
          InstanceId: {
          },
          Device: {
          },
          Force: {
            type: 'boolean'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          volumeId: {
            name: 'VolumeId'
          },
          instanceId: {
            name: 'InstanceId'
          },
          device: {
            name: 'Device'
          },
          status: {
            name: 'State'
          },
          attachTime: {
            type: 'timestamp',
            name: 'AttachTime'
          },
          deleteOnTermination: {
            type: 'boolean',
            name: 'DeleteOnTermination'
          }
        },
        name: 'attachment'
      }
    },
    detachVpnGateway: {
      name: 'DetachVpnGateway',
      input: {
        type: 'structure',
        members: {
          VpnGatewayId: {
            required: true
          },
          VpcId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    disableVgwRoutePropagation: {
      name: 'DisableVgwRoutePropagation',
      input: {
        type: 'structure',
        members: {
          RouteTableId: {
            required: true
          },
          GatewayId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    disassociateAddress: {
      name: 'DisassociateAddress',
      input: {
        type: 'structure',
        members: {
          PublicIp: {
          },
          AssociationId: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    disassociateRouteTable: {
      name: 'DisassociateRouteTable',
      input: {
        type: 'structure',
        members: {
          AssociationId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    enableVgwRoutePropagation: {
      name: 'EnableVgwRoutePropagation',
      input: {
        type: 'structure',
        members: {
          RouteTableId: {
            required: true
          },
          GatewayId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    enableVolumeIO: {
      name: 'EnableVolumeIO',
      input: {
        type: 'structure',
        members: {
          VolumeId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    getConsoleOutput: {
      name: 'GetConsoleOutput',
      input: {
        type: 'structure',
        members: {
          InstanceId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          instanceId: {
            name: 'InstanceId'
          },
          timestamp: {
            type: 'timestamp',
            name: 'Timestamp'
          },
          output: {
            name: 'Output'
          }
        }
      }
    },
    getPasswordData: {
      name: 'GetPasswordData',
      input: {
        type: 'structure',
        members: {
          InstanceId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          instanceId: {
            name: 'InstanceId'
          },
          timestamp: {
            type: 'timestamp',
            name: 'Timestamp'
          },
          passwordData: {
            name: 'PasswordData'
          }
        }
      }
    },
    importInstance: {
      name: 'ImportInstance',
      input: {
        type: 'structure',
        members: {
          Description: {
          },
          LaunchSpecification: {
            type: 'structure',
            members: {
              Architecture: {
              },
              SecurityGroups: {
                type: 'list',
                members: {
                  name: 'SecurityGroup'
                },
                flattened: true
              },
              AdditionalInfo: {
              },
              UserData: {
              },
              InstanceType: {
              },
              Placement: {
                type: 'structure',
                members: {
                  AvailabilityZone: {
                  },
                  GroupName: {
                  },
                  Tenancy: {
                  }
                }
              },
              BlockDeviceMappings: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    VirtualName: {
                    },
                    DeviceName: {
                    },
                    Ebs: {
                      type: 'structure',
                      members: {
                        SnapshotId: {
                        },
                        VolumeSize: {
                          type: 'integer'
                        },
                        DeleteOnTermination: {
                          type: 'boolean'
                        },
                        VolumeType: {
                        },
                        Iops: {
                          type: 'integer'
                        }
                      }
                    },
                    NoDevice: {
                    }
                  },
                  name: 'BlockDeviceMapping'
                },
                flattened: true
              },
              Monitoring: {
                type: 'boolean'
              },
              SubnetId: {
              },
              DisableApiTermination: {
                type: 'boolean'
              },
              InstanceInitiatedShutdownBehavior: {
              },
              PrivateIpAddress: {
              }
            }
          },
          DiskImages: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Image: {
                  type: 'structure',
                  members: {
                    Format: {
                      required: true
                    },
                    Bytes: {
                      type: 'integer',
                      required: true
                    },
                    ImportManifestUrl: {
                      required: true
                    }
                  }
                },
                Description: {
                },
                Volume: {
                  type: 'structure',
                  members: {
                    Size: {
                      type: 'integer',
                      required: true
                    }
                  }
                }
              },
              name: 'DiskImage'
            },
            flattened: true
          },
          Platform: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          conversionTask: {
            type: 'structure',
            members: {
              conversionTaskId: {
                name: 'ConversionTaskId'
              },
              expirationTime: {
                name: 'ExpirationTime'
              },
              importInstance: {
                type: 'structure',
                members: {
                  volumes: {
                    type: 'list',
                    members: {
                      type: 'structure',
                      members: {
                        bytesConverted: {
                          type: 'integer',
                          name: 'BytesConverted'
                        },
                        availabilityZone: {
                          name: 'AvailabilityZone'
                        },
                        image: {
                          type: 'structure',
                          members: {
                            format: {
                              name: 'Format'
                            },
                            size: {
                              type: 'integer',
                              name: 'Size'
                            },
                            importManifestUrl: {
                              name: 'ImportManifestUrl'
                            },
                            checksum: {
                              name: 'Checksum'
                            }
                          },
                          name: 'Image'
                        },
                        volume: {
                          type: 'structure',
                          members: {
                            size: {
                              type: 'integer',
                              name: 'Size'
                            },
                            id: {
                              name: 'Id'
                            }
                          },
                          name: 'Volume'
                        },
                        status: {
                          name: 'Status'
                        },
                        statusMessage: {
                          name: 'StatusMessage'
                        },
                        description: {
                          name: 'Description'
                        }
                      },
                      name: 'item'
                    },
                    name: 'Volumes'
                  },
                  instanceId: {
                    name: 'InstanceId'
                  },
                  platform: {
                    name: 'Platform'
                  },
                  description: {
                    name: 'Description'
                  }
                },
                name: 'ImportInstance'
              },
              importVolume: {
                type: 'structure',
                members: {
                  bytesConverted: {
                    type: 'integer',
                    name: 'BytesConverted'
                  },
                  availabilityZone: {
                    name: 'AvailabilityZone'
                  },
                  description: {
                    name: 'Description'
                  },
                  image: {
                    type: 'structure',
                    members: {
                      format: {
                        name: 'Format'
                      },
                      size: {
                        type: 'integer',
                        name: 'Size'
                      },
                      importManifestUrl: {
                        name: 'ImportManifestUrl'
                      },
                      checksum: {
                        name: 'Checksum'
                      }
                    },
                    name: 'Image'
                  },
                  volume: {
                    type: 'structure',
                    members: {
                      size: {
                        type: 'integer',
                        name: 'Size'
                      },
                      id: {
                        name: 'Id'
                      }
                    },
                    name: 'Volume'
                  }
                },
                name: 'ImportVolume'
              },
              state: {
                name: 'State'
              },
              statusMessage: {
                name: 'StatusMessage'
              },
              tagSet: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    key: {
                      name: 'Key'
                    },
                    value: {
                      name: 'Value'
                    }
                  },
                  name: 'item'
                },
                name: 'Tags'
              }
            },
            name: 'ConversionTask'
          }
        }
      }
    },
    importKeyPair: {
      name: 'ImportKeyPair',
      input: {
        type: 'structure',
        members: {
          KeyName: {
            required: true
          },
          PublicKeyMaterial: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          keyName: {
            name: 'KeyName'
          },
          keyFingerprint: {
            name: 'KeyFingerprint'
          }
        }
      }
    },
    importVolume: {
      name: 'ImportVolume',
      input: {
        type: 'structure',
        members: {
          AvailabilityZone: {
          },
          Image: {
            type: 'structure',
            members: {
              Format: {
                required: true
              },
              Bytes: {
                type: 'integer',
                required: true
              },
              ImportManifestUrl: {
                required: true
              }
            }
          },
          Description: {
          },
          Volume: {
            type: 'structure',
            members: {
              Size: {
                type: 'integer',
                required: true
              }
            }
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          conversionTask: {
            type: 'structure',
            members: {
              conversionTaskId: {
                name: 'ConversionTaskId'
              },
              expirationTime: {
                name: 'ExpirationTime'
              },
              importInstance: {
                type: 'structure',
                members: {
                  volumes: {
                    type: 'list',
                    members: {
                      type: 'structure',
                      members: {
                        bytesConverted: {
                          type: 'integer',
                          name: 'BytesConverted'
                        },
                        availabilityZone: {
                          name: 'AvailabilityZone'
                        },
                        image: {
                          type: 'structure',
                          members: {
                            format: {
                              name: 'Format'
                            },
                            size: {
                              type: 'integer',
                              name: 'Size'
                            },
                            importManifestUrl: {
                              name: 'ImportManifestUrl'
                            },
                            checksum: {
                              name: 'Checksum'
                            }
                          },
                          name: 'Image'
                        },
                        volume: {
                          type: 'structure',
                          members: {
                            size: {
                              type: 'integer',
                              name: 'Size'
                            },
                            id: {
                              name: 'Id'
                            }
                          },
                          name: 'Volume'
                        },
                        status: {
                          name: 'Status'
                        },
                        statusMessage: {
                          name: 'StatusMessage'
                        },
                        description: {
                          name: 'Description'
                        }
                      },
                      name: 'item'
                    },
                    name: 'Volumes'
                  },
                  instanceId: {
                    name: 'InstanceId'
                  },
                  platform: {
                    name: 'Platform'
                  },
                  description: {
                    name: 'Description'
                  }
                },
                name: 'ImportInstance'
              },
              importVolume: {
                type: 'structure',
                members: {
                  bytesConverted: {
                    type: 'integer',
                    name: 'BytesConverted'
                  },
                  availabilityZone: {
                    name: 'AvailabilityZone'
                  },
                  description: {
                    name: 'Description'
                  },
                  image: {
                    type: 'structure',
                    members: {
                      format: {
                        name: 'Format'
                      },
                      size: {
                        type: 'integer',
                        name: 'Size'
                      },
                      importManifestUrl: {
                        name: 'ImportManifestUrl'
                      },
                      checksum: {
                        name: 'Checksum'
                      }
                    },
                    name: 'Image'
                  },
                  volume: {
                    type: 'structure',
                    members: {
                      size: {
                        type: 'integer',
                        name: 'Size'
                      },
                      id: {
                        name: 'Id'
                      }
                    },
                    name: 'Volume'
                  }
                },
                name: 'ImportVolume'
              },
              state: {
                name: 'State'
              },
              statusMessage: {
                name: 'StatusMessage'
              },
              tagSet: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    key: {
                      name: 'Key'
                    },
                    value: {
                      name: 'Value'
                    }
                  },
                  name: 'item'
                },
                name: 'Tags'
              }
            },
            name: 'ConversionTask'
          }
        }
      }
    },
    modifyImageAttribute: {
      name: 'ModifyImageAttribute',
      input: {
        type: 'structure',
        members: {
          ImageId: {
            required: true
          },
          Attribute: {
          },
          OperationType: {
          },
          UserIds: {
            type: 'list',
            members: {
              name: 'UserId'
            },
            flattened: true
          },
          UserGroups: {
            type: 'list',
            members: {
              name: 'UserGroup'
            },
            flattened: true
          },
          ProductCodes: {
            type: 'list',
            members: {
              name: 'ProductCode'
            },
            flattened: true
          },
          Value: {
          },
          LaunchPermission: {
            type: 'structure',
            members: {
              Add: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    UserId: {
                    },
                    Group: {
                    }
                  }
                },
                flattened: true
              },
              Remove: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    UserId: {
                    },
                    Group: {
                    }
                  }
                },
                flattened: true
              }
            }
          },
          Description: {
            type: 'structure',
            members: {
              Value: {
              }
            }
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    modifyInstanceAttribute: {
      name: 'ModifyInstanceAttribute',
      input: {
        type: 'structure',
        members: {
          InstanceId: {
            required: true
          },
          Attribute: {
          },
          Value: {
          },
          BlockDeviceMappings: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                DeviceName: {
                },
                Ebs: {
                  type: 'structure',
                  members: {
                    VolumeId: {
                    },
                    DeleteOnTermination: {
                      type: 'boolean'
                    }
                  }
                },
                VirtualName: {
                },
                NoDevice: {
                }
              },
              name: 'BlockDeviceMapping'
            },
            flattened: true
          },
          SourceDestCheck: {
            type: 'structure',
            members: {
              Value: {
                type: 'boolean'
              }
            }
          },
          DisableApiTermination: {
            type: 'structure',
            members: {
              Value: {
                type: 'boolean'
              }
            }
          },
          InstanceType: {
            type: 'structure',
            members: {
              Value: {
              }
            }
          },
          Kernel: {
            type: 'structure',
            members: {
              Value: {
              }
            }
          },
          Ramdisk: {
            type: 'structure',
            members: {
              Value: {
              }
            }
          },
          UserData: {
            type: 'structure',
            members: {
              Value: {
              }
            }
          },
          InstanceInitiatedShutdownBehavior: {
            type: 'structure',
            members: {
              Value: {
              }
            }
          },
          Groups: {
            type: 'list',
            members: {
              name: 'GroupId'
            },
            flattened: true
          },
          EbsOptimized: {
            type: 'structure',
            members: {
              Value: {
                type: 'boolean'
              }
            }
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    modifyNetworkInterfaceAttribute: {
      name: 'ModifyNetworkInterfaceAttribute',
      input: {
        type: 'structure',
        members: {
          NetworkInterfaceId: {
            required: true
          },
          Description: {
            type: 'structure',
            members: {
              Value: {
              }
            }
          },
          SourceDestCheck: {
            type: 'structure',
            members: {
              Value: {
                type: 'boolean'
              }
            }
          },
          Groups: {
            type: 'list',
            members: {
              name: 'SecurityGroupId'
            },
            flattened: true
          },
          Attachment: {
            type: 'structure',
            members: {
              AttachmentId: {
              },
              DeleteOnTermination: {
                type: 'boolean'
              }
            }
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    modifySnapshotAttribute: {
      name: 'ModifySnapshotAttribute',
      input: {
        type: 'structure',
        members: {
          SnapshotId: {
            required: true
          },
          Attribute: {
          },
          OperationType: {
          },
          UserIds: {
            type: 'list',
            members: {
              name: 'UserId'
            },
            flattened: true
          },
          GroupNames: {
            type: 'list',
            members: {
              name: 'UserGroup'
            },
            flattened: true
          },
          CreateVolumePermission: {
            type: 'structure',
            members: {
              Add: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    UserId: {
                    },
                    Group: {
                    }
                  }
                },
                flattened: true
              },
              Remove: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    UserId: {
                    },
                    Group: {
                    }
                  }
                },
                flattened: true
              }
            }
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    modifyVolumeAttribute: {
      name: 'ModifyVolumeAttribute',
      input: {
        type: 'structure',
        members: {
          VolumeId: {
            required: true
          },
          AutoEnableIO: {
            type: 'boolean'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    monitorInstances: {
      name: 'MonitorInstances',
      input: {
        type: 'structure',
        members: {
          InstanceIds: {
            type: 'list',
            members: {
              name: 'InstanceId'
            },
            required: true,
            flattened: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          instancesSet: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                instanceId: {
                  name: 'InstanceId'
                },
                monitoring: {
                  type: 'structure',
                  members: {
                    state: {
                      name: 'State'
                    }
                  },
                  name: 'Monitoring'
                }
              },
              name: 'item'
            },
            name: 'InstanceMonitorings'
          }
        }
      }
    },
    purchaseReservedInstancesOffering: {
      name: 'PurchaseReservedInstancesOffering',
      input: {
        type: 'structure',
        members: {
          ReservedInstancesOfferingId: {
            required: true
          },
          InstanceCount: {
            type: 'integer',
            required: true
          },
          LimitPrice: {
            type: 'structure',
            members: {
              Amount: {
                type: 'float'
              },
              CurrencyCode: {
              }
            }
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          reservedInstancesId: {
            name: 'ReservedInstancesId'
          }
        }
      }
    },
    rebootInstances: {
      name: 'RebootInstances',
      input: {
        type: 'structure',
        members: {
          InstanceIds: {
            type: 'list',
            members: {
              name: 'InstanceId'
            },
            required: true,
            flattened: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    registerImage: {
      name: 'RegisterImage',
      input: {
        type: 'structure',
        members: {
          ImageLocation: {
          },
          Name: {
          },
          Description: {
          },
          Architecture: {
          },
          KernelId: {
          },
          RamdiskId: {
          },
          RootDeviceName: {
          },
          BlockDeviceMappings: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                VirtualName: {
                },
                DeviceName: {
                },
                Ebs: {
                  type: 'structure',
                  members: {
                    SnapshotId: {
                    },
                    VolumeSize: {
                      type: 'integer'
                    },
                    DeleteOnTermination: {
                      type: 'boolean'
                    },
                    VolumeType: {
                    },
                    Iops: {
                      type: 'integer'
                    }
                  }
                },
                NoDevice: {
                }
              },
              name: 'BlockDeviceMapping'
            },
            flattened: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          imageId: {
            name: 'ImageId'
          }
        }
      }
    },
    releaseAddress: {
      name: 'ReleaseAddress',
      input: {
        type: 'structure',
        members: {
          PublicIp: {
          },
          AllocationId: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    replaceNetworkAclAssociation: {
      name: 'ReplaceNetworkAclAssociation',
      input: {
        type: 'structure',
        members: {
          AssociationId: {
            required: true
          },
          NetworkAclId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          newAssociationId: {
            name: 'NewAssociationId'
          }
        }
      }
    },
    replaceNetworkAclEntry: {
      name: 'ReplaceNetworkAclEntry',
      input: {
        type: 'structure',
        members: {
          NetworkAclId: {
            required: true
          },
          RuleNumber: {
            type: 'integer',
            required: true
          },
          Protocol: {
            required: true
          },
          RuleAction: {
            required: true
          },
          Egress: {
            type: 'boolean',
            required: true
          },
          CidrBlock: {
            required: true
          },
          IcmpTypeCode: {
            type: 'structure',
            members: {
              Type: {
                type: 'integer'
              },
              Code: {
                type: 'integer'
              }
            },
            name: 'Icmp'
          },
          PortRange: {
            type: 'structure',
            members: {
              From: {
                type: 'integer'
              },
              To: {
                type: 'integer'
              }
            }
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    replaceRoute: {
      name: 'ReplaceRoute',
      input: {
        type: 'structure',
        members: {
          RouteTableId: {
            required: true
          },
          DestinationCidrBlock: {
            required: true
          },
          GatewayId: {
          },
          InstanceId: {
          },
          NetworkInterfaceId: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    replaceRouteTableAssociation: {
      name: 'ReplaceRouteTableAssociation',
      input: {
        type: 'structure',
        members: {
          AssociationId: {
            required: true
          },
          RouteTableId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          newAssociationId: {
            name: 'NewAssociationId'
          }
        }
      }
    },
    reportInstanceStatus: {
      name: 'ReportInstanceStatus',
      input: {
        type: 'structure',
        members: {
          Instances: {
            type: 'list',
            members: {
              name: 'InstanceId'
            },
            flattened: true
          },
          Status: {
          },
          StartTime: {
            type: 'timestamp'
          },
          EndTime: {
            type: 'timestamp'
          },
          ReasonCodes: {
            type: 'list',
            members: {
              name: 'ReasonCode'
            },
            flattened: true
          },
          Description: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    requestSpotInstances: {
      name: 'RequestSpotInstances',
      input: {
        type: 'structure',
        members: {
          SpotPrice: {
            required: true
          },
          InstanceCount: {
            type: 'integer'
          },
          Type: {
          },
          ValidFrom: {
            type: 'timestamp'
          },
          ValidUntil: {
            type: 'timestamp'
          },
          LaunchGroup: {
          },
          AvailabilityZoneGroup: {
          },
          LaunchSpecification: {
            type: 'structure',
            members: {
              ImageId: {
              },
              KeyName: {
              },
              UserData: {
              },
              AddressingType: {
              },
              InstanceType: {
              },
              Placement: {
                type: 'structure',
                members: {
                  AvailabilityZone: {
                  },
                  GroupName: {
                  }
                }
              },
              KernelId: {
              },
              RamdiskId: {
              },
              BlockDeviceMappings: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    VirtualName: {
                    },
                    DeviceName: {
                    },
                    Ebs: {
                      type: 'structure',
                      members: {
                        SnapshotId: {
                        },
                        VolumeSize: {
                          type: 'integer'
                        },
                        DeleteOnTermination: {
                          type: 'boolean'
                        },
                        VolumeType: {
                        },
                        Iops: {
                          type: 'integer'
                        }
                      }
                    },
                    NoDevice: {
                    }
                  },
                  name: 'BlockDeviceMapping'
                },
                flattened: true
              },
              MonitoringEnabled: {
                type: 'boolean'
              },
              SubnetId: {
              },
              NetworkInterfaces: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    NetworkInterfaceId: {
                    },
                    DeviceIndex: {
                      type: 'integer'
                    },
                    SubnetId: {
                    },
                    Description: {
                    },
                    PrivateIpAddress: {
                    },
                    Groups: {
                      type: 'list',
                      members: {
                        name: 'SecurityGroupId'
                      },
                      flattened: true
                    },
                    DeleteOnTermination: {
                      type: 'boolean'
                    },
                    PrivateIpAddresses: {
                      type: 'list',
                      members: {
                        type: 'structure',
                        members: {
                          PrivateIpAddress: {
                            required: true
                          },
                          Primary: {
                            type: 'boolean'
                          }
                        },
                        name: 'PrivateIpAddressesSet'
                      },
                      flattened: true
                    },
                    SecondaryPrivateIpAddressCount: {
                      type: 'integer'
                    }
                  },
                  name: 'NetworkInterfaceSet'
                },
                flattened: true
              },
              IamInstanceProfile: {
                type: 'structure',
                members: {
                  Arn: {
                  },
                  Name: {
                  }
                }
              },
              EbsOptimized: {
                type: 'boolean'
              },
              SecurityGroupIds: {
                type: 'list',
                members: {
                  name: 'SecurityGroupId'
                },
                flattened: true
              },
              SecurityGroups: {
                type: 'list',
                members: {
                  name: 'SecurityGroup'
                },
                flattened: true
              }
            }
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          spotInstanceRequestSet: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                spotInstanceRequestId: {
                  name: 'SpotInstanceRequestId'
                },
                spotPrice: {
                  name: 'SpotPrice'
                },
                type: {
                  name: 'Type'
                },
                state: {
                  name: 'State'
                },
                fault: {
                  type: 'structure',
                  members: {
                    code: {
                      name: 'Code'
                    },
                    message: {
                      name: 'Message'
                    }
                  },
                  name: 'Fault'
                },
                status: {
                  type: 'structure',
                  members: {
                    code: {
                      name: 'Code'
                    },
                    updateTime: {
                      type: 'timestamp',
                      name: 'UpdateTime'
                    },
                    message: {
                      name: 'Message'
                    }
                  },
                  name: 'Status'
                },
                validFrom: {
                  type: 'timestamp',
                  name: 'ValidFrom'
                },
                validUntil: {
                  type: 'timestamp',
                  name: 'ValidUntil'
                },
                launchGroup: {
                  name: 'LaunchGroup'
                },
                availabilityZoneGroup: {
                  name: 'AvailabilityZoneGroup'
                },
                launchSpecification: {
                  type: 'structure',
                  members: {
                    imageId: {
                      name: 'ImageId'
                    },
                    keyName: {
                      name: 'KeyName'
                    },
                    groupSet: {
                      type: 'list',
                      members: {
                        type: 'structure',
                        members: {
                          groupName: {
                            name: 'GroupName'
                          },
                          groupId: {
                            name: 'GroupId'
                          }
                        },
                        name: 'item'
                      },
                      name: 'SecurityGroups'
                    },
                    userData: {
                      name: 'UserData'
                    },
                    addressingType: {
                      name: 'AddressingType'
                    },
                    instanceType: {
                      name: 'InstanceType'
                    },
                    placement: {
                      type: 'structure',
                      members: {
                        availabilityZone: {
                          name: 'AvailabilityZone'
                        },
                        groupName: {
                          name: 'GroupName'
                        }
                      },
                      name: 'Placement'
                    },
                    kernelId: {
                      name: 'KernelId'
                    },
                    ramdiskId: {
                      name: 'RamdiskId'
                    },
                    blockDeviceMapping: {
                      type: 'list',
                      members: {
                        type: 'structure',
                        members: {
                          virtualName: {
                            name: 'VirtualName'
                          },
                          deviceName: {
                            name: 'DeviceName'
                          },
                          ebs: {
                            type: 'structure',
                            members: {
                              snapshotId: {
                                name: 'SnapshotId'
                              },
                              volumeSize: {
                                type: 'integer',
                                name: 'VolumeSize'
                              },
                              deleteOnTermination: {
                                type: 'boolean',
                                name: 'DeleteOnTermination'
                              },
                              volumeType: {
                                name: 'VolumeType'
                              },
                              iops: {
                                type: 'integer',
                                name: 'Iops'
                              }
                            },
                            name: 'Ebs'
                          },
                          noDevice: {
                            name: 'NoDevice'
                          }
                        },
                        name: 'item'
                      },
                      name: 'BlockDeviceMappings'
                    },
                    monitoringEnabled: {
                      type: 'boolean',
                      name: 'MonitoringEnabled'
                    },
                    subnetId: {
                      name: 'SubnetId'
                    },
                    networkInterfaceSet: {
                      type: 'list',
                      members: {
                        type: 'structure',
                        members: {
                          networkInterfaceId: {
                            name: 'NetworkInterfaceId'
                          },
                          deviceIndex: {
                            type: 'integer',
                            name: 'DeviceIndex'
                          },
                          subnetId: {
                            name: 'SubnetId'
                          },
                          description: {
                            name: 'Description'
                          },
                          privateIpAddress: {
                            name: 'PrivateIpAddress'
                          },
                          SecurityGroupId: {
                            type: 'list',
                            members: {
                              name: 'SecurityGroupId'
                            },
                            name: 'Groups'
                          },
                          deleteOnTermination: {
                            type: 'boolean',
                            name: 'DeleteOnTermination'
                          },
                          privateIpAddressesSet: {
                            type: 'list',
                            members: {
                              type: 'structure',
                              members: {
                                privateIpAddress: {
                                  name: 'PrivateIpAddress'
                                },
                                primary: {
                                  type: 'boolean',
                                  name: 'Primary'
                                }
                              },
                              name: 'item'
                            },
                            name: 'PrivateIpAddresses'
                          },
                          secondaryPrivateIpAddressCount: {
                            type: 'integer',
                            name: 'SecondaryPrivateIpAddressCount'
                          }
                        },
                        name: 'item'
                      },
                      name: 'NetworkInterfaces'
                    },
                    iamInstanceProfile: {
                      type: 'structure',
                      members: {
                        arn: {
                          name: 'Arn'
                        },
                        name: {
                          name: 'Name'
                        }
                      },
                      name: 'IamInstanceProfile'
                    },
                    ebsOptimized: {
                      type: 'boolean',
                      name: 'EbsOptimized'
                    }
                  },
                  name: 'LaunchSpecification'
                },
                instanceId: {
                  name: 'InstanceId'
                },
                createTime: {
                  type: 'timestamp',
                  name: 'CreateTime'
                },
                productDescription: {
                  name: 'ProductDescription'
                },
                tagSet: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      key: {
                        name: 'Key'
                      },
                      value: {
                        name: 'Value'
                      }
                    },
                    name: 'item'
                  },
                  name: 'Tags'
                },
                launchedAvailabilityZone: {
                  name: 'LaunchedAvailabilityZone'
                }
              },
              name: 'item'
            },
            name: 'SpotInstanceRequests'
          }
        }
      }
    },
    resetImageAttribute: {
      name: 'ResetImageAttribute',
      input: {
        type: 'structure',
        members: {
          ImageId: {
            required: true
          },
          Attribute: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    resetInstanceAttribute: {
      name: 'ResetInstanceAttribute',
      input: {
        type: 'structure',
        members: {
          InstanceId: {
            required: true
          },
          Attribute: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    resetNetworkInterfaceAttribute: {
      name: 'ResetNetworkInterfaceAttribute',
      input: {
        type: 'structure',
        members: {
          NetworkInterfaceId: {
            required: true
          },
          SourceDestCheck: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    resetSnapshotAttribute: {
      name: 'ResetSnapshotAttribute',
      input: {
        type: 'structure',
        members: {
          SnapshotId: {
            required: true
          },
          Attribute: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    revokeSecurityGroupEgress: {
      name: 'RevokeSecurityGroupEgress',
      input: {
        type: 'structure',
        members: {
          GroupId: {
            required: true
          },
          SourceSecurityGroupName: {
          },
          SourceSecurityGroupOwnerId: {
          },
          IpProtocol: {
          },
          FromPort: {
            type: 'integer'
          },
          ToPort: {
            type: 'integer'
          },
          CidrIp: {
          },
          IpPermissions: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                IpProtocol: {
                },
                FromPort: {
                  type: 'integer'
                },
                ToPort: {
                  type: 'integer'
                },
                UserIdGroupPairs: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      UserId: {
                      },
                      GroupName: {
                      },
                      GroupId: {
                      }
                    },
                    name: 'Groups'
                  },
                  flattened: true
                },
                IpRanges: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      CidrIp: {
                      }
                    }
                  },
                  flattened: true
                }
              }
            },
            flattened: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    revokeSecurityGroupIngress: {
      name: 'RevokeSecurityGroupIngress',
      input: {
        type: 'structure',
        members: {
          GroupName: {
          },
          GroupId: {
          },
          SourceSecurityGroupName: {
          },
          SourceSecurityGroupOwnerId: {
          },
          IpProtocol: {
          },
          FromPort: {
            type: 'integer'
          },
          ToPort: {
            type: 'integer'
          },
          CidrIp: {
          },
          IpPermissions: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                IpProtocol: {
                },
                FromPort: {
                  type: 'integer'
                },
                ToPort: {
                  type: 'integer'
                },
                UserIdGroupPairs: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      UserId: {
                      },
                      GroupName: {
                      },
                      GroupId: {
                      }
                    },
                    name: 'Groups'
                  },
                  flattened: true
                },
                IpRanges: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      CidrIp: {
                      }
                    }
                  },
                  flattened: true
                }
              }
            },
            flattened: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    runInstances: {
      name: 'RunInstances',
      input: {
        type: 'structure',
        members: {
          ImageId: {
            required: true
          },
          MinCount: {
            type: 'integer',
            required: true
          },
          MaxCount: {
            type: 'integer',
            required: true
          },
          KeyName: {
          },
          SecurityGroups: {
            type: 'list',
            members: {
              name: 'SecurityGroup'
            },
            flattened: true
          },
          SecurityGroupIds: {
            type: 'list',
            members: {
              name: 'SecurityGroupId'
            },
            flattened: true
          },
          UserData: {
          },
          AddressingType: {
          },
          InstanceType: {
          },
          Placement: {
            type: 'structure',
            members: {
              AvailabilityZone: {
              },
              GroupName: {
              },
              Tenancy: {
              }
            }
          },
          KernelId: {
          },
          RamdiskId: {
          },
          BlockDeviceMappings: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                VirtualName: {
                },
                DeviceName: {
                },
                Ebs: {
                  type: 'structure',
                  members: {
                    SnapshotId: {
                    },
                    VolumeSize: {
                      type: 'integer'
                    },
                    DeleteOnTermination: {
                      type: 'boolean'
                    },
                    VolumeType: {
                    },
                    Iops: {
                      type: 'integer'
                    }
                  }
                },
                NoDevice: {
                }
              },
              name: 'BlockDeviceMapping'
            },
            flattened: true
          },
          Monitoring: {
            type: 'structure',
            members: {
              Enabled: {
                type: 'boolean',
                required: true
              }
            }
          },
          SubnetId: {
          },
          DisableApiTermination: {
            type: 'boolean'
          },
          InstanceInitiatedShutdownBehavior: {
          },
          License: {
            type: 'structure',
            members: {
              Pool: {
              }
            }
          },
          PrivateIpAddress: {
          },
          ClientToken: {
          },
          AdditionalInfo: {
          },
          NetworkInterfaces: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                NetworkInterfaceId: {
                },
                DeviceIndex: {
                  type: 'integer'
                },
                SubnetId: {
                },
                Description: {
                },
                PrivateIpAddress: {
                },
                Groups: {
                  type: 'list',
                  members: {
                    name: 'SecurityGroupId'
                  },
                  flattened: true
                },
                DeleteOnTermination: {
                  type: 'boolean'
                },
                PrivateIpAddresses: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      PrivateIpAddress: {
                        required: true
                      },
                      Primary: {
                        type: 'boolean'
                      }
                    },
                    name: 'PrivateIpAddressesSet'
                  },
                  flattened: true
                },
                SecondaryPrivateIpAddressCount: {
                  type: 'integer'
                }
              },
              name: 'NetworkInterface'
            },
            flattened: true
          },
          IamInstanceProfile: {
            type: 'structure',
            members: {
              Arn: {
              },
              Name: {
              }
            }
          },
          EbsOptimized: {
            type: 'boolean'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          reservationId: {
            name: 'ReservationId'
          },
          ownerId: {
            name: 'OwnerId'
          },
          requesterId: {
            name: 'RequesterId'
          },
          groupSet: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                groupName: {
                  name: 'GroupName'
                },
                groupId: {
                  name: 'GroupId'
                }
              },
              name: 'item'
            },
            name: 'Groups'
          },
          instancesSet: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                instanceId: {
                  name: 'InstanceId'
                },
                imageId: {
                  name: 'ImageId'
                },
                instanceState: {
                  type: 'structure',
                  members: {
                    code: {
                      type: 'integer',
                      name: 'Code'
                    },
                    name: {
                      name: 'Name'
                    }
                  },
                  name: 'State'
                },
                privateDnsName: {
                  name: 'PrivateDnsName'
                },
                dnsName: {
                  name: 'PublicDnsName'
                },
                reason: {
                  name: 'StateTransitionReason'
                },
                keyName: {
                  name: 'KeyName'
                },
                amiLaunchIndex: {
                  type: 'integer',
                  name: 'AmiLaunchIndex'
                },
                productCodes: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      productCode: {
                        name: 'ProductCodeId'
                      },
                      type: {
                        name: 'ProductCodeType'
                      }
                    },
                    name: 'item'
                  },
                  name: 'ProductCodes'
                },
                instanceType: {
                  name: 'InstanceType'
                },
                launchTime: {
                  type: 'timestamp',
                  name: 'LaunchTime'
                },
                placement: {
                  type: 'structure',
                  members: {
                    availabilityZone: {
                      name: 'AvailabilityZone'
                    },
                    groupName: {
                      name: 'GroupName'
                    },
                    tenancy: {
                      name: 'Tenancy'
                    }
                  },
                  name: 'Placement'
                },
                kernelId: {
                  name: 'KernelId'
                },
                ramdiskId: {
                  name: 'RamdiskId'
                },
                platform: {
                  name: 'Platform'
                },
                monitoring: {
                  type: 'structure',
                  members: {
                    state: {
                      name: 'State'
                    }
                  },
                  name: 'Monitoring'
                },
                subnetId: {
                  name: 'SubnetId'
                },
                vpcId: {
                  name: 'VpcId'
                },
                privateIpAddress: {
                  name: 'PrivateIpAddress'
                },
                ipAddress: {
                  name: 'PublicIpAddress'
                },
                stateReason: {
                  type: 'structure',
                  members: {
                    code: {
                      name: 'Code'
                    },
                    message: {
                      name: 'Message'
                    }
                  },
                  name: 'StateReason'
                },
                architecture: {
                  name: 'Architecture'
                },
                rootDeviceType: {
                  name: 'RootDeviceType'
                },
                rootDeviceName: {
                  name: 'RootDeviceName'
                },
                blockDeviceMapping: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      deviceName: {
                        name: 'DeviceName'
                      },
                      ebs: {
                        type: 'structure',
                        members: {
                          volumeId: {
                            name: 'VolumeId'
                          },
                          status: {
                            name: 'Status'
                          },
                          attachTime: {
                            type: 'timestamp',
                            name: 'AttachTime'
                          },
                          deleteOnTermination: {
                            type: 'boolean',
                            name: 'DeleteOnTermination'
                          }
                        },
                        name: 'Ebs'
                      }
                    },
                    name: 'item'
                  },
                  name: 'BlockDeviceMappings'
                },
                virtualizationType: {
                  name: 'VirtualizationType'
                },
                instanceLifecycle: {
                  name: 'InstanceLifecycle'
                },
                spotInstanceRequestId: {
                  name: 'SpotInstanceRequestId'
                },
                license: {
                  type: 'structure',
                  members: {
                    pool: {
                      name: 'Pool'
                    }
                  },
                  name: 'License'
                },
                clientToken: {
                  name: 'ClientToken'
                },
                tagSet: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      key: {
                        name: 'Key'
                      },
                      value: {
                        name: 'Value'
                      }
                    },
                    name: 'item'
                  },
                  name: 'Tags'
                },
                groupSet: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      groupName: {
                        name: 'GroupName'
                      },
                      groupId: {
                        name: 'GroupId'
                      }
                    },
                    name: 'item'
                  },
                  name: 'SecurityGroups'
                },
                sourceDestCheck: {
                  type: 'boolean',
                  name: 'SourceDestCheck'
                },
                hypervisor: {
                  name: 'Hypervisor'
                },
                networkInterfaceSet: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      networkInterfaceId: {
                        name: 'NetworkInterfaceId'
                      },
                      subnetId: {
                        name: 'SubnetId'
                      },
                      vpcId: {
                        name: 'VpcId'
                      },
                      description: {
                        name: 'Description'
                      },
                      ownerId: {
                        name: 'OwnerId'
                      },
                      status: {
                        name: 'Status'
                      },
                      privateIpAddress: {
                        name: 'PrivateIpAddress'
                      },
                      privateDnsName: {
                        name: 'PrivateDnsName'
                      },
                      sourceDestCheck: {
                        type: 'boolean',
                        name: 'SourceDestCheck'
                      },
                      groupSet: {
                        type: 'list',
                        members: {
                          type: 'structure',
                          members: {
                            groupName: {
                              name: 'GroupName'
                            },
                            groupId: {
                              name: 'GroupId'
                            }
                          },
                          name: 'item'
                        },
                        name: 'Groups'
                      },
                      attachment: {
                        type: 'structure',
                        members: {
                          attachmentId: {
                            name: 'AttachmentId'
                          },
                          deviceIndex: {
                            type: 'integer',
                            name: 'DeviceIndex'
                          },
                          status: {
                            name: 'Status'
                          },
                          attachTime: {
                            type: 'timestamp',
                            name: 'AttachTime'
                          },
                          deleteOnTermination: {
                            type: 'boolean',
                            name: 'DeleteOnTermination'
                          }
                        },
                        name: 'Attachment'
                      },
                      association: {
                        type: 'structure',
                        members: {
                          publicIp: {
                            name: 'PublicIp'
                          },
                          ipOwnerId: {
                            name: 'IpOwnerId'
                          }
                        },
                        name: 'Association'
                      }
                    },
                    name: 'item'
                  },
                  name: 'NetworkInterfaces'
                },
                iamInstanceProfile: {
                  type: 'structure',
                  members: {
                    arn: {
                      name: 'Arn'
                    },
                    id: {
                      name: 'Id'
                    }
                  },
                  name: 'IamInstanceProfile'
                },
                ebsOptimized: {
                  type: 'boolean',
                  name: 'EbsOptimized'
                }
              },
              name: 'item'
            },
            name: 'Instances'
          }
        },
        name: 'reservation'
      }
    },
    startInstances: {
      name: 'StartInstances',
      input: {
        type: 'structure',
        members: {
          InstanceIds: {
            type: 'list',
            members: {
              name: 'InstanceId'
            },
            required: true,
            flattened: true
          },
          AdditionalInfo: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          instancesSet: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                instanceId: {
                  name: 'InstanceId'
                },
                currentState: {
                  type: 'structure',
                  members: {
                    code: {
                      type: 'integer',
                      name: 'Code'
                    },
                    name: {
                      name: 'Name'
                    }
                  },
                  name: 'CurrentState'
                },
                previousState: {
                  type: 'structure',
                  members: {
                    code: {
                      type: 'integer',
                      name: 'Code'
                    },
                    name: {
                      name: 'Name'
                    }
                  },
                  name: 'PreviousState'
                }
              },
              name: 'item'
            },
            name: 'StartingInstances'
          }
        }
      }
    },
    stopInstances: {
      name: 'StopInstances',
      input: {
        type: 'structure',
        members: {
          InstanceIds: {
            type: 'list',
            members: {
              name: 'InstanceId'
            },
            required: true,
            flattened: true
          },
          Force: {
            type: 'boolean'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          instancesSet: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                instanceId: {
                  name: 'InstanceId'
                },
                currentState: {
                  type: 'structure',
                  members: {
                    code: {
                      type: 'integer',
                      name: 'Code'
                    },
                    name: {
                      name: 'Name'
                    }
                  },
                  name: 'CurrentState'
                },
                previousState: {
                  type: 'structure',
                  members: {
                    code: {
                      type: 'integer',
                      name: 'Code'
                    },
                    name: {
                      name: 'Name'
                    }
                  },
                  name: 'PreviousState'
                }
              },
              name: 'item'
            },
            name: 'StoppingInstances'
          }
        }
      }
    },
    terminateInstances: {
      name: 'TerminateInstances',
      input: {
        type: 'structure',
        members: {
          InstanceIds: {
            type: 'list',
            members: {
              name: 'InstanceId'
            },
            required: true,
            flattened: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          instancesSet: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                instanceId: {
                  name: 'InstanceId'
                },
                currentState: {
                  type: 'structure',
                  members: {
                    code: {
                      type: 'integer',
                      name: 'Code'
                    },
                    name: {
                      name: 'Name'
                    }
                  },
                  name: 'CurrentState'
                },
                previousState: {
                  type: 'structure',
                  members: {
                    code: {
                      type: 'integer',
                      name: 'Code'
                    },
                    name: {
                      name: 'Name'
                    }
                  },
                  name: 'PreviousState'
                }
              },
              name: 'item'
            },
            name: 'TerminatingInstances'
          }
        }
      }
    },
    unassignPrivateIpAddresses: {
      name: 'UnassignPrivateIpAddresses',
      input: {
        type: 'structure',
        members: {
          NetworkInterfaceId: {
            required: true
          },
          PrivateIpAddresses: {
            type: 'list',
            members: {
              name: 'PrivateIpAddress'
            },
            required: true,
            flattened: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    unmonitorInstances: {
      name: 'UnmonitorInstances',
      input: {
        type: 'structure',
        members: {
          InstanceIds: {
            type: 'list',
            members: {
              name: 'InstanceId'
            },
            required: true,
            flattened: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          instancesSet: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                instanceId: {
                  name: 'InstanceId'
                },
                monitoring: {
                  type: 'structure',
                  members: {
                    state: {
                      name: 'State'
                    }
                  },
                  name: 'Monitoring'
                }
              },
              name: 'item'
            },
            name: 'InstanceMonitorings'
          }
        }
      }
    }
  }
};

},{}],51:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

module.exports = {
  format: 'query',
  apiVersion: '2012-11-15',
  endpointPrefix: 'elasticache',
  resultWrapped: true,
  serviceFullName: 'Amazon ElastiCache',
  signatureVersion: 'v2',
  timestampFormat: 'iso8601',
  operations: {
    authorizeCacheSecurityGroupIngress: {
      name: 'AuthorizeCacheSecurityGroupIngress',
      input: {
        type: 'structure',
        members: {
          CacheSecurityGroupName: {
            required: true
          },
          EC2SecurityGroupName: {
            required: true
          },
          EC2SecurityGroupOwnerId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          CacheSecurityGroup: {
            type: 'structure',
            members: {
              OwnerId: {
              },
              CacheSecurityGroupName: {
              },
              Description: {
              },
              EC2SecurityGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    Status: {
                    },
                    EC2SecurityGroupName: {
                    },
                    EC2SecurityGroupOwnerId: {
                    }
                  },
                  name: 'EC2SecurityGroup'
                }
              }
            },
            wrapper: true
          }
        }
      }
    },
    createCacheCluster: {
      name: 'CreateCacheCluster',
      input: {
        type: 'structure',
        members: {
          CacheClusterId: {
            required: true
          },
          NumCacheNodes: {
            type: 'integer',
            required: true
          },
          CacheNodeType: {
            required: true
          },
          Engine: {
            required: true
          },
          EngineVersion: {
          },
          CacheParameterGroupName: {
          },
          CacheSubnetGroupName: {
          },
          CacheSecurityGroupNames: {
            type: 'list',
            members: {
              name: 'CacheSecurityGroupName'
            }
          },
          SecurityGroupIds: {
            type: 'list',
            members: {
              name: 'SecurityGroupId'
            }
          },
          PreferredAvailabilityZone: {
          },
          PreferredMaintenanceWindow: {
          },
          Port: {
            type: 'integer'
          },
          NotificationTopicArn: {
          },
          AutoMinorVersionUpgrade: {
            type: 'boolean'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          CacheCluster: {
            type: 'structure',
            members: {
              CacheClusterId: {
              },
              ConfigurationEndpoint: {
                type: 'structure',
                members: {
                  Address: {
                  },
                  Port: {
                    type: 'integer'
                  }
                }
              },
              ClientDownloadLandingPage: {
              },
              CacheNodeType: {
              },
              Engine: {
              },
              EngineVersion: {
              },
              CacheClusterStatus: {
              },
              NumCacheNodes: {
                type: 'integer'
              },
              PreferredAvailabilityZone: {
              },
              CacheClusterCreateTime: {
                type: 'timestamp'
              },
              PreferredMaintenanceWindow: {
              },
              PendingModifiedValues: {
                type: 'structure',
                members: {
                  NumCacheNodes: {
                    type: 'integer'
                  },
                  CacheNodeIdsToRemove: {
                    type: 'list',
                    members: {
                      name: 'CacheNodeId'
                    }
                  },
                  EngineVersion: {
                  }
                }
              },
              NotificationConfiguration: {
                type: 'structure',
                members: {
                  TopicArn: {
                  },
                  TopicStatus: {
                  }
                }
              },
              CacheSecurityGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    CacheSecurityGroupName: {
                    },
                    Status: {
                    }
                  },
                  name: 'CacheSecurityGroup'
                }
              },
              CacheParameterGroup: {
                type: 'structure',
                members: {
                  CacheParameterGroupName: {
                  },
                  ParameterApplyStatus: {
                  },
                  CacheNodeIdsToReboot: {
                    type: 'list',
                    members: {
                      name: 'CacheNodeId'
                    }
                  }
                }
              },
              CacheSubnetGroupName: {
              },
              CacheNodes: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    CacheNodeId: {
                    },
                    CacheNodeStatus: {
                    },
                    CacheNodeCreateTime: {
                      type: 'timestamp'
                    },
                    Endpoint: {
                      type: 'structure',
                      members: {
                        Address: {
                        },
                        Port: {
                          type: 'integer'
                        }
                      }
                    },
                    ParameterGroupStatus: {
                    }
                  },
                  name: 'CacheNode'
                }
              },
              AutoMinorVersionUpgrade: {
                type: 'boolean'
              },
              SecurityGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    SecurityGroupId: {
                    },
                    Status: {
                    }
                  }
                }
              }
            },
            wrapper: true
          }
        }
      }
    },
    createCacheParameterGroup: {
      name: 'CreateCacheParameterGroup',
      input: {
        type: 'structure',
        members: {
          CacheParameterGroupName: {
            required: true
          },
          CacheParameterGroupFamily: {
            required: true
          },
          Description: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          CacheParameterGroup: {
            type: 'structure',
            members: {
              CacheParameterGroupName: {
              },
              CacheParameterGroupFamily: {
              },
              Description: {
              }
            },
            wrapper: true
          }
        }
      }
    },
    createCacheSecurityGroup: {
      name: 'CreateCacheSecurityGroup',
      input: {
        type: 'structure',
        members: {
          CacheSecurityGroupName: {
            required: true
          },
          Description: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          CacheSecurityGroup: {
            type: 'structure',
            members: {
              OwnerId: {
              },
              CacheSecurityGroupName: {
              },
              Description: {
              },
              EC2SecurityGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    Status: {
                    },
                    EC2SecurityGroupName: {
                    },
                    EC2SecurityGroupOwnerId: {
                    }
                  },
                  name: 'EC2SecurityGroup'
                }
              }
            },
            wrapper: true
          }
        }
      }
    },
    createCacheSubnetGroup: {
      name: 'CreateCacheSubnetGroup',
      input: {
        type: 'structure',
        members: {
          CacheSubnetGroupName: {
            required: true
          },
          CacheSubnetGroupDescription: {
            required: true
          },
          SubnetIds: {
            type: 'list',
            members: {
              name: 'SubnetIdentifier'
            },
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          CacheSubnetGroup: {
            type: 'structure',
            members: {
              CacheSubnetGroupName: {
              },
              CacheSubnetGroupDescription: {
              },
              VpcId: {
              },
              Subnets: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    SubnetIdentifier: {
                    },
                    SubnetAvailabilityZone: {
                      type: 'structure',
                      members: {
                        Name: {
                        }
                      },
                      wrapper: true
                    }
                  },
                  name: 'Subnet'
                }
              }
            },
            wrapper: true
          }
        }
      }
    },
    deleteCacheCluster: {
      name: 'DeleteCacheCluster',
      input: {
        type: 'structure',
        members: {
          CacheClusterId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          CacheCluster: {
            type: 'structure',
            members: {
              CacheClusterId: {
              },
              ConfigurationEndpoint: {
                type: 'structure',
                members: {
                  Address: {
                  },
                  Port: {
                    type: 'integer'
                  }
                }
              },
              ClientDownloadLandingPage: {
              },
              CacheNodeType: {
              },
              Engine: {
              },
              EngineVersion: {
              },
              CacheClusterStatus: {
              },
              NumCacheNodes: {
                type: 'integer'
              },
              PreferredAvailabilityZone: {
              },
              CacheClusterCreateTime: {
                type: 'timestamp'
              },
              PreferredMaintenanceWindow: {
              },
              PendingModifiedValues: {
                type: 'structure',
                members: {
                  NumCacheNodes: {
                    type: 'integer'
                  },
                  CacheNodeIdsToRemove: {
                    type: 'list',
                    members: {
                      name: 'CacheNodeId'
                    }
                  },
                  EngineVersion: {
                  }
                }
              },
              NotificationConfiguration: {
                type: 'structure',
                members: {
                  TopicArn: {
                  },
                  TopicStatus: {
                  }
                }
              },
              CacheSecurityGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    CacheSecurityGroupName: {
                    },
                    Status: {
                    }
                  },
                  name: 'CacheSecurityGroup'
                }
              },
              CacheParameterGroup: {
                type: 'structure',
                members: {
                  CacheParameterGroupName: {
                  },
                  ParameterApplyStatus: {
                  },
                  CacheNodeIdsToReboot: {
                    type: 'list',
                    members: {
                      name: 'CacheNodeId'
                    }
                  }
                }
              },
              CacheSubnetGroupName: {
              },
              CacheNodes: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    CacheNodeId: {
                    },
                    CacheNodeStatus: {
                    },
                    CacheNodeCreateTime: {
                      type: 'timestamp'
                    },
                    Endpoint: {
                      type: 'structure',
                      members: {
                        Address: {
                        },
                        Port: {
                          type: 'integer'
                        }
                      }
                    },
                    ParameterGroupStatus: {
                    }
                  },
                  name: 'CacheNode'
                }
              },
              AutoMinorVersionUpgrade: {
                type: 'boolean'
              },
              SecurityGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    SecurityGroupId: {
                    },
                    Status: {
                    }
                  }
                }
              }
            },
            wrapper: true
          }
        }
      }
    },
    deleteCacheParameterGroup: {
      name: 'DeleteCacheParameterGroup',
      input: {
        type: 'structure',
        members: {
          CacheParameterGroupName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteCacheSecurityGroup: {
      name: 'DeleteCacheSecurityGroup',
      input: {
        type: 'structure',
        members: {
          CacheSecurityGroupName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteCacheSubnetGroup: {
      name: 'DeleteCacheSubnetGroup',
      input: {
        type: 'structure',
        members: {
          CacheSubnetGroupName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    describeCacheClusters: {
      name: 'DescribeCacheClusters',
      input: {
        type: 'structure',
        members: {
          CacheClusterId: {
          },
          MaxRecords: {
            type: 'integer'
          },
          Marker: {
          },
          ShowCacheNodeInfo: {
            type: 'boolean'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Marker: {
          },
          CacheClusters: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                CacheClusterId: {
                },
                ConfigurationEndpoint: {
                  type: 'structure',
                  members: {
                    Address: {
                    },
                    Port: {
                      type: 'integer'
                    }
                  }
                },
                ClientDownloadLandingPage: {
                },
                CacheNodeType: {
                },
                Engine: {
                },
                EngineVersion: {
                },
                CacheClusterStatus: {
                },
                NumCacheNodes: {
                  type: 'integer'
                },
                PreferredAvailabilityZone: {
                },
                CacheClusterCreateTime: {
                  type: 'timestamp'
                },
                PreferredMaintenanceWindow: {
                },
                PendingModifiedValues: {
                  type: 'structure',
                  members: {
                    NumCacheNodes: {
                      type: 'integer'
                    },
                    CacheNodeIdsToRemove: {
                      type: 'list',
                      members: {
                        name: 'CacheNodeId'
                      }
                    },
                    EngineVersion: {
                    }
                  }
                },
                NotificationConfiguration: {
                  type: 'structure',
                  members: {
                    TopicArn: {
                    },
                    TopicStatus: {
                    }
                  }
                },
                CacheSecurityGroups: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      CacheSecurityGroupName: {
                      },
                      Status: {
                      }
                    },
                    name: 'CacheSecurityGroup'
                  }
                },
                CacheParameterGroup: {
                  type: 'structure',
                  members: {
                    CacheParameterGroupName: {
                    },
                    ParameterApplyStatus: {
                    },
                    CacheNodeIdsToReboot: {
                      type: 'list',
                      members: {
                        name: 'CacheNodeId'
                      }
                    }
                  }
                },
                CacheSubnetGroupName: {
                },
                CacheNodes: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      CacheNodeId: {
                      },
                      CacheNodeStatus: {
                      },
                      CacheNodeCreateTime: {
                        type: 'timestamp'
                      },
                      Endpoint: {
                        type: 'structure',
                        members: {
                          Address: {
                          },
                          Port: {
                            type: 'integer'
                          }
                        }
                      },
                      ParameterGroupStatus: {
                      }
                    },
                    name: 'CacheNode'
                  }
                },
                AutoMinorVersionUpgrade: {
                  type: 'boolean'
                },
                SecurityGroups: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      SecurityGroupId: {
                      },
                      Status: {
                      }
                    }
                  }
                }
              },
              wrapper: true,
              name: 'CacheCluster'
            }
          }
        }
      }
    },
    describeCacheEngineVersions: {
      name: 'DescribeCacheEngineVersions',
      input: {
        type: 'structure',
        members: {
          Engine: {
          },
          EngineVersion: {
          },
          CacheParameterGroupFamily: {
          },
          MaxRecords: {
            type: 'integer'
          },
          Marker: {
          },
          DefaultOnly: {
            type: 'boolean'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Marker: {
          },
          CacheEngineVersions: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Engine: {
                },
                EngineVersion: {
                },
                CacheParameterGroupFamily: {
                },
                CacheEngineDescription: {
                },
                CacheEngineVersionDescription: {
                }
              },
              name: 'CacheEngineVersion'
            }
          }
        }
      }
    },
    describeCacheParameterGroups: {
      name: 'DescribeCacheParameterGroups',
      input: {
        type: 'structure',
        members: {
          CacheParameterGroupName: {
          },
          MaxRecords: {
            type: 'integer'
          },
          Marker: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Marker: {
          },
          CacheParameterGroups: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                CacheParameterGroupName: {
                },
                CacheParameterGroupFamily: {
                },
                Description: {
                }
              },
              wrapper: true,
              name: 'CacheParameterGroup'
            }
          }
        }
      }
    },
    describeCacheParameters: {
      name: 'DescribeCacheParameters',
      input: {
        type: 'structure',
        members: {
          CacheParameterGroupName: {
            required: true
          },
          Source: {
          },
          MaxRecords: {
            type: 'integer'
          },
          Marker: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Marker: {
          },
          Parameters: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                ParameterName: {
                },
                ParameterValue: {
                },
                Description: {
                },
                Source: {
                },
                DataType: {
                },
                AllowedValues: {
                },
                IsModifiable: {
                  type: 'boolean'
                },
                MinimumEngineVersion: {
                }
              },
              name: 'Parameter'
            }
          },
          CacheNodeTypeSpecificParameters: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                ParameterName: {
                },
                Description: {
                },
                Source: {
                },
                DataType: {
                },
                AllowedValues: {
                },
                IsModifiable: {
                  type: 'boolean'
                },
                MinimumEngineVersion: {
                },
                CacheNodeTypeSpecificValues: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      CacheNodeType: {
                      },
                      Value: {
                      }
                    },
                    name: 'CacheNodeTypeSpecificValue'
                  }
                }
              },
              name: 'CacheNodeTypeSpecificParameter'
            }
          }
        }
      }
    },
    describeCacheSecurityGroups: {
      name: 'DescribeCacheSecurityGroups',
      input: {
        type: 'structure',
        members: {
          CacheSecurityGroupName: {
          },
          MaxRecords: {
            type: 'integer'
          },
          Marker: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Marker: {
          },
          CacheSecurityGroups: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                OwnerId: {
                },
                CacheSecurityGroupName: {
                },
                Description: {
                },
                EC2SecurityGroups: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      Status: {
                      },
                      EC2SecurityGroupName: {
                      },
                      EC2SecurityGroupOwnerId: {
                      }
                    },
                    name: 'EC2SecurityGroup'
                  }
                }
              },
              wrapper: true,
              name: 'CacheSecurityGroup'
            }
          }
        }
      }
    },
    describeCacheSubnetGroups: {
      name: 'DescribeCacheSubnetGroups',
      input: {
        type: 'structure',
        members: {
          CacheSubnetGroupName: {
          },
          MaxRecords: {
            type: 'integer'
          },
          Marker: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Marker: {
          },
          CacheSubnetGroups: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                CacheSubnetGroupName: {
                },
                CacheSubnetGroupDescription: {
                },
                VpcId: {
                },
                Subnets: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      SubnetIdentifier: {
                      },
                      SubnetAvailabilityZone: {
                        type: 'structure',
                        members: {
                          Name: {
                          }
                        },
                        wrapper: true
                      }
                    },
                    name: 'Subnet'
                  }
                }
              },
              wrapper: true,
              name: 'CacheSubnetGroup'
            }
          }
        }
      }
    },
    describeEngineDefaultParameters: {
      name: 'DescribeEngineDefaultParameters',
      input: {
        type: 'structure',
        members: {
          CacheParameterGroupFamily: {
            required: true
          },
          MaxRecords: {
            type: 'integer'
          },
          Marker: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          EngineDefaults: {
            type: 'structure',
            members: {
              CacheParameterGroupFamily: {
              },
              Marker: {
              },
              Parameters: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    ParameterName: {
                    },
                    ParameterValue: {
                    },
                    Description: {
                    },
                    Source: {
                    },
                    DataType: {
                    },
                    AllowedValues: {
                    },
                    IsModifiable: {
                      type: 'boolean'
                    },
                    MinimumEngineVersion: {
                    }
                  },
                  name: 'Parameter'
                }
              },
              CacheNodeTypeSpecificParameters: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    ParameterName: {
                    },
                    Description: {
                    },
                    Source: {
                    },
                    DataType: {
                    },
                    AllowedValues: {
                    },
                    IsModifiable: {
                      type: 'boolean'
                    },
                    MinimumEngineVersion: {
                    },
                    CacheNodeTypeSpecificValues: {
                      type: 'list',
                      members: {
                        type: 'structure',
                        members: {
                          CacheNodeType: {
                          },
                          Value: {
                          }
                        },
                        name: 'CacheNodeTypeSpecificValue'
                      }
                    }
                  },
                  name: 'CacheNodeTypeSpecificParameter'
                }
              }
            },
            wrapper: true
          }
        }
      }
    },
    describeEvents: {
      name: 'DescribeEvents',
      input: {
        type: 'structure',
        members: {
          SourceIdentifier: {
          },
          SourceType: {
          },
          StartTime: {
            type: 'timestamp'
          },
          EndTime: {
            type: 'timestamp'
          },
          Duration: {
            type: 'integer'
          },
          MaxRecords: {
            type: 'integer'
          },
          Marker: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Marker: {
          },
          Events: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                SourceIdentifier: {
                },
                SourceType: {
                },
                Message: {
                },
                Date: {
                  type: 'timestamp'
                }
              },
              name: 'Event'
            }
          }
        }
      }
    },
    describeReservedCacheNodes: {
      name: 'DescribeReservedCacheNodes',
      input: {
        type: 'structure',
        members: {
          ReservedCacheNodeId: {
          },
          ReservedCacheNodesOfferingId: {
          },
          CacheNodeType: {
          },
          Duration: {
          },
          ProductDescription: {
          },
          OfferingType: {
          },
          MaxRecords: {
            type: 'integer'
          },
          Marker: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Marker: {
          },
          ReservedCacheNodes: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                ReservedCacheNodeId: {
                },
                ReservedCacheNodesOfferingId: {
                },
                CacheNodeType: {
                },
                StartTime: {
                  type: 'timestamp'
                },
                Duration: {
                  type: 'integer'
                },
                FixedPrice: {
                  type: 'float'
                },
                UsagePrice: {
                  type: 'float'
                },
                CacheNodeCount: {
                  type: 'integer'
                },
                ProductDescription: {
                },
                OfferingType: {
                },
                State: {
                },
                RecurringCharges: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      RecurringChargeAmount: {
                        type: 'float'
                      },
                      RecurringChargeFrequency: {
                      }
                    },
                    wrapper: true,
                    name: 'RecurringCharge'
                  }
                }
              },
              wrapper: true,
              name: 'ReservedCacheNode'
            }
          }
        }
      }
    },
    describeReservedCacheNodesOfferings: {
      name: 'DescribeReservedCacheNodesOfferings',
      input: {
        type: 'structure',
        members: {
          ReservedCacheNodesOfferingId: {
          },
          CacheNodeType: {
          },
          Duration: {
          },
          ProductDescription: {
          },
          OfferingType: {
          },
          MaxRecords: {
            type: 'integer'
          },
          Marker: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Marker: {
          },
          ReservedCacheNodesOfferings: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                ReservedCacheNodesOfferingId: {
                },
                CacheNodeType: {
                },
                Duration: {
                  type: 'integer'
                },
                FixedPrice: {
                  type: 'float'
                },
                UsagePrice: {
                  type: 'float'
                },
                ProductDescription: {
                },
                OfferingType: {
                },
                RecurringCharges: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      RecurringChargeAmount: {
                        type: 'float'
                      },
                      RecurringChargeFrequency: {
                      }
                    },
                    wrapper: true,
                    name: 'RecurringCharge'
                  }
                }
              },
              wrapper: true,
              name: 'ReservedCacheNodesOffering'
            }
          }
        }
      }
    },
    modifyCacheCluster: {
      name: 'ModifyCacheCluster',
      input: {
        type: 'structure',
        members: {
          CacheClusterId: {
            required: true
          },
          NumCacheNodes: {
            type: 'integer'
          },
          CacheNodeIdsToRemove: {
            type: 'list',
            members: {
              name: 'CacheNodeId'
            }
          },
          CacheSecurityGroupNames: {
            type: 'list',
            members: {
              name: 'CacheSecurityGroupName'
            }
          },
          SecurityGroupIds: {
            type: 'list',
            members: {
              name: 'SecurityGroupId'
            }
          },
          PreferredMaintenanceWindow: {
          },
          NotificationTopicArn: {
          },
          CacheParameterGroupName: {
          },
          NotificationTopicStatus: {
          },
          ApplyImmediately: {
            type: 'boolean'
          },
          EngineVersion: {
          },
          AutoMinorVersionUpgrade: {
            type: 'boolean'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          CacheCluster: {
            type: 'structure',
            members: {
              CacheClusterId: {
              },
              ConfigurationEndpoint: {
                type: 'structure',
                members: {
                  Address: {
                  },
                  Port: {
                    type: 'integer'
                  }
                }
              },
              ClientDownloadLandingPage: {
              },
              CacheNodeType: {
              },
              Engine: {
              },
              EngineVersion: {
              },
              CacheClusterStatus: {
              },
              NumCacheNodes: {
                type: 'integer'
              },
              PreferredAvailabilityZone: {
              },
              CacheClusterCreateTime: {
                type: 'timestamp'
              },
              PreferredMaintenanceWindow: {
              },
              PendingModifiedValues: {
                type: 'structure',
                members: {
                  NumCacheNodes: {
                    type: 'integer'
                  },
                  CacheNodeIdsToRemove: {
                    type: 'list',
                    members: {
                      name: 'CacheNodeId'
                    }
                  },
                  EngineVersion: {
                  }
                }
              },
              NotificationConfiguration: {
                type: 'structure',
                members: {
                  TopicArn: {
                  },
                  TopicStatus: {
                  }
                }
              },
              CacheSecurityGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    CacheSecurityGroupName: {
                    },
                    Status: {
                    }
                  },
                  name: 'CacheSecurityGroup'
                }
              },
              CacheParameterGroup: {
                type: 'structure',
                members: {
                  CacheParameterGroupName: {
                  },
                  ParameterApplyStatus: {
                  },
                  CacheNodeIdsToReboot: {
                    type: 'list',
                    members: {
                      name: 'CacheNodeId'
                    }
                  }
                }
              },
              CacheSubnetGroupName: {
              },
              CacheNodes: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    CacheNodeId: {
                    },
                    CacheNodeStatus: {
                    },
                    CacheNodeCreateTime: {
                      type: 'timestamp'
                    },
                    Endpoint: {
                      type: 'structure',
                      members: {
                        Address: {
                        },
                        Port: {
                          type: 'integer'
                        }
                      }
                    },
                    ParameterGroupStatus: {
                    }
                  },
                  name: 'CacheNode'
                }
              },
              AutoMinorVersionUpgrade: {
                type: 'boolean'
              },
              SecurityGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    SecurityGroupId: {
                    },
                    Status: {
                    }
                  }
                }
              }
            },
            wrapper: true
          }
        }
      }
    },
    modifyCacheParameterGroup: {
      name: 'ModifyCacheParameterGroup',
      input: {
        type: 'structure',
        members: {
          CacheParameterGroupName: {
            required: true
          },
          ParameterNameValues: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                ParameterName: {
                },
                ParameterValue: {
                }
              },
              name: 'ParameterNameValue'
            },
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          CacheParameterGroupName: {
          }
        }
      }
    },
    modifyCacheSubnetGroup: {
      name: 'ModifyCacheSubnetGroup',
      input: {
        type: 'structure',
        members: {
          CacheSubnetGroupName: {
            required: true
          },
          CacheSubnetGroupDescription: {
          },
          SubnetIds: {
            type: 'list',
            members: {
              name: 'SubnetIdentifier'
            }
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          CacheSubnetGroup: {
            type: 'structure',
            members: {
              CacheSubnetGroupName: {
              },
              CacheSubnetGroupDescription: {
              },
              VpcId: {
              },
              Subnets: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    SubnetIdentifier: {
                    },
                    SubnetAvailabilityZone: {
                      type: 'structure',
                      members: {
                        Name: {
                        }
                      },
                      wrapper: true
                    }
                  },
                  name: 'Subnet'
                }
              }
            },
            wrapper: true
          }
        }
      }
    },
    purchaseReservedCacheNodesOffering: {
      name: 'PurchaseReservedCacheNodesOffering',
      input: {
        type: 'structure',
        members: {
          ReservedCacheNodesOfferingId: {
            required: true
          },
          ReservedCacheNodeId: {
          },
          CacheNodeCount: {
            type: 'integer'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          ReservedCacheNode: {
            type: 'structure',
            members: {
              ReservedCacheNodeId: {
              },
              ReservedCacheNodesOfferingId: {
              },
              CacheNodeType: {
              },
              StartTime: {
                type: 'timestamp'
              },
              Duration: {
                type: 'integer'
              },
              FixedPrice: {
                type: 'float'
              },
              UsagePrice: {
                type: 'float'
              },
              CacheNodeCount: {
                type: 'integer'
              },
              ProductDescription: {
              },
              OfferingType: {
              },
              State: {
              },
              RecurringCharges: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    RecurringChargeAmount: {
                      type: 'float'
                    },
                    RecurringChargeFrequency: {
                    }
                  },
                  wrapper: true,
                  name: 'RecurringCharge'
                }
              }
            },
            wrapper: true
          }
        }
      }
    },
    rebootCacheCluster: {
      name: 'RebootCacheCluster',
      input: {
        type: 'structure',
        members: {
          CacheClusterId: {
            required: true
          },
          CacheNodeIdsToReboot: {
            type: 'list',
            members: {
              name: 'CacheNodeId'
            },
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          CacheCluster: {
            type: 'structure',
            members: {
              CacheClusterId: {
              },
              ConfigurationEndpoint: {
                type: 'structure',
                members: {
                  Address: {
                  },
                  Port: {
                    type: 'integer'
                  }
                }
              },
              ClientDownloadLandingPage: {
              },
              CacheNodeType: {
              },
              Engine: {
              },
              EngineVersion: {
              },
              CacheClusterStatus: {
              },
              NumCacheNodes: {
                type: 'integer'
              },
              PreferredAvailabilityZone: {
              },
              CacheClusterCreateTime: {
                type: 'timestamp'
              },
              PreferredMaintenanceWindow: {
              },
              PendingModifiedValues: {
                type: 'structure',
                members: {
                  NumCacheNodes: {
                    type: 'integer'
                  },
                  CacheNodeIdsToRemove: {
                    type: 'list',
                    members: {
                      name: 'CacheNodeId'
                    }
                  },
                  EngineVersion: {
                  }
                }
              },
              NotificationConfiguration: {
                type: 'structure',
                members: {
                  TopicArn: {
                  },
                  TopicStatus: {
                  }
                }
              },
              CacheSecurityGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    CacheSecurityGroupName: {
                    },
                    Status: {
                    }
                  },
                  name: 'CacheSecurityGroup'
                }
              },
              CacheParameterGroup: {
                type: 'structure',
                members: {
                  CacheParameterGroupName: {
                  },
                  ParameterApplyStatus: {
                  },
                  CacheNodeIdsToReboot: {
                    type: 'list',
                    members: {
                      name: 'CacheNodeId'
                    }
                  }
                }
              },
              CacheSubnetGroupName: {
              },
              CacheNodes: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    CacheNodeId: {
                    },
                    CacheNodeStatus: {
                    },
                    CacheNodeCreateTime: {
                      type: 'timestamp'
                    },
                    Endpoint: {
                      type: 'structure',
                      members: {
                        Address: {
                        },
                        Port: {
                          type: 'integer'
                        }
                      }
                    },
                    ParameterGroupStatus: {
                    }
                  },
                  name: 'CacheNode'
                }
              },
              AutoMinorVersionUpgrade: {
                type: 'boolean'
              },
              SecurityGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    SecurityGroupId: {
                    },
                    Status: {
                    }
                  }
                }
              }
            },
            wrapper: true
          }
        }
      }
    },
    resetCacheParameterGroup: {
      name: 'ResetCacheParameterGroup',
      input: {
        type: 'structure',
        members: {
          CacheParameterGroupName: {
            required: true
          },
          ResetAllParameters: {
            type: 'boolean'
          },
          ParameterNameValues: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                ParameterName: {
                },
                ParameterValue: {
                }
              },
              name: 'ParameterNameValue'
            },
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          CacheParameterGroupName: {
          }
        }
      }
    },
    revokeCacheSecurityGroupIngress: {
      name: 'RevokeCacheSecurityGroupIngress',
      input: {
        type: 'structure',
        members: {
          CacheSecurityGroupName: {
            required: true
          },
          EC2SecurityGroupName: {
            required: true
          },
          EC2SecurityGroupOwnerId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          CacheSecurityGroup: {
            type: 'structure',
            members: {
              OwnerId: {
              },
              CacheSecurityGroupName: {
              },
              Description: {
              },
              EC2SecurityGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    Status: {
                    },
                    EC2SecurityGroupName: {
                    },
                    EC2SecurityGroupOwnerId: {
                    }
                  },
                  name: 'EC2SecurityGroup'
                }
              }
            },
            wrapper: true
          }
        }
      }
    }
  }
};

},{}],52:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

module.exports = {
  format: 'query',
  apiVersion: '2010-12-01',
  endpointPrefix: 'elasticbeanstalk',
  resultWrapped: true,
  serviceAbbreviation: 'Elastic Beanstalk',
  serviceFullName: 'AWS Elastic Beanstalk',
  signatureVersion: 'v4',
  timestampFormat: 'iso8601',
  operations: {
    checkDNSAvailability: {
      name: 'CheckDNSAvailability',
      input: {
        type: 'structure',
        members: {
          CNAMEPrefix: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Available: {
            type: 'boolean'
          },
          FullyQualifiedCNAME: {
          }
        }
      }
    },
    createApplication: {
      name: 'CreateApplication',
      input: {
        type: 'structure',
        members: {
          ApplicationName: {
            required: true
          },
          Description: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Application: {
            type: 'structure',
            members: {
              ApplicationName: {
              },
              Description: {
              },
              DateCreated: {
                type: 'timestamp'
              },
              DateUpdated: {
                type: 'timestamp'
              },
              Versions: {
                type: 'list'
              },
              ConfigurationTemplates: {
                type: 'list'
              }
            }
          }
        }
      }
    },
    createApplicationVersion: {
      name: 'CreateApplicationVersion',
      input: {
        type: 'structure',
        members: {
          ApplicationName: {
            required: true
          },
          VersionLabel: {
            required: true
          },
          Description: {
          },
          SourceBundle: {
            type: 'structure',
            members: {
              S3Bucket: {
              },
              S3Key: {
              }
            }
          },
          AutoCreateApplication: {
            type: 'boolean'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          ApplicationVersion: {
            type: 'structure',
            members: {
              ApplicationName: {
              },
              Description: {
              },
              VersionLabel: {
              },
              SourceBundle: {
                type: 'structure',
                members: {
                  S3Bucket: {
                  },
                  S3Key: {
                  }
                }
              },
              DateCreated: {
                type: 'timestamp'
              },
              DateUpdated: {
                type: 'timestamp'
              }
            }
          }
        }
      }
    },
    createConfigurationTemplate: {
      name: 'CreateConfigurationTemplate',
      input: {
        type: 'structure',
        members: {
          ApplicationName: {
            required: true
          },
          TemplateName: {
            required: true
          },
          SolutionStackName: {
          },
          SourceConfiguration: {
            type: 'structure',
            members: {
              ApplicationName: {
              },
              TemplateName: {
              }
            }
          },
          EnvironmentId: {
          },
          Description: {
          },
          OptionSettings: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Namespace: {
                },
                OptionName: {
                },
                Value: {
                }
              }
            }
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          SolutionStackName: {
          },
          ApplicationName: {
          },
          TemplateName: {
          },
          Description: {
          },
          EnvironmentName: {
          },
          DeploymentStatus: {
          },
          DateCreated: {
            type: 'timestamp'
          },
          DateUpdated: {
            type: 'timestamp'
          },
          OptionSettings: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Namespace: {
                },
                OptionName: {
                },
                Value: {
                }
              }
            }
          }
        }
      }
    },
    createEnvironment: {
      name: 'CreateEnvironment',
      input: {
        type: 'structure',
        members: {
          ApplicationName: {
            required: true
          },
          VersionLabel: {
          },
          EnvironmentName: {
            required: true
          },
          TemplateName: {
          },
          SolutionStackName: {
          },
          CNAMEPrefix: {
          },
          Description: {
          },
          OptionSettings: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Namespace: {
                },
                OptionName: {
                },
                Value: {
                }
              }
            }
          },
          OptionsToRemove: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Namespace: {
                },
                OptionName: {
                }
              }
            }
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          EnvironmentName: {
          },
          EnvironmentId: {
          },
          ApplicationName: {
          },
          VersionLabel: {
          },
          SolutionStackName: {
          },
          TemplateName: {
          },
          Description: {
          },
          EndpointURL: {
          },
          CNAME: {
          },
          DateCreated: {
            type: 'timestamp'
          },
          DateUpdated: {
            type: 'timestamp'
          },
          Status: {
          },
          Health: {
          },
          Resources: {
            type: 'structure',
            members: {
              LoadBalancer: {
                type: 'structure',
                members: {
                  LoadBalancerName: {
                  },
                  Domain: {
                  },
                  Listeners: {
                    type: 'list',
                    members: {
                      type: 'structure',
                      members: {
                        Protocol: {
                        },
                        Port: {
                          type: 'integer'
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    createStorageLocation: {
      name: 'CreateStorageLocation',
      input: {
        type: 'structure',
        members: {
        }
      },
      output: {
        type: 'structure',
        members: {
          S3Bucket: {
          }
        }
      }
    },
    deleteApplication: {
      name: 'DeleteApplication',
      input: {
        type: 'structure',
        members: {
          ApplicationName: {
            required: true
          },
          TerminateEnvByForce: {
            type: 'boolean'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteApplicationVersion: {
      name: 'DeleteApplicationVersion',
      input: {
        type: 'structure',
        members: {
          ApplicationName: {
            required: true
          },
          VersionLabel: {
            required: true
          },
          DeleteSourceBundle: {
            type: 'boolean'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteConfigurationTemplate: {
      name: 'DeleteConfigurationTemplate',
      input: {
        type: 'structure',
        members: {
          ApplicationName: {
            required: true
          },
          TemplateName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteEnvironmentConfiguration: {
      name: 'DeleteEnvironmentConfiguration',
      input: {
        type: 'structure',
        members: {
          ApplicationName: {
            required: true
          },
          EnvironmentName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    describeApplicationVersions: {
      name: 'DescribeApplicationVersions',
      input: {
        type: 'structure',
        members: {
          ApplicationName: {
          },
          VersionLabels: {
            type: 'list'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          ApplicationVersions: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                ApplicationName: {
                },
                Description: {
                },
                VersionLabel: {
                },
                SourceBundle: {
                  type: 'structure',
                  members: {
                    S3Bucket: {
                    },
                    S3Key: {
                    }
                  }
                },
                DateCreated: {
                  type: 'timestamp'
                },
                DateUpdated: {
                  type: 'timestamp'
                }
              }
            }
          }
        }
      }
    },
    describeApplications: {
      name: 'DescribeApplications',
      input: {
        type: 'structure',
        members: {
          ApplicationNames: {
            type: 'list'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Applications: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                ApplicationName: {
                },
                Description: {
                },
                DateCreated: {
                  type: 'timestamp'
                },
                DateUpdated: {
                  type: 'timestamp'
                },
                Versions: {
                  type: 'list'
                },
                ConfigurationTemplates: {
                  type: 'list'
                }
              }
            }
          }
        }
      }
    },
    describeConfigurationOptions: {
      name: 'DescribeConfigurationOptions',
      input: {
        type: 'structure',
        members: {
          ApplicationName: {
          },
          TemplateName: {
          },
          EnvironmentName: {
          },
          SolutionStackName: {
          },
          Options: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Namespace: {
                },
                OptionName: {
                }
              }
            }
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          SolutionStackName: {
          },
          Options: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Namespace: {
                },
                Name: {
                },
                DefaultValue: {
                },
                ChangeSeverity: {
                },
                UserDefined: {
                  type: 'boolean'
                },
                ValueType: {
                },
                ValueOptions: {
                  type: 'list'
                },
                MinValue: {
                  type: 'integer'
                },
                MaxValue: {
                  type: 'integer'
                },
                MaxLength: {
                  type: 'integer'
                },
                Regex: {
                  type: 'structure',
                  members: {
                    Pattern: {
                    },
                    Label: {
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    describeConfigurationSettings: {
      name: 'DescribeConfigurationSettings',
      input: {
        type: 'structure',
        members: {
          ApplicationName: {
            required: true
          },
          TemplateName: {
          },
          EnvironmentName: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          ConfigurationSettings: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                SolutionStackName: {
                },
                ApplicationName: {
                },
                TemplateName: {
                },
                Description: {
                },
                EnvironmentName: {
                },
                DeploymentStatus: {
                },
                DateCreated: {
                  type: 'timestamp'
                },
                DateUpdated: {
                  type: 'timestamp'
                },
                OptionSettings: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      Namespace: {
                      },
                      OptionName: {
                      },
                      Value: {
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    describeEnvironmentResources: {
      name: 'DescribeEnvironmentResources',
      input: {
        type: 'structure',
        members: {
          EnvironmentId: {
          },
          EnvironmentName: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          EnvironmentResources: {
            type: 'structure',
            members: {
              EnvironmentName: {
              },
              AutoScalingGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    Name: {
                    }
                  }
                }
              },
              Instances: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    Id: {
                    }
                  }
                }
              },
              LaunchConfigurations: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    Name: {
                    }
                  }
                }
              },
              LoadBalancers: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    Name: {
                    }
                  }
                }
              },
              Triggers: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    Name: {
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    describeEnvironments: {
      name: 'DescribeEnvironments',
      input: {
        type: 'structure',
        members: {
          ApplicationName: {
          },
          VersionLabel: {
          },
          EnvironmentIds: {
            type: 'list'
          },
          EnvironmentNames: {
            type: 'list'
          },
          IncludeDeleted: {
            type: 'boolean'
          },
          IncludedDeletedBackTo: {
            type: 'timestamp'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Environments: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                EnvironmentName: {
                },
                EnvironmentId: {
                },
                ApplicationName: {
                },
                VersionLabel: {
                },
                SolutionStackName: {
                },
                TemplateName: {
                },
                Description: {
                },
                EndpointURL: {
                },
                CNAME: {
                },
                DateCreated: {
                  type: 'timestamp'
                },
                DateUpdated: {
                  type: 'timestamp'
                },
                Status: {
                },
                Health: {
                },
                Resources: {
                  type: 'structure',
                  members: {
                    LoadBalancer: {
                      type: 'structure',
                      members: {
                        LoadBalancerName: {
                        },
                        Domain: {
                        },
                        Listeners: {
                          type: 'list',
                          members: {
                            type: 'structure',
                            members: {
                              Protocol: {
                              },
                              Port: {
                                type: 'integer'
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    describeEvents: {
      name: 'DescribeEvents',
      input: {
        type: 'structure',
        members: {
          ApplicationName: {
          },
          VersionLabel: {
          },
          TemplateName: {
          },
          EnvironmentId: {
          },
          EnvironmentName: {
          },
          RequestId: {
          },
          Severity: {
          },
          StartTime: {
            type: 'timestamp'
          },
          EndTime: {
            type: 'timestamp'
          },
          MaxRecords: {
            type: 'integer'
          },
          NextToken: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Events: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                EventDate: {
                  type: 'timestamp'
                },
                Message: {
                },
                ApplicationName: {
                },
                VersionLabel: {
                },
                TemplateName: {
                },
                EnvironmentName: {
                },
                RequestId: {
                },
                Severity: {
                }
              }
            }
          },
          NextToken: {
          }
        }
      }
    },
    listAvailableSolutionStacks: {
      name: 'ListAvailableSolutionStacks',
      input: {
        type: 'structure',
        members: {
        }
      },
      output: {
        type: 'structure',
        members: {
          SolutionStacks: {
            type: 'list'
          },
          SolutionStackDetails: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                SolutionStackName: {
                },
                PermittedFileTypes: {
                  type: 'list'
                }
              }
            }
          }
        }
      }
    },
    rebuildEnvironment: {
      name: 'RebuildEnvironment',
      input: {
        type: 'structure',
        members: {
          EnvironmentId: {
          },
          EnvironmentName: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    requestEnvironmentInfo: {
      name: 'RequestEnvironmentInfo',
      input: {
        type: 'structure',
        members: {
          EnvironmentId: {
          },
          EnvironmentName: {
          },
          InfoType: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    restartAppServer: {
      name: 'RestartAppServer',
      input: {
        type: 'structure',
        members: {
          EnvironmentId: {
          },
          EnvironmentName: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    retrieveEnvironmentInfo: {
      name: 'RetrieveEnvironmentInfo',
      input: {
        type: 'structure',
        members: {
          EnvironmentId: {
          },
          EnvironmentName: {
          },
          InfoType: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          EnvironmentInfo: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                InfoType: {
                },
                Ec2InstanceId: {
                },
                SampleTimestamp: {
                  type: 'timestamp'
                },
                Message: {
                }
              }
            }
          }
        }
      }
    },
    swapEnvironmentCNAMEs: {
      name: 'SwapEnvironmentCNAMEs',
      input: {
        type: 'structure',
        members: {
          SourceEnvironmentId: {
          },
          SourceEnvironmentName: {
          },
          DestinationEnvironmentId: {
          },
          DestinationEnvironmentName: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    terminateEnvironment: {
      name: 'TerminateEnvironment',
      input: {
        type: 'structure',
        members: {
          EnvironmentId: {
          },
          EnvironmentName: {
          },
          TerminateResources: {
            type: 'boolean'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          EnvironmentName: {
          },
          EnvironmentId: {
          },
          ApplicationName: {
          },
          VersionLabel: {
          },
          SolutionStackName: {
          },
          TemplateName: {
          },
          Description: {
          },
          EndpointURL: {
          },
          CNAME: {
          },
          DateCreated: {
            type: 'timestamp'
          },
          DateUpdated: {
            type: 'timestamp'
          },
          Status: {
          },
          Health: {
          },
          Resources: {
            type: 'structure',
            members: {
              LoadBalancer: {
                type: 'structure',
                members: {
                  LoadBalancerName: {
                  },
                  Domain: {
                  },
                  Listeners: {
                    type: 'list',
                    members: {
                      type: 'structure',
                      members: {
                        Protocol: {
                        },
                        Port: {
                          type: 'integer'
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    updateApplication: {
      name: 'UpdateApplication',
      input: {
        type: 'structure',
        members: {
          ApplicationName: {
            required: true
          },
          Description: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Application: {
            type: 'structure',
            members: {
              ApplicationName: {
              },
              Description: {
              },
              DateCreated: {
                type: 'timestamp'
              },
              DateUpdated: {
                type: 'timestamp'
              },
              Versions: {
                type: 'list'
              },
              ConfigurationTemplates: {
                type: 'list'
              }
            }
          }
        }
      }
    },
    updateApplicationVersion: {
      name: 'UpdateApplicationVersion',
      input: {
        type: 'structure',
        members: {
          ApplicationName: {
            required: true
          },
          VersionLabel: {
            required: true
          },
          Description: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          ApplicationVersion: {
            type: 'structure',
            members: {
              ApplicationName: {
              },
              Description: {
              },
              VersionLabel: {
              },
              SourceBundle: {
                type: 'structure',
                members: {
                  S3Bucket: {
                  },
                  S3Key: {
                  }
                }
              },
              DateCreated: {
                type: 'timestamp'
              },
              DateUpdated: {
                type: 'timestamp'
              }
            }
          }
        }
      }
    },
    updateConfigurationTemplate: {
      name: 'UpdateConfigurationTemplate',
      input: {
        type: 'structure',
        members: {
          ApplicationName: {
            required: true
          },
          TemplateName: {
            required: true
          },
          Description: {
          },
          OptionSettings: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Namespace: {
                },
                OptionName: {
                },
                Value: {
                }
              }
            }
          },
          OptionsToRemove: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Namespace: {
                },
                OptionName: {
                }
              }
            }
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          SolutionStackName: {
          },
          ApplicationName: {
          },
          TemplateName: {
          },
          Description: {
          },
          EnvironmentName: {
          },
          DeploymentStatus: {
          },
          DateCreated: {
            type: 'timestamp'
          },
          DateUpdated: {
            type: 'timestamp'
          },
          OptionSettings: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Namespace: {
                },
                OptionName: {
                },
                Value: {
                }
              }
            }
          }
        }
      }
    },
    updateEnvironment: {
      name: 'UpdateEnvironment',
      input: {
        type: 'structure',
        members: {
          EnvironmentId: {
          },
          EnvironmentName: {
          },
          VersionLabel: {
          },
          TemplateName: {
          },
          Description: {
          },
          OptionSettings: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Namespace: {
                },
                OptionName: {
                },
                Value: {
                }
              }
            }
          },
          OptionsToRemove: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Namespace: {
                },
                OptionName: {
                }
              }
            }
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          EnvironmentName: {
          },
          EnvironmentId: {
          },
          ApplicationName: {
          },
          VersionLabel: {
          },
          SolutionStackName: {
          },
          TemplateName: {
          },
          Description: {
          },
          EndpointURL: {
          },
          CNAME: {
          },
          DateCreated: {
            type: 'timestamp'
          },
          DateUpdated: {
            type: 'timestamp'
          },
          Status: {
          },
          Health: {
          },
          Resources: {
            type: 'structure',
            members: {
              LoadBalancer: {
                type: 'structure',
                members: {
                  LoadBalancerName: {
                  },
                  Domain: {
                  },
                  Listeners: {
                    type: 'list',
                    members: {
                      type: 'structure',
                      members: {
                        Protocol: {
                        },
                        Port: {
                          type: 'integer'
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    validateConfigurationSettings: {
      name: 'ValidateConfigurationSettings',
      input: {
        type: 'structure',
        members: {
          ApplicationName: {
            required: true
          },
          TemplateName: {
          },
          EnvironmentName: {
          },
          OptionSettings: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Namespace: {
                },
                OptionName: {
                },
                Value: {
                }
              }
            },
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Messages: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Message: {
                },
                Severity: {
                },
                Namespace: {
                },
                OptionName: {
                }
              }
            }
          }
        }
      }
    }
  }
};

},{}],53:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

module.exports = {
  format: 'rest-json',
  apiVersion: '2012-09-25',
  endpointPrefix: 'elastictranscoder',
  serviceFullName: 'Amazon Elastic Transcoder',
  signatureVersion: 'v4',
  signingName: 'elastictranscoder',
  timestampFormat: 'iso8601',
  operations: {
    cancelJob: {
      name: 'CancelJob',
      http: {
        method: 'DELETE',
        uri: '/2012-09-25/jobs/{Id}'
      },
      input: {
        type: 'structure',
        members: {
          Id: {
            required: true,
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure'
      }
    },
    createJob: {
      name: 'CreateJob',
      http: {
        method: 'POST',
        uri: '/2012-09-25/jobs'
      },
      input: {
        type: 'structure',
        members: {
          PipelineId: {
            required: true
          },
          Input: {
            type: 'structure',
            members: {
              Key: {
              },
              FrameRate: {
              },
              Resolution: {
              },
              AspectRatio: {
              },
              Interlaced: {
              },
              Container: {
              }
            },
            required: true
          },
          Output: {
            type: 'structure',
            members: {
              Key: {
              },
              ThumbnailPattern: {
              },
              Rotate: {
              },
              PresetId: {
              }
            },
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Job: {
            type: 'structure',
            members: {
              Id: {
              },
              PipelineId: {
              },
              Input: {
                type: 'structure',
                members: {
                  Key: {
                  },
                  FrameRate: {
                  },
                  Resolution: {
                  },
                  AspectRatio: {
                  },
                  Interlaced: {
                  },
                  Container: {
                  }
                }
              },
              Output: {
                type: 'structure',
                members: {
                  Key: {
                  },
                  ThumbnailPattern: {
                  },
                  Rotate: {
                  },
                  PresetId: {
                  },
                  Status: {
                  },
                  StatusDetail: {
                  }
                }
              }
            }
          }
        }
      }
    },
    createPipeline: {
      name: 'CreatePipeline',
      http: {
        method: 'POST',
        uri: '/2012-09-25/pipelines'
      },
      input: {
        type: 'structure',
        members: {
          Name: {
            required: true
          },
          InputBucket: {
            required: true
          },
          OutputBucket: {
            required: true
          },
          Role: {
            required: true
          },
          Notifications: {
            type: 'structure',
            members: {
              Progressing: {
              },
              Completed: {
              },
              Warning: {
              },
              Error: {
              }
            },
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Pipeline: {
            type: 'structure',
            members: {
              Id: {
              },
              Name: {
              },
              Status: {
              },
              InputBucket: {
              },
              OutputBucket: {
              },
              Role: {
              },
              Notifications: {
                type: 'structure',
                members: {
                  Progressing: {
                  },
                  Completed: {
                  },
                  Warning: {
                  },
                  Error: {
                  }
                }
              }
            }
          }
        }
      }
    },
    createPreset: {
      name: 'CreatePreset',
      http: {
        method: 'POST',
        uri: '/2012-09-25/presets'
      },
      input: {
        type: 'structure',
        members: {
          Name: {
            required: true
          },
          Description: {
          },
          Container: {
            required: true
          },
          Video: {
            type: 'structure',
            members: {
              Codec: {
              },
              CodecOptions: {
                type: 'map'
              },
              KeyframesMaxDist: {
              },
              FixedGOP: {
              },
              BitRate: {
              },
              FrameRate: {
              },
              Resolution: {
              },
              AspectRatio: {
              }
            },
            required: true
          },
          Audio: {
            type: 'structure',
            members: {
              Codec: {
              },
              SampleRate: {
              },
              BitRate: {
              },
              Channels: {
              }
            },
            required: true
          },
          Thumbnails: {
            type: 'structure',
            members: {
              Format: {
              },
              Interval: {
              },
              Resolution: {
              },
              AspectRatio: {
              }
            },
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Preset: {
            type: 'structure',
            members: {
              Id: {
              },
              Name: {
              },
              Description: {
              },
              Container: {
              },
              Audio: {
                type: 'structure',
                members: {
                  Codec: {
                  },
                  SampleRate: {
                  },
                  BitRate: {
                  },
                  Channels: {
                  }
                }
              },
              Video: {
                type: 'structure',
                members: {
                  Codec: {
                  },
                  CodecOptions: {
                    type: 'map'
                  },
                  KeyframesMaxDist: {
                  },
                  FixedGOP: {
                  },
                  BitRate: {
                  },
                  FrameRate: {
                  },
                  Resolution: {
                  },
                  AspectRatio: {
                  }
                }
              },
              Thumbnails: {
                type: 'structure',
                members: {
                  Format: {
                  },
                  Interval: {
                  },
                  Resolution: {
                  },
                  AspectRatio: {
                  }
                }
              },
              Type: {
              }
            }
          },
          Warning: {
          }
        }
      }
    },
    deletePipeline: {
      name: 'DeletePipeline',
      http: {
        method: 'DELETE',
        uri: '/2012-09-25/pipelines/{Id}'
      },
      input: {
        type: 'structure',
        members: {
          Id: {
            required: true,
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure'
      }
    },
    deletePreset: {
      name: 'DeletePreset',
      http: {
        method: 'DELETE',
        uri: '/2012-09-25/presets/{Id}'
      },
      input: {
        type: 'structure',
        members: {
          Id: {
            required: true,
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure'
      }
    },
    listJobsByPipeline: {
      name: 'ListJobsByPipeline',
      http: {
        method: 'GET',
        uri: '/2012-09-25/jobsByPipeline/{PipelineId}?Ascending={Ascending}&PageToken={PageToken}'
      },
      input: {
        type: 'structure',
        members: {
          PipelineId: {
            required: true,
            location: 'uri'
          },
          Ascending: {
            location: 'uri'
          },
          PageToken: {
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Jobs: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Id: {
                },
                PipelineId: {
                },
                Input: {
                  type: 'structure',
                  members: {
                    Key: {
                    },
                    FrameRate: {
                    },
                    Resolution: {
                    },
                    AspectRatio: {
                    },
                    Interlaced: {
                    },
                    Container: {
                    }
                  }
                },
                Output: {
                  type: 'structure',
                  members: {
                    Key: {
                    },
                    ThumbnailPattern: {
                    },
                    Rotate: {
                    },
                    PresetId: {
                    },
                    Status: {
                    },
                    StatusDetail: {
                    }
                  }
                }
              }
            }
          },
          NextPageToken: {
          }
        }
      }
    },
    listJobsByStatus: {
      name: 'ListJobsByStatus',
      http: {
        method: 'GET',
        uri: '/2012-09-25/jobsByStatus/{Status}?Ascending={Ascending}&PageToken={PageToken}'
      },
      input: {
        type: 'structure',
        members: {
          Status: {
            required: true,
            location: 'uri'
          },
          Ascending: {
            location: 'uri'
          },
          PageToken: {
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Jobs: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Id: {
                },
                PipelineId: {
                },
                Input: {
                  type: 'structure',
                  members: {
                    Key: {
                    },
                    FrameRate: {
                    },
                    Resolution: {
                    },
                    AspectRatio: {
                    },
                    Interlaced: {
                    },
                    Container: {
                    }
                  }
                },
                Output: {
                  type: 'structure',
                  members: {
                    Key: {
                    },
                    ThumbnailPattern: {
                    },
                    Rotate: {
                    },
                    PresetId: {
                    },
                    Status: {
                    },
                    StatusDetail: {
                    }
                  }
                }
              }
            }
          },
          NextPageToken: {
          }
        }
      }
    },
    listPipelines: {
      name: 'ListPipelines',
      http: {
        method: 'GET',
        uri: '/2012-09-25/pipelines'
      },
      input: {
        type: 'structure'
      },
      output: {
        type: 'structure',
        members: {
          Pipelines: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Id: {
                },
                Name: {
                },
                Status: {
                },
                InputBucket: {
                },
                OutputBucket: {
                },
                Role: {
                },
                Notifications: {
                  type: 'structure',
                  members: {
                    Progressing: {
                    },
                    Completed: {
                    },
                    Warning: {
                    },
                    Error: {
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    listPresets: {
      name: 'ListPresets',
      http: {
        method: 'GET',
        uri: '/2012-09-25/presets'
      },
      input: {
        type: 'structure'
      },
      output: {
        type: 'structure',
        members: {
          Presets: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Id: {
                },
                Name: {
                },
                Description: {
                },
                Container: {
                },
                Audio: {
                  type: 'structure',
                  members: {
                    Codec: {
                    },
                    SampleRate: {
                    },
                    BitRate: {
                    },
                    Channels: {
                    }
                  }
                },
                Video: {
                  type: 'structure',
                  members: {
                    Codec: {
                    },
                    CodecOptions: {
                      type: 'map'
                    },
                    KeyframesMaxDist: {
                    },
                    FixedGOP: {
                    },
                    BitRate: {
                    },
                    FrameRate: {
                    },
                    Resolution: {
                    },
                    AspectRatio: {
                    }
                  }
                },
                Thumbnails: {
                  type: 'structure',
                  members: {
                    Format: {
                    },
                    Interval: {
                    },
                    Resolution: {
                    },
                    AspectRatio: {
                    }
                  }
                },
                Type: {
                }
              }
            }
          }
        }
      }
    },
    readJob: {
      name: 'ReadJob',
      http: {
        method: 'GET',
        uri: '/2012-09-25/jobs/{Id}'
      },
      input: {
        type: 'structure',
        members: {
          Id: {
            required: true,
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Job: {
            type: 'structure',
            members: {
              Id: {
              },
              PipelineId: {
              },
              Input: {
                type: 'structure',
                members: {
                  Key: {
                  },
                  FrameRate: {
                  },
                  Resolution: {
                  },
                  AspectRatio: {
                  },
                  Interlaced: {
                  },
                  Container: {
                  }
                }
              },
              Output: {
                type: 'structure',
                members: {
                  Key: {
                  },
                  ThumbnailPattern: {
                  },
                  Rotate: {
                  },
                  PresetId: {
                  },
                  Status: {
                  },
                  StatusDetail: {
                  }
                }
              }
            }
          }
        }
      }
    },
    readPipeline: {
      name: 'ReadPipeline',
      http: {
        method: 'GET',
        uri: '/2012-09-25/pipelines/{Id}'
      },
      input: {
        type: 'structure',
        members: {
          Id: {
            required: true,
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Pipeline: {
            type: 'structure',
            members: {
              Id: {
              },
              Name: {
              },
              Status: {
              },
              InputBucket: {
              },
              OutputBucket: {
              },
              Role: {
              },
              Notifications: {
                type: 'structure',
                members: {
                  Progressing: {
                  },
                  Completed: {
                  },
                  Warning: {
                  },
                  Error: {
                  }
                }
              }
            }
          }
        }
      }
    },
    readPreset: {
      name: 'ReadPreset',
      http: {
        method: 'GET',
        uri: '/2012-09-25/presets/{Id}'
      },
      input: {
        type: 'structure',
        members: {
          Id: {
            required: true,
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Preset: {
            type: 'structure',
            members: {
              Id: {
              },
              Name: {
              },
              Description: {
              },
              Container: {
              },
              Audio: {
                type: 'structure',
                members: {
                  Codec: {
                  },
                  SampleRate: {
                  },
                  BitRate: {
                  },
                  Channels: {
                  }
                }
              },
              Video: {
                type: 'structure',
                members: {
                  Codec: {
                  },
                  CodecOptions: {
                    type: 'map'
                  },
                  KeyframesMaxDist: {
                  },
                  FixedGOP: {
                  },
                  BitRate: {
                  },
                  FrameRate: {
                  },
                  Resolution: {
                  },
                  AspectRatio: {
                  }
                }
              },
              Thumbnails: {
                type: 'structure',
                members: {
                  Format: {
                  },
                  Interval: {
                  },
                  Resolution: {
                  },
                  AspectRatio: {
                  }
                }
              },
              Type: {
              }
            }
          }
        }
      }
    },
    testRole: {
      name: 'TestRole',
      http: {
        method: 'POST',
        uri: '/2012-09-25/roleTests'
      },
      input: {
        type: 'structure',
        members: {
          Role: {
            required: true
          },
          InputBucket: {
            required: true
          },
          OutputBucket: {
            required: true
          },
          Topics: {
            type: 'list',
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Success: {
          },
          Messages: {
            type: 'list'
          }
        }
      }
    },
    updatePipelineNotifications: {
      name: 'UpdatePipelineNotifications',
      http: {
        method: 'POST',
        uri: '/2012-09-25/pipelines/{Id}/notifications'
      },
      input: {
        type: 'structure',
        members: {
          Id: {
            required: true,
            location: 'uri'
          },
          Notifications: {
            type: 'structure',
            members: {
              Progressing: {
              },
              Completed: {
              },
              Warning: {
              },
              Error: {
              }
            },
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Pipeline: {
            type: 'structure',
            members: {
              Id: {
              },
              Name: {
              },
              Status: {
              },
              InputBucket: {
              },
              OutputBucket: {
              },
              Role: {
              },
              Notifications: {
                type: 'structure',
                members: {
                  Progressing: {
                  },
                  Completed: {
                  },
                  Warning: {
                  },
                  Error: {
                  }
                }
              }
            }
          }
        }
      }
    },
    updatePipelineStatus: {
      name: 'UpdatePipelineStatus',
      http: {
        method: 'POST',
        uri: '/2012-09-25/pipelines/{Id}/status'
      },
      input: {
        type: 'structure',
        members: {
          Id: {
            required: true,
            location: 'uri'
          },
          Status: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Pipeline: {
            type: 'structure',
            members: {
              Id: {
              },
              Name: {
              },
              Status: {
              },
              InputBucket: {
              },
              OutputBucket: {
              },
              Role: {
              },
              Notifications: {
                type: 'structure',
                members: {
                  Progressing: {
                  },
                  Completed: {
                  },
                  Warning: {
                  },
                  Error: {
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};

},{}],54:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

module.exports = {
  format: 'query',
  apiVersion: '2012-06-01',
  endpointPrefix: 'elasticloadbalancing',
  resultWrapped: true,
  serviceFullName: 'Elastic Load Balancing',
  signatureVersion: 'v4',
  timestampFormat: 'iso8601',
  operations: {
    applySecurityGroupsToLoadBalancer: {
      name: 'ApplySecurityGroupsToLoadBalancer',
      input: {
        type: 'structure',
        members: {
          LoadBalancerName: {
            required: true
          },
          SecurityGroups: {
            type: 'list',
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          SecurityGroups: {
            type: 'list'
          }
        }
      }
    },
    attachLoadBalancerToSubnets: {
      name: 'AttachLoadBalancerToSubnets',
      input: {
        type: 'structure',
        members: {
          LoadBalancerName: {
            required: true
          },
          Subnets: {
            type: 'list',
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Subnets: {
            type: 'list'
          }
        }
      }
    },
    configureHealthCheck: {
      name: 'ConfigureHealthCheck',
      input: {
        type: 'structure',
        members: {
          LoadBalancerName: {
            required: true
          },
          HealthCheck: {
            type: 'structure',
            members: {
              Target: {
                required: true
              },
              Interval: {
                type: 'integer',
                required: true
              },
              Timeout: {
                type: 'integer',
                required: true
              },
              UnhealthyThreshold: {
                type: 'integer',
                required: true
              },
              HealthyThreshold: {
                type: 'integer',
                required: true
              }
            },
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          HealthCheck: {
            type: 'structure',
            members: {
              Target: {
              },
              Interval: {
                type: 'integer'
              },
              Timeout: {
                type: 'integer'
              },
              UnhealthyThreshold: {
                type: 'integer'
              },
              HealthyThreshold: {
                type: 'integer'
              }
            }
          }
        }
      }
    },
    createAppCookieStickinessPolicy: {
      name: 'CreateAppCookieStickinessPolicy',
      input: {
        type: 'structure',
        members: {
          LoadBalancerName: {
            required: true
          },
          PolicyName: {
            required: true
          },
          CookieName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure'
      }
    },
    createLBCookieStickinessPolicy: {
      name: 'CreateLBCookieStickinessPolicy',
      input: {
        type: 'structure',
        members: {
          LoadBalancerName: {
            required: true
          },
          PolicyName: {
            required: true
          },
          CookieExpirationPeriod: {
            type: 'integer'
          }
        }
      },
      output: {
        type: 'structure'
      }
    },
    createLoadBalancer: {
      name: 'CreateLoadBalancer',
      input: {
        type: 'structure',
        members: {
          LoadBalancerName: {
            required: true
          },
          Listeners: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Protocol: {
                  required: true
                },
                LoadBalancerPort: {
                  type: 'integer',
                  required: true
                },
                InstanceProtocol: {
                },
                InstancePort: {
                  type: 'integer',
                  required: true
                },
                SSLCertificateId: {
                }
              }
            },
            required: true
          },
          AvailabilityZones: {
            type: 'list'
          },
          Subnets: {
            type: 'list'
          },
          SecurityGroups: {
            type: 'list'
          },
          Scheme: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          DNSName: {
          }
        }
      }
    },
    createLoadBalancerListeners: {
      name: 'CreateLoadBalancerListeners',
      input: {
        type: 'structure',
        members: {
          LoadBalancerName: {
            required: true
          },
          Listeners: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Protocol: {
                  required: true
                },
                LoadBalancerPort: {
                  type: 'integer',
                  required: true
                },
                InstanceProtocol: {
                },
                InstancePort: {
                  type: 'integer',
                  required: true
                },
                SSLCertificateId: {
                }
              }
            },
            required: true
          }
        }
      },
      output: {
        type: 'structure'
      }
    },
    createLoadBalancerPolicy: {
      name: 'CreateLoadBalancerPolicy',
      input: {
        type: 'structure',
        members: {
          LoadBalancerName: {
            required: true
          },
          PolicyName: {
            required: true
          },
          PolicyTypeName: {
            required: true
          },
          PolicyAttributes: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                AttributeName: {
                },
                AttributeValue: {
                }
              }
            }
          }
        }
      },
      output: {
        type: 'structure'
      }
    },
    deleteLoadBalancer: {
      name: 'DeleteLoadBalancer',
      input: {
        type: 'structure',
        members: {
          LoadBalancerName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure'
      }
    },
    deleteLoadBalancerListeners: {
      name: 'DeleteLoadBalancerListeners',
      input: {
        type: 'structure',
        members: {
          LoadBalancerName: {
            required: true
          },
          LoadBalancerPorts: {
            type: 'list',
            members: {
              type: 'integer'
            },
            required: true
          }
        }
      },
      output: {
        type: 'structure'
      }
    },
    deleteLoadBalancerPolicy: {
      name: 'DeleteLoadBalancerPolicy',
      input: {
        type: 'structure',
        members: {
          LoadBalancerName: {
            required: true
          },
          PolicyName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure'
      }
    },
    deregisterInstancesFromLoadBalancer: {
      name: 'DeregisterInstancesFromLoadBalancer',
      input: {
        type: 'structure',
        members: {
          LoadBalancerName: {
            required: true
          },
          Instances: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                InstanceId: {
                }
              }
            },
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Instances: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                InstanceId: {
                }
              }
            }
          }
        }
      }
    },
    describeInstanceHealth: {
      name: 'DescribeInstanceHealth',
      input: {
        type: 'structure',
        members: {
          LoadBalancerName: {
            required: true
          },
          Instances: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                InstanceId: {
                }
              }
            }
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          InstanceStates: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                InstanceId: {
                },
                State: {
                },
                ReasonCode: {
                },
                Description: {
                }
              }
            }
          }
        }
      }
    },
    describeLoadBalancerPolicies: {
      name: 'DescribeLoadBalancerPolicies',
      input: {
        type: 'structure',
        members: {
          LoadBalancerName: {
          },
          PolicyNames: {
            type: 'list'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          PolicyDescriptions: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                PolicyName: {
                },
                PolicyTypeName: {
                },
                PolicyAttributeDescriptions: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      AttributeName: {
                      },
                      AttributeValue: {
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    describeLoadBalancerPolicyTypes: {
      name: 'DescribeLoadBalancerPolicyTypes',
      input: {
        type: 'structure',
        members: {
          PolicyTypeNames: {
            type: 'list'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          PolicyTypeDescriptions: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                PolicyTypeName: {
                },
                Description: {
                },
                PolicyAttributeTypeDescriptions: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      AttributeName: {
                      },
                      AttributeType: {
                      },
                      Description: {
                      },
                      DefaultValue: {
                      },
                      Cardinality: {
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    describeLoadBalancers: {
      name: 'DescribeLoadBalancers',
      input: {
        type: 'structure',
        members: {
          LoadBalancerNames: {
            type: 'list'
          },
          Marker: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          LoadBalancerDescriptions: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                LoadBalancerName: {
                },
                DNSName: {
                },
                CanonicalHostedZoneName: {
                },
                CanonicalHostedZoneNameID: {
                },
                ListenerDescriptions: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      Listener: {
                        type: 'structure',
                        members: {
                          Protocol: {
                          },
                          LoadBalancerPort: {
                            type: 'integer'
                          },
                          InstanceProtocol: {
                          },
                          InstancePort: {
                            type: 'integer'
                          },
                          SSLCertificateId: {
                          }
                        }
                      },
                      PolicyNames: {
                        type: 'list'
                      }
                    }
                  }
                },
                Policies: {
                  type: 'structure',
                  members: {
                    AppCookieStickinessPolicies: {
                      type: 'list',
                      members: {
                        type: 'structure',
                        members: {
                          PolicyName: {
                          },
                          CookieName: {
                          }
                        }
                      }
                    },
                    LBCookieStickinessPolicies: {
                      type: 'list',
                      members: {
                        type: 'structure',
                        members: {
                          PolicyName: {
                          },
                          CookieExpirationPeriod: {
                            type: 'integer'
                          }
                        }
                      }
                    },
                    OtherPolicies: {
                      type: 'list'
                    }
                  }
                },
                BackendServerDescriptions: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      InstancePort: {
                        type: 'integer'
                      },
                      PolicyNames: {
                        type: 'list'
                      }
                    }
                  }
                },
                AvailabilityZones: {
                  type: 'list'
                },
                Subnets: {
                  type: 'list'
                },
                VPCId: {
                },
                Instances: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      InstanceId: {
                      }
                    }
                  }
                },
                HealthCheck: {
                  type: 'structure',
                  members: {
                    Target: {
                    },
                    Interval: {
                      type: 'integer'
                    },
                    Timeout: {
                      type: 'integer'
                    },
                    UnhealthyThreshold: {
                      type: 'integer'
                    },
                    HealthyThreshold: {
                      type: 'integer'
                    }
                  }
                },
                SourceSecurityGroup: {
                  type: 'structure',
                  members: {
                    OwnerAlias: {
                    },
                    GroupName: {
                    }
                  }
                },
                SecurityGroups: {
                  type: 'list'
                },
                CreatedTime: {
                  type: 'timestamp'
                },
                Scheme: {
                }
              }
            }
          },
          NextMarker: {
          }
        }
      }
    },
    detachLoadBalancerFromSubnets: {
      name: 'DetachLoadBalancerFromSubnets',
      input: {
        type: 'structure',
        members: {
          LoadBalancerName: {
            required: true
          },
          Subnets: {
            type: 'list',
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Subnets: {
            type: 'list'
          }
        }
      }
    },
    disableAvailabilityZonesForLoadBalancer: {
      name: 'DisableAvailabilityZonesForLoadBalancer',
      input: {
        type: 'structure',
        members: {
          LoadBalancerName: {
            required: true
          },
          AvailabilityZones: {
            type: 'list',
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          AvailabilityZones: {
            type: 'list'
          }
        }
      }
    },
    enableAvailabilityZonesForLoadBalancer: {
      name: 'EnableAvailabilityZonesForLoadBalancer',
      input: {
        type: 'structure',
        members: {
          LoadBalancerName: {
            required: true
          },
          AvailabilityZones: {
            type: 'list',
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          AvailabilityZones: {
            type: 'list'
          }
        }
      }
    },
    registerInstancesWithLoadBalancer: {
      name: 'RegisterInstancesWithLoadBalancer',
      input: {
        type: 'structure',
        members: {
          LoadBalancerName: {
            required: true
          },
          Instances: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                InstanceId: {
                }
              }
            },
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Instances: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                InstanceId: {
                }
              }
            }
          }
        }
      }
    },
    setLoadBalancerListenerSSLCertificate: {
      name: 'SetLoadBalancerListenerSSLCertificate',
      input: {
        type: 'structure',
        members: {
          LoadBalancerName: {
            required: true
          },
          LoadBalancerPort: {
            type: 'integer',
            required: true
          },
          SSLCertificateId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure'
      }
    },
    setLoadBalancerPoliciesForBackendServer: {
      name: 'SetLoadBalancerPoliciesForBackendServer',
      input: {
        type: 'structure',
        members: {
          LoadBalancerName: {
            required: true
          },
          InstancePort: {
            type: 'integer',
            required: true
          },
          PolicyNames: {
            type: 'list',
            required: true
          }
        }
      },
      output: {
        type: 'structure'
      }
    },
    setLoadBalancerPoliciesOfListener: {
      name: 'SetLoadBalancerPoliciesOfListener',
      input: {
        type: 'structure',
        members: {
          LoadBalancerName: {
            required: true
          },
          LoadBalancerPort: {
            type: 'integer',
            required: true
          },
          PolicyNames: {
            type: 'list',
            required: true
          }
        }
      },
      output: {
        type: 'structure'
      }
    }
  }
};

},{}],55:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

module.exports = {
  format: 'query',
  apiVersion: '2009-03-31',
  endpointPrefix: 'elasticmapreduce',
  resultWrapped: true,
  serviceAbbreviation: 'Amazon EMR',
  serviceFullName: 'Amazon Elastic MapReduce',
  signatureVersion: 'v2',
  timestampFormat: 'iso8601',
  operations: {
    addInstanceGroups: {
      name: 'AddInstanceGroups',
      input: {
        type: 'structure',
        members: {
          InstanceGroups: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                },
                Market: {
                },
                InstanceRole: {
                  required: true
                },
                BidPrice: {
                },
                InstanceType: {
                  required: true
                },
                InstanceCount: {
                  type: 'integer',
                  required: true
                }
              }
            },
            required: true
          },
          JobFlowId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          JobFlowId: {
          },
          InstanceGroupIds: {
            type: 'list'
          }
        }
      }
    },
    addJobFlowSteps: {
      name: 'AddJobFlowSteps',
      input: {
        type: 'structure',
        members: {
          JobFlowId: {
            required: true
          },
          Steps: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                  required: true
                },
                ActionOnFailure: {
                },
                HadoopJarStep: {
                  type: 'structure',
                  members: {
                    Properties: {
                      type: 'list',
                      members: {
                        type: 'structure',
                        members: {
                          Key: {
                          },
                          Value: {
                          }
                        }
                      }
                    },
                    Jar: {
                      required: true
                    },
                    MainClass: {
                    },
                    Args: {
                      type: 'list'
                    }
                  },
                  required: true
                }
              }
            },
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    describeJobFlows: {
      name: 'DescribeJobFlows',
      input: {
        type: 'structure',
        members: {
          CreatedAfter: {
            type: 'timestamp'
          },
          CreatedBefore: {
            type: 'timestamp'
          },
          JobFlowIds: {
            type: 'list'
          },
          JobFlowStates: {
            type: 'list'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          JobFlows: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                JobFlowId: {
                },
                Name: {
                },
                LogUri: {
                },
                AmiVersion: {
                },
                ExecutionStatusDetail: {
                  type: 'structure',
                  members: {
                    State: {
                    },
                    CreationDateTime: {
                      type: 'timestamp'
                    },
                    StartDateTime: {
                      type: 'timestamp'
                    },
                    ReadyDateTime: {
                      type: 'timestamp'
                    },
                    EndDateTime: {
                      type: 'timestamp'
                    },
                    LastStateChangeReason: {
                    }
                  }
                },
                Instances: {
                  type: 'structure',
                  members: {
                    MasterInstanceType: {
                    },
                    MasterPublicDnsName: {
                    },
                    MasterInstanceId: {
                    },
                    SlaveInstanceType: {
                    },
                    InstanceCount: {
                      type: 'integer'
                    },
                    InstanceGroups: {
                      type: 'list',
                      members: {
                        type: 'structure',
                        members: {
                          InstanceGroupId: {
                          },
                          Name: {
                          },
                          Market: {
                          },
                          InstanceRole: {
                          },
                          BidPrice: {
                          },
                          InstanceType: {
                          },
                          InstanceRequestCount: {
                            type: 'integer'
                          },
                          InstanceRunningCount: {
                            type: 'integer'
                          },
                          State: {
                          },
                          LastStateChangeReason: {
                          },
                          CreationDateTime: {
                            type: 'timestamp'
                          },
                          StartDateTime: {
                            type: 'timestamp'
                          },
                          ReadyDateTime: {
                            type: 'timestamp'
                          },
                          EndDateTime: {
                            type: 'timestamp'
                          }
                        }
                      }
                    },
                    NormalizedInstanceHours: {
                      type: 'integer'
                    },
                    Ec2KeyName: {
                    },
                    Ec2SubnetId: {
                    },
                    Placement: {
                      type: 'structure',
                      members: {
                        AvailabilityZone: {
                        }
                      }
                    },
                    KeepJobFlowAliveWhenNoSteps: {
                      type: 'boolean'
                    },
                    TerminationProtected: {
                      type: 'boolean'
                    },
                    HadoopVersion: {
                    }
                  }
                },
                Steps: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      StepConfig: {
                        type: 'structure',
                        members: {
                          Name: {
                          },
                          ActionOnFailure: {
                          },
                          HadoopJarStep: {
                            type: 'structure',
                            members: {
                              Properties: {
                                type: 'list',
                                members: {
                                  type: 'structure',
                                  members: {
                                    Key: {
                                    },
                                    Value: {
                                    }
                                  }
                                }
                              },
                              Jar: {
                              },
                              MainClass: {
                              },
                              Args: {
                                type: 'list'
                              }
                            }
                          }
                        }
                      },
                      ExecutionStatusDetail: {
                        type: 'structure',
                        members: {
                          State: {
                          },
                          CreationDateTime: {
                            type: 'timestamp'
                          },
                          StartDateTime: {
                            type: 'timestamp'
                          },
                          EndDateTime: {
                            type: 'timestamp'
                          },
                          LastStateChangeReason: {
                          }
                        }
                      }
                    }
                  }
                },
                BootstrapActions: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      BootstrapActionConfig: {
                        type: 'structure',
                        members: {
                          Name: {
                          },
                          ScriptBootstrapAction: {
                            type: 'structure',
                            members: {
                              Path: {
                              },
                              Args: {
                                type: 'list'
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                SupportedProducts: {
                  type: 'list'
                },
                VisibleToAllUsers: {
                  type: 'boolean'
                },
                JobFlowRole: {
                }
              }
            }
          }
        }
      }
    },
    modifyInstanceGroups: {
      name: 'ModifyInstanceGroups',
      input: {
        type: 'structure',
        members: {
          InstanceGroups: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                InstanceGroupId: {
                  required: true
                },
                InstanceCount: {
                  type: 'integer',
                  required: true
                }
              }
            }
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    runJobFlow: {
      name: 'RunJobFlow',
      input: {
        type: 'structure',
        members: {
          Name: {
            required: true
          },
          LogUri: {
          },
          AdditionalInfo: {
          },
          AmiVersion: {
          },
          Instances: {
            type: 'structure',
            members: {
              MasterInstanceType: {
              },
              SlaveInstanceType: {
              },
              InstanceCount: {
                type: 'integer'
              },
              InstanceGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    Name: {
                    },
                    Market: {
                    },
                    InstanceRole: {
                      required: true
                    },
                    BidPrice: {
                    },
                    InstanceType: {
                      required: true
                    },
                    InstanceCount: {
                      type: 'integer',
                      required: true
                    }
                  }
                }
              },
              Ec2KeyName: {
              },
              Placement: {
                type: 'structure',
                members: {
                  AvailabilityZone: {
                    required: true
                  }
                }
              },
              KeepJobFlowAliveWhenNoSteps: {
                type: 'boolean'
              },
              TerminationProtected: {
                type: 'boolean'
              },
              HadoopVersion: {
              },
              Ec2SubnetId: {
              }
            },
            required: true
          },
          Steps: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                  required: true
                },
                ActionOnFailure: {
                },
                HadoopJarStep: {
                  type: 'structure',
                  members: {
                    Properties: {
                      type: 'list',
                      members: {
                        type: 'structure',
                        members: {
                          Key: {
                          },
                          Value: {
                          }
                        }
                      }
                    },
                    Jar: {
                      required: true
                    },
                    MainClass: {
                    },
                    Args: {
                      type: 'list'
                    }
                  },
                  required: true
                }
              }
            }
          },
          BootstrapActions: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                  required: true
                },
                ScriptBootstrapAction: {
                  type: 'structure',
                  members: {
                    Path: {
                      required: true
                    },
                    Args: {
                      type: 'list'
                    }
                  },
                  required: true
                }
              }
            }
          },
          SupportedProducts: {
            type: 'list'
          },
          VisibleToAllUsers: {
            type: 'boolean'
          },
          JobFlowRole: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          JobFlowId: {
          }
        }
      }
    },
    setTerminationProtection: {
      name: 'SetTerminationProtection',
      input: {
        type: 'structure',
        members: {
          JobFlowIds: {
            type: 'list',
            required: true
          },
          TerminationProtected: {
            type: 'boolean',
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    setVisibleToAllUsers: {
      name: 'SetVisibleToAllUsers',
      input: {
        type: 'structure',
        members: {
          JobFlowIds: {
            type: 'list',
            required: true
          },
          VisibleToAllUsers: {
            type: 'boolean',
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    terminateJobFlows: {
      name: 'TerminateJobFlows',
      input: {
        type: 'structure',
        members: {
          JobFlowIds: {
            type: 'list',
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    }
  }
};

},{}],56:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

module.exports = {
  format: 'rest-json',
  apiVersion: '2012-06-01',
  checksumFormat: 'sha256',
  endpointPrefix: 'glacier',
  serviceFullName: 'Amazon Glacier',
  signatureVersion: 'v4',
  timestampFormat: 'iso8601',
  operations: {
    abortMultipartUpload: {
      name: 'AbortMultipartUpload',
      http: {
        method: 'DELETE',
        uri: '/{accountId}/vaults/{vaultName}/multipart-uploads/{uploadId}'
      },
      input: {
        type: 'structure',
        members: {
          accountId: {
            location: 'uri'
          },
          vaultName: {
            location: 'uri'
          },
          uploadId: {
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    completeMultipartUpload: {
      name: 'CompleteMultipartUpload',
      http: {
        method: 'POST',
        uri: '/{accountId}/vaults/{vaultName}/multipart-uploads/{uploadId}'
      },
      input: {
        type: 'structure',
        members: {
          accountId: {
            location: 'uri'
          },
          vaultName: {
            location: 'uri'
          },
          uploadId: {
            location: 'uri'
          },
          archiveSize: {
            location: 'header',
            name: 'x-amz-archive-size'
          },
          checksum: {
            location: 'header',
            name: 'x-amz-sha256-tree-hash'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          location: {
            location: 'header',
            name: 'Location'
          },
          checksum: {
            location: 'header',
            name: 'x-amz-sha256-tree-hash'
          },
          archiveId: {
            location: 'header',
            name: 'x-amz-archive-id'
          }
        }
      }
    },
    createVault: {
      name: 'CreateVault',
      http: {
        method: 'PUT',
        uri: '/{accountId}/vaults/{vaultName}'
      },
      input: {
        type: 'structure',
        members: {
          accountId: {
            location: 'uri'
          },
          vaultName: {
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          location: {
            location: 'header',
            name: 'Location'
          }
        }
      }
    },
    deleteArchive: {
      name: 'DeleteArchive',
      http: {
        method: 'DELETE',
        uri: '/{accountId}/vaults/{vaultName}/archives/{archiveId}'
      },
      input: {
        type: 'structure',
        members: {
          accountId: {
            location: 'uri'
          },
          vaultName: {
            location: 'uri'
          },
          archiveId: {
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteVault: {
      name: 'DeleteVault',
      http: {
        method: 'DELETE',
        uri: '/{accountId}/vaults/{vaultName}'
      },
      input: {
        type: 'structure',
        members: {
          accountId: {
            location: 'uri'
          },
          vaultName: {
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteVaultNotifications: {
      name: 'DeleteVaultNotifications',
      http: {
        method: 'DELETE',
        uri: '/{accountId}/vaults/{vaultName}/notification-configuration'
      },
      input: {
        type: 'structure',
        members: {
          accountId: {
            location: 'uri'
          },
          vaultName: {
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    describeJob: {
      name: 'DescribeJob',
      http: {
        method: 'GET',
        uri: '/{accountId}/vaults/{vaultName}/jobs/{jobId}'
      },
      input: {
        type: 'structure',
        members: {
          accountId: {
            location: 'uri'
          },
          vaultName: {
            location: 'uri'
          },
          jobId: {
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          JobId: {
          },
          JobDescription: {
          },
          Action: {
          },
          ArchiveId: {
          },
          VaultARN: {
          },
          CreationDate: {
          },
          Completed: {
            type: 'boolean'
          },
          StatusCode: {
          },
          StatusMessage: {
          },
          ArchiveSizeInBytes: {
            type: 'integer'
          },
          InventorySizeInBytes: {
            type: 'integer'
          },
          SNSTopic: {
          },
          CompletionDate: {
          },
          SHA256TreeHash: {
          },
          ArchiveSHA256TreeHash: {
          },
          RetrievalByteRange: {
          }
        }
      }
    },
    describeVault: {
      name: 'DescribeVault',
      http: {
        method: 'GET',
        uri: '/{accountId}/vaults/{vaultName}'
      },
      input: {
        type: 'structure',
        members: {
          accountId: {
            location: 'uri'
          },
          vaultName: {
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          VaultARN: {
          },
          VaultName: {
          },
          CreationDate: {
          },
          LastInventoryDate: {
          },
          NumberOfArchives: {
            type: 'integer'
          },
          SizeInBytes: {
            type: 'integer'
          }
        }
      }
    },
    getJobOutput: {
      name: 'GetJobOutput',
      http: {
        method: 'GET',
        uri: '/{accountId}/vaults/{vaultName}/jobs/{jobId}/output'
      },
      input: {
        type: 'structure',
        members: {
          accountId: {
            location: 'uri'
          },
          vaultName: {
            location: 'uri'
          },
          jobId: {
            location: 'uri'
          },
          range: {
            location: 'header',
            name: 'Range'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          body: {
            type: 'binary',
            streaming: true,
            location: 'body'
          },
          checksum: {
            location: 'header',
            name: 'x-amz-sha256-tree-hash'
          },
          status: {
            type: 'integer',
            location: 'status'
          },
          contentRange: {
            location: 'header',
            name: 'Content-Range'
          },
          acceptRanges: {
            location: 'header',
            name: 'Accept-Ranges'
          },
          contentType: {
            location: 'header',
            name: 'Content-Type'
          },
          archiveDescription: {
            location: 'header',
            name: 'x-amz-archive-description'
          }
        },
        payload: 'body'
      }
    },
    getVaultNotifications: {
      name: 'GetVaultNotifications',
      http: {
        method: 'GET',
        uri: '/{accountId}/vaults/{vaultName}/notification-configuration'
      },
      input: {
        type: 'structure',
        members: {
          accountId: {
            location: 'uri'
          },
          vaultName: {
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          SNSTopic: {
          },
          Events: {
            type: 'list'
          }
        }
      }
    },
    initiateJob: {
      name: 'InitiateJob',
      http: {
        method: 'POST',
        uri: '/{accountId}/vaults/{vaultName}/jobs'
      },
      input: {
        type: 'structure',
        members: {
          accountId: {
            location: 'uri'
          },
          vaultName: {
            location: 'uri'
          },
          jobParameters: {
            type: 'structure',
            members: {
              Format: {
              },
              Type: {
              },
              ArchiveId: {
              },
              Description: {
              },
              SNSTopic: {
              },
              RetrievalByteRange: {
              }
            }
          }
        },
        root: 'jobParameters'
      },
      output: {
        type: 'structure',
        members: {
          location: {
            location: 'header',
            name: 'Location'
          },
          jobId: {
            location: 'header',
            name: 'x-amz-job-id'
          }
        }
      }
    },
    initiateMultipartUpload: {
      name: 'InitiateMultipartUpload',
      http: {
        method: 'POST',
        uri: '/{accountId}/vaults/{vaultName}/multipart-uploads'
      },
      input: {
        type: 'structure',
        members: {
          accountId: {
            location: 'uri'
          },
          vaultName: {
            location: 'uri'
          },
          archiveDescription: {
            location: 'header',
            name: 'x-amz-archive-description'
          },
          partSize: {
            location: 'header',
            name: 'x-amz-part-size'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          location: {
            location: 'header',
            name: 'Location'
          },
          uploadId: {
            location: 'header',
            name: 'x-amz-multipart-upload-id'
          }
        }
      }
    },
    listJobs: {
      name: 'ListJobs',
      http: {
        method: 'GET',
        uri: '/{accountId}/vaults/{vaultName}/jobs?marker={marker}&limit={limit}&completed={completed}&statuscode={statuscode}'
      },
      input: {
        type: 'structure',
        members: {
          accountId: {
            location: 'uri'
          },
          vaultName: {
            location: 'uri'
          },
          limit: {
            location: 'uri'
          },
          marker: {
            location: 'uri'
          },
          statuscode: {
            location: 'uri'
          },
          completed: {
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          JobList: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                JobId: {
                },
                JobDescription: {
                },
                Action: {
                },
                ArchiveId: {
                },
                VaultARN: {
                },
                CreationDate: {
                },
                Completed: {
                  type: 'boolean'
                },
                StatusCode: {
                },
                StatusMessage: {
                },
                ArchiveSizeInBytes: {
                  type: 'integer'
                },
                InventorySizeInBytes: {
                  type: 'integer'
                },
                SNSTopic: {
                },
                CompletionDate: {
                },
                SHA256TreeHash: {
                },
                ArchiveSHA256TreeHash: {
                },
                RetrievalByteRange: {
                }
              }
            }
          },
          Marker: {
          }
        }
      }
    },
    listMultipartUploads: {
      name: 'ListMultipartUploads',
      http: {
        method: 'GET',
        uri: '/{accountId}/vaults/{vaultName}/multipart-uploads?marker={marker}&limit={limit}'
      },
      input: {
        type: 'structure',
        members: {
          accountId: {
            location: 'uri'
          },
          vaultName: {
            location: 'uri'
          },
          limit: {
            location: 'uri'
          },
          marker: {
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          UploadsList: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                MultipartUploadId: {
                },
                VaultARN: {
                },
                ArchiveDescription: {
                },
                PartSizeInBytes: {
                  type: 'integer'
                },
                CreationDate: {
                }
              }
            }
          },
          Marker: {
          }
        }
      }
    },
    listParts: {
      name: 'ListParts',
      http: {
        method: 'GET',
        uri: '/{accountId}/vaults/{vaultName}/multipart-uploads/{uploadId}?marker={marker}&limit={limit}'
      },
      input: {
        type: 'structure',
        members: {
          accountId: {
            location: 'uri'
          },
          vaultName: {
            location: 'uri'
          },
          uploadId: {
            location: 'uri'
          },
          marker: {
            location: 'uri'
          },
          limit: {
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          MultipartUploadId: {
          },
          VaultARN: {
          },
          ArchiveDescription: {
          },
          PartSizeInBytes: {
            type: 'integer'
          },
          CreationDate: {
          },
          Parts: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                RangeInBytes: {
                },
                SHA256TreeHash: {
                }
              }
            }
          },
          Marker: {
          }
        }
      }
    },
    listVaults: {
      name: 'ListVaults',
      http: {
        method: 'GET',
        uri: '/{accountId}/vaults?marker={marker}&limit={limit}'
      },
      input: {
        type: 'structure',
        members: {
          accountId: {
            location: 'uri'
          },
          marker: {
            location: 'uri'
          },
          limit: {
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          VaultList: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                VaultARN: {
                },
                VaultName: {
                },
                CreationDate: {
                },
                LastInventoryDate: {
                },
                NumberOfArchives: {
                  type: 'integer'
                },
                SizeInBytes: {
                  type: 'integer'
                }
              }
            }
          },
          Marker: {
          }
        }
      }
    },
    setVaultNotifications: {
      name: 'SetVaultNotifications',
      http: {
        method: 'PUT',
        uri: '/{accountId}/vaults/{vaultName}/notification-configuration'
      },
      input: {
        type: 'structure',
        members: {
          accountId: {
            location: 'uri'
          },
          vaultName: {
            location: 'uri'
          },
          vaultNotificationConfig: {
            type: 'structure',
            members: {
              SNSTopic: {
              },
              Events: {
                type: 'list'
              }
            }
          }
        },
        root: 'vaultNotificationConfig'
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    uploadArchive: {
      name: 'UploadArchive',
      http: {
        method: 'POST',
        uri: '/{accountId}/vaults/{vaultName}/archives'
      },
      input: {
        type: 'structure',
        members: {
          vaultName: {
            location: 'uri'
          },
          accountId: {
            location: 'uri'
          },
          archiveDescription: {
            location: 'header',
            name: 'x-amz-archive-description'
          },
          checksum: {
            location: 'header',
            name: 'x-amz-sha256-tree-hash'
          },
          body: {
            type: 'binary',
            streaming: true,
            location: 'body'
          }
        },
        payload: 'body'
      },
      output: {
        type: 'structure',
        members: {
          location: {
            location: 'header',
            name: 'Location'
          },
          checksum: {
            location: 'header',
            name: 'x-amz-sha256-tree-hash'
          },
          archiveId: {
            location: 'header',
            name: 'x-amz-archive-id'
          }
        }
      }
    },
    uploadMultipartPart: {
      name: 'UploadMultipartPart',
      http: {
        method: 'PUT',
        uri: '/{accountId}/vaults/{vaultName}/multipart-uploads/{uploadId}'
      },
      input: {
        type: 'structure',
        members: {
          accountId: {
            location: 'uri'
          },
          vaultName: {
            location: 'uri'
          },
          uploadId: {
            location: 'uri'
          },
          checksum: {
            location: 'header',
            name: 'x-amz-sha256-tree-hash'
          },
          range: {
            location: 'header',
            name: 'Content-Range'
          },
          body: {
            type: 'binary',
            streaming: true,
            location: 'body'
          }
        },
        payload: 'body'
      },
      output: {
        type: 'structure',
        members: {
          checksum: {
            location: 'header',
            name: 'x-amz-sha256-tree-hash'
          }
        }
      }
    }
  }
};

},{}],57:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

module.exports = {
  format: 'query',
  apiVersion: '2010-05-08',
  endpointPrefix: 'iam',
  globalEndpoint: 'iam.amazonaws.com',
  resultWrapped: true,
  serviceAbbreviation: 'IAM',
  serviceFullName: 'AWS Identity and Access Management',
  signatureVersion: 'v4',
  timestampFormat: 'iso8601',
  operations: {
    addRoleToInstanceProfile: {
      name: 'AddRoleToInstanceProfile',
      input: {
        type: 'structure',
        members: {
          InstanceProfileName: {
            required: true
          },
          RoleName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    addUserToGroup: {
      name: 'AddUserToGroup',
      input: {
        type: 'structure',
        members: {
          GroupName: {
            required: true
          },
          UserName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    changePassword: {
      name: 'ChangePassword',
      input: {
        type: 'structure',
        members: {
          OldPassword: {
            required: true
          },
          NewPassword: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    createAccessKey: {
      name: 'CreateAccessKey',
      input: {
        type: 'structure',
        members: {
          UserName: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          AccessKey: {
            type: 'structure',
            members: {
              UserName: {
              },
              AccessKeyId: {
              },
              Status: {
              },
              SecretAccessKey: {
              },
              CreateDate: {
                type: 'timestamp'
              }
            }
          }
        }
      }
    },
    createAccountAlias: {
      name: 'CreateAccountAlias',
      input: {
        type: 'structure',
        members: {
          AccountAlias: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    createGroup: {
      name: 'CreateGroup',
      input: {
        type: 'structure',
        members: {
          Path: {
          },
          GroupName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Group: {
            type: 'structure',
            members: {
              Path: {
              },
              GroupName: {
              },
              GroupId: {
              },
              Arn: {
              },
              CreateDate: {
                type: 'timestamp'
              }
            }
          }
        }
      }
    },
    createInstanceProfile: {
      name: 'CreateInstanceProfile',
      input: {
        type: 'structure',
        members: {
          InstanceProfileName: {
            required: true
          },
          Path: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          InstanceProfile: {
            type: 'structure',
            members: {
              Path: {
              },
              InstanceProfileName: {
              },
              InstanceProfileId: {
              },
              Arn: {
              },
              CreateDate: {
                type: 'timestamp'
              },
              Roles: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    Path: {
                    },
                    RoleName: {
                    },
                    RoleId: {
                    },
                    Arn: {
                    },
                    CreateDate: {
                      type: 'timestamp'
                    },
                    AssumeRolePolicyDocument: {
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    createLoginProfile: {
      name: 'CreateLoginProfile',
      input: {
        type: 'structure',
        members: {
          UserName: {
            required: true
          },
          Password: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          LoginProfile: {
            type: 'structure',
            members: {
              UserName: {
              },
              CreateDate: {
                type: 'timestamp'
              }
            }
          }
        }
      }
    },
    createRole: {
      name: 'CreateRole',
      input: {
        type: 'structure',
        members: {
          Path: {
          },
          RoleName: {
            required: true
          },
          AssumeRolePolicyDocument: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Role: {
            type: 'structure',
            members: {
              Path: {
              },
              RoleName: {
              },
              RoleId: {
              },
              Arn: {
              },
              CreateDate: {
                type: 'timestamp'
              },
              AssumeRolePolicyDocument: {
              }
            }
          }
        }
      }
    },
    createUser: {
      name: 'CreateUser',
      input: {
        type: 'structure',
        members: {
          Path: {
          },
          UserName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          User: {
            type: 'structure',
            members: {
              Path: {
              },
              UserName: {
              },
              UserId: {
              },
              Arn: {
              },
              CreateDate: {
                type: 'timestamp'
              }
            }
          }
        }
      }
    },
    createVirtualMFADevice: {
      name: 'CreateVirtualMFADevice',
      input: {
        type: 'structure',
        members: {
          Path: {
          },
          VirtualMFADeviceName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          VirtualMFADevice: {
            type: 'structure',
            members: {
              SerialNumber: {
              },
              Base32StringSeed: {
                type: 'base64'
              },
              QRCodePNG: {
                type: 'base64'
              },
              User: {
                type: 'structure',
                members: {
                  Path: {
                  },
                  UserName: {
                  },
                  UserId: {
                  },
                  Arn: {
                  },
                  CreateDate: {
                    type: 'timestamp'
                  }
                }
              },
              EnableDate: {
                type: 'timestamp'
              }
            }
          }
        }
      }
    },
    deactivateMFADevice: {
      name: 'DeactivateMFADevice',
      input: {
        type: 'structure',
        members: {
          UserName: {
            required: true
          },
          SerialNumber: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteAccessKey: {
      name: 'DeleteAccessKey',
      input: {
        type: 'structure',
        members: {
          UserName: {
          },
          AccessKeyId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteAccountAlias: {
      name: 'DeleteAccountAlias',
      input: {
        type: 'structure',
        members: {
          AccountAlias: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteAccountPasswordPolicy: {
      name: 'DeleteAccountPasswordPolicy',
      input: {
        type: 'structure',
        members: {
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteGroup: {
      name: 'DeleteGroup',
      input: {
        type: 'structure',
        members: {
          GroupName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteGroupPolicy: {
      name: 'DeleteGroupPolicy',
      input: {
        type: 'structure',
        members: {
          GroupName: {
            required: true
          },
          PolicyName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteInstanceProfile: {
      name: 'DeleteInstanceProfile',
      input: {
        type: 'structure',
        members: {
          InstanceProfileName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteLoginProfile: {
      name: 'DeleteLoginProfile',
      input: {
        type: 'structure',
        members: {
          UserName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteRole: {
      name: 'DeleteRole',
      input: {
        type: 'structure',
        members: {
          RoleName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteRolePolicy: {
      name: 'DeleteRolePolicy',
      input: {
        type: 'structure',
        members: {
          RoleName: {
            required: true
          },
          PolicyName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteServerCertificate: {
      name: 'DeleteServerCertificate',
      input: {
        type: 'structure',
        members: {
          ServerCertificateName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteSigningCertificate: {
      name: 'DeleteSigningCertificate',
      input: {
        type: 'structure',
        members: {
          UserName: {
          },
          CertificateId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteUser: {
      name: 'DeleteUser',
      input: {
        type: 'structure',
        members: {
          UserName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteUserPolicy: {
      name: 'DeleteUserPolicy',
      input: {
        type: 'structure',
        members: {
          UserName: {
            required: true
          },
          PolicyName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteVirtualMFADevice: {
      name: 'DeleteVirtualMFADevice',
      input: {
        type: 'structure',
        members: {
          SerialNumber: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    enableMFADevice: {
      name: 'EnableMFADevice',
      input: {
        type: 'structure',
        members: {
          UserName: {
            required: true
          },
          SerialNumber: {
            required: true
          },
          AuthenticationCode1: {
            required: true
          },
          AuthenticationCode2: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    getAccountPasswordPolicy: {
      name: 'GetAccountPasswordPolicy',
      input: {
        type: 'structure',
        members: {
        }
      },
      output: {
        type: 'structure',
        members: {
          PasswordPolicy: {
            type: 'structure',
            members: {
              MinimumPasswordLength: {
                type: 'integer'
              },
              RequireSymbols: {
                type: 'boolean'
              },
              RequireNumbers: {
                type: 'boolean'
              },
              RequireUppercaseCharacters: {
                type: 'boolean'
              },
              RequireLowercaseCharacters: {
                type: 'boolean'
              },
              AllowUsersToChangePassword: {
                type: 'boolean'
              }
            }
          }
        }
      }
    },
    getAccountSummary: {
      name: 'GetAccountSummary',
      input: {
        type: 'structure',
        members: {
        }
      },
      output: {
        type: 'structure',
        members: {
          SummaryMap: {
            type: 'map',
            members: {
              type: 'integer'
            }
          }
        }
      }
    },
    getGroup: {
      name: 'GetGroup',
      input: {
        type: 'structure',
        members: {
          GroupName: {
            required: true
          },
          Marker: {
          },
          MaxItems: {
            type: 'integer'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Group: {
            type: 'structure',
            members: {
              Path: {
              },
              GroupName: {
              },
              GroupId: {
              },
              Arn: {
              },
              CreateDate: {
                type: 'timestamp'
              }
            }
          },
          Users: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Path: {
                },
                UserName: {
                },
                UserId: {
                },
                Arn: {
                },
                CreateDate: {
                  type: 'timestamp'
                }
              }
            }
          },
          IsTruncated: {
            type: 'boolean'
          },
          Marker: {
          }
        }
      }
    },
    getGroupPolicy: {
      name: 'GetGroupPolicy',
      input: {
        type: 'structure',
        members: {
          GroupName: {
            required: true
          },
          PolicyName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          GroupName: {
          },
          PolicyName: {
          },
          PolicyDocument: {
          }
        }
      }
    },
    getInstanceProfile: {
      name: 'GetInstanceProfile',
      input: {
        type: 'structure',
        members: {
          InstanceProfileName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          InstanceProfile: {
            type: 'structure',
            members: {
              Path: {
              },
              InstanceProfileName: {
              },
              InstanceProfileId: {
              },
              Arn: {
              },
              CreateDate: {
                type: 'timestamp'
              },
              Roles: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    Path: {
                    },
                    RoleName: {
                    },
                    RoleId: {
                    },
                    Arn: {
                    },
                    CreateDate: {
                      type: 'timestamp'
                    },
                    AssumeRolePolicyDocument: {
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    getLoginProfile: {
      name: 'GetLoginProfile',
      input: {
        type: 'structure',
        members: {
          UserName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          LoginProfile: {
            type: 'structure',
            members: {
              UserName: {
              },
              CreateDate: {
                type: 'timestamp'
              }
            }
          }
        }
      }
    },
    getRole: {
      name: 'GetRole',
      input: {
        type: 'structure',
        members: {
          RoleName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Role: {
            type: 'structure',
            members: {
              Path: {
              },
              RoleName: {
              },
              RoleId: {
              },
              Arn: {
              },
              CreateDate: {
                type: 'timestamp'
              },
              AssumeRolePolicyDocument: {
              }
            }
          }
        }
      }
    },
    getRolePolicy: {
      name: 'GetRolePolicy',
      input: {
        type: 'structure',
        members: {
          RoleName: {
            required: true
          },
          PolicyName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          RoleName: {
          },
          PolicyName: {
          },
          PolicyDocument: {
          }
        }
      }
    },
    getServerCertificate: {
      name: 'GetServerCertificate',
      input: {
        type: 'structure',
        members: {
          ServerCertificateName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          ServerCertificate: {
            type: 'structure',
            members: {
              ServerCertificateMetadata: {
                type: 'structure',
                members: {
                  Path: {
                  },
                  ServerCertificateName: {
                  },
                  ServerCertificateId: {
                  },
                  Arn: {
                  },
                  UploadDate: {
                    type: 'timestamp'
                  }
                }
              },
              CertificateBody: {
              },
              CertificateChain: {
              }
            }
          }
        }
      }
    },
    getUser: {
      name: 'GetUser',
      input: {
        type: 'structure',
        members: {
          UserName: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          User: {
            type: 'structure',
            members: {
              Path: {
              },
              UserName: {
              },
              UserId: {
              },
              Arn: {
              },
              CreateDate: {
                type: 'timestamp'
              }
            }
          }
        }
      }
    },
    getUserPolicy: {
      name: 'GetUserPolicy',
      input: {
        type: 'structure',
        members: {
          UserName: {
            required: true
          },
          PolicyName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          UserName: {
          },
          PolicyName: {
          },
          PolicyDocument: {
          }
        }
      }
    },
    listAccessKeys: {
      name: 'ListAccessKeys',
      input: {
        type: 'structure',
        members: {
          UserName: {
          },
          Marker: {
          },
          MaxItems: {
            type: 'integer'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          AccessKeyMetadata: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                UserName: {
                },
                AccessKeyId: {
                },
                Status: {
                },
                CreateDate: {
                  type: 'timestamp'
                }
              }
            }
          },
          IsTruncated: {
            type: 'boolean'
          },
          Marker: {
          }
        }
      }
    },
    listAccountAliases: {
      name: 'ListAccountAliases',
      input: {
        type: 'structure',
        members: {
          Marker: {
          },
          MaxItems: {
            type: 'integer'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          AccountAliases: {
            type: 'list'
          },
          IsTruncated: {
            type: 'boolean'
          },
          Marker: {
          }
        }
      }
    },
    listGroupPolicies: {
      name: 'ListGroupPolicies',
      input: {
        type: 'structure',
        members: {
          GroupName: {
            required: true
          },
          Marker: {
          },
          MaxItems: {
            type: 'integer'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          PolicyNames: {
            type: 'list'
          },
          IsTruncated: {
            type: 'boolean'
          },
          Marker: {
          }
        }
      }
    },
    listGroups: {
      name: 'ListGroups',
      input: {
        type: 'structure',
        members: {
          PathPrefix: {
          },
          Marker: {
          },
          MaxItems: {
            type: 'integer'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Groups: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Path: {
                },
                GroupName: {
                },
                GroupId: {
                },
                Arn: {
                },
                CreateDate: {
                  type: 'timestamp'
                }
              }
            }
          },
          IsTruncated: {
            type: 'boolean'
          },
          Marker: {
          }
        }
      }
    },
    listGroupsForUser: {
      name: 'ListGroupsForUser',
      input: {
        type: 'structure',
        members: {
          UserName: {
            required: true
          },
          Marker: {
          },
          MaxItems: {
            type: 'integer'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Groups: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Path: {
                },
                GroupName: {
                },
                GroupId: {
                },
                Arn: {
                },
                CreateDate: {
                  type: 'timestamp'
                }
              }
            }
          },
          IsTruncated: {
            type: 'boolean'
          },
          Marker: {
          }
        }
      }
    },
    listInstanceProfiles: {
      name: 'ListInstanceProfiles',
      input: {
        type: 'structure',
        members: {
          PathPrefix: {
          },
          Marker: {
          },
          MaxItems: {
            type: 'integer'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          InstanceProfiles: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Path: {
                },
                InstanceProfileName: {
                },
                InstanceProfileId: {
                },
                Arn: {
                },
                CreateDate: {
                  type: 'timestamp'
                },
                Roles: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      Path: {
                      },
                      RoleName: {
                      },
                      RoleId: {
                      },
                      Arn: {
                      },
                      CreateDate: {
                        type: 'timestamp'
                      },
                      AssumeRolePolicyDocument: {
                      }
                    }
                  }
                }
              }
            }
          },
          IsTruncated: {
            type: 'boolean'
          },
          Marker: {
          }
        }
      }
    },
    listInstanceProfilesForRole: {
      name: 'ListInstanceProfilesForRole',
      input: {
        type: 'structure',
        members: {
          RoleName: {
            required: true
          },
          Marker: {
          },
          MaxItems: {
            type: 'integer'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          InstanceProfiles: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Path: {
                },
                InstanceProfileName: {
                },
                InstanceProfileId: {
                },
                Arn: {
                },
                CreateDate: {
                  type: 'timestamp'
                },
                Roles: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      Path: {
                      },
                      RoleName: {
                      },
                      RoleId: {
                      },
                      Arn: {
                      },
                      CreateDate: {
                        type: 'timestamp'
                      },
                      AssumeRolePolicyDocument: {
                      }
                    }
                  }
                }
              }
            }
          },
          IsTruncated: {
            type: 'boolean'
          },
          Marker: {
          }
        }
      }
    },
    listMFADevices: {
      name: 'ListMFADevices',
      input: {
        type: 'structure',
        members: {
          UserName: {
          },
          Marker: {
          },
          MaxItems: {
            type: 'integer'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          MFADevices: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                UserName: {
                },
                SerialNumber: {
                },
                EnableDate: {
                  type: 'timestamp'
                }
              }
            }
          },
          IsTruncated: {
            type: 'boolean'
          },
          Marker: {
          }
        }
      }
    },
    listRolePolicies: {
      name: 'ListRolePolicies',
      input: {
        type: 'structure',
        members: {
          RoleName: {
            required: true
          },
          Marker: {
          },
          MaxItems: {
            type: 'integer'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          PolicyNames: {
            type: 'list'
          },
          IsTruncated: {
            type: 'boolean'
          },
          Marker: {
          }
        }
      }
    },
    listRoles: {
      name: 'ListRoles',
      input: {
        type: 'structure',
        members: {
          PathPrefix: {
          },
          Marker: {
          },
          MaxItems: {
            type: 'integer'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Roles: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Path: {
                },
                RoleName: {
                },
                RoleId: {
                },
                Arn: {
                },
                CreateDate: {
                  type: 'timestamp'
                },
                AssumeRolePolicyDocument: {
                }
              }
            }
          },
          IsTruncated: {
            type: 'boolean'
          },
          Marker: {
          }
        }
      }
    },
    listServerCertificates: {
      name: 'ListServerCertificates',
      input: {
        type: 'structure',
        members: {
          PathPrefix: {
          },
          Marker: {
          },
          MaxItems: {
            type: 'integer'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          ServerCertificateMetadataList: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Path: {
                },
                ServerCertificateName: {
                },
                ServerCertificateId: {
                },
                Arn: {
                },
                UploadDate: {
                  type: 'timestamp'
                }
              }
            }
          },
          IsTruncated: {
            type: 'boolean'
          },
          Marker: {
          }
        }
      }
    },
    listSigningCertificates: {
      name: 'ListSigningCertificates',
      input: {
        type: 'structure',
        members: {
          UserName: {
          },
          Marker: {
          },
          MaxItems: {
            type: 'integer'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Certificates: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                UserName: {
                },
                CertificateId: {
                },
                CertificateBody: {
                },
                Status: {
                },
                UploadDate: {
                  type: 'timestamp'
                }
              }
            }
          },
          IsTruncated: {
            type: 'boolean'
          },
          Marker: {
          }
        }
      }
    },
    listUserPolicies: {
      name: 'ListUserPolicies',
      input: {
        type: 'structure',
        members: {
          UserName: {
            required: true
          },
          Marker: {
          },
          MaxItems: {
            type: 'integer'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          PolicyNames: {
            type: 'list'
          },
          IsTruncated: {
            type: 'boolean'
          },
          Marker: {
          }
        }
      }
    },
    listUsers: {
      name: 'ListUsers',
      input: {
        type: 'structure',
        members: {
          PathPrefix: {
          },
          Marker: {
          },
          MaxItems: {
            type: 'integer'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Users: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Path: {
                },
                UserName: {
                },
                UserId: {
                },
                Arn: {
                },
                CreateDate: {
                  type: 'timestamp'
                }
              }
            }
          },
          IsTruncated: {
            type: 'boolean'
          },
          Marker: {
          }
        }
      }
    },
    listVirtualMFADevices: {
      name: 'ListVirtualMFADevices',
      input: {
        type: 'structure',
        members: {
          AssignmentStatus: {
          },
          Marker: {
          },
          MaxItems: {
            type: 'integer'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          VirtualMFADevices: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                SerialNumber: {
                },
                Base32StringSeed: {
                  type: 'base64'
                },
                QRCodePNG: {
                  type: 'base64'
                },
                User: {
                  type: 'structure',
                  members: {
                    Path: {
                    },
                    UserName: {
                    },
                    UserId: {
                    },
                    Arn: {
                    },
                    CreateDate: {
                      type: 'timestamp'
                    }
                  }
                },
                EnableDate: {
                  type: 'timestamp'
                }
              }
            }
          },
          IsTruncated: {
            type: 'boolean'
          },
          Marker: {
          }
        }
      }
    },
    putGroupPolicy: {
      name: 'PutGroupPolicy',
      input: {
        type: 'structure',
        members: {
          GroupName: {
            required: true
          },
          PolicyName: {
            required: true
          },
          PolicyDocument: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    putRolePolicy: {
      name: 'PutRolePolicy',
      input: {
        type: 'structure',
        members: {
          RoleName: {
            required: true
          },
          PolicyName: {
            required: true
          },
          PolicyDocument: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    putUserPolicy: {
      name: 'PutUserPolicy',
      input: {
        type: 'structure',
        members: {
          UserName: {
            required: true
          },
          PolicyName: {
            required: true
          },
          PolicyDocument: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    removeRoleFromInstanceProfile: {
      name: 'RemoveRoleFromInstanceProfile',
      input: {
        type: 'structure',
        members: {
          InstanceProfileName: {
            required: true
          },
          RoleName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    removeUserFromGroup: {
      name: 'RemoveUserFromGroup',
      input: {
        type: 'structure',
        members: {
          GroupName: {
            required: true
          },
          UserName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    resyncMFADevice: {
      name: 'ResyncMFADevice',
      input: {
        type: 'structure',
        members: {
          UserName: {
            required: true
          },
          SerialNumber: {
            required: true
          },
          AuthenticationCode1: {
            required: true
          },
          AuthenticationCode2: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    updateAccessKey: {
      name: 'UpdateAccessKey',
      input: {
        type: 'structure',
        members: {
          UserName: {
          },
          AccessKeyId: {
            required: true
          },
          Status: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    updateAccountPasswordPolicy: {
      name: 'UpdateAccountPasswordPolicy',
      input: {
        type: 'structure',
        members: {
          MinimumPasswordLength: {
            type: 'integer'
          },
          RequireSymbols: {
            type: 'boolean'
          },
          RequireNumbers: {
            type: 'boolean'
          },
          RequireUppercaseCharacters: {
            type: 'boolean'
          },
          RequireLowercaseCharacters: {
            type: 'boolean'
          },
          AllowUsersToChangePassword: {
            type: 'boolean'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    updateAssumeRolePolicy: {
      name: 'UpdateAssumeRolePolicy',
      input: {
        type: 'structure',
        members: {
          RoleName: {
            required: true
          },
          PolicyDocument: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    updateGroup: {
      name: 'UpdateGroup',
      input: {
        type: 'structure',
        members: {
          GroupName: {
            required: true
          },
          NewPath: {
          },
          NewGroupName: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    updateLoginProfile: {
      name: 'UpdateLoginProfile',
      input: {
        type: 'structure',
        members: {
          UserName: {
            required: true
          },
          Password: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    updateServerCertificate: {
      name: 'UpdateServerCertificate',
      input: {
        type: 'structure',
        members: {
          ServerCertificateName: {
            required: true
          },
          NewPath: {
          },
          NewServerCertificateName: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    updateSigningCertificate: {
      name: 'UpdateSigningCertificate',
      input: {
        type: 'structure',
        members: {
          UserName: {
          },
          CertificateId: {
            required: true
          },
          Status: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    updateUser: {
      name: 'UpdateUser',
      input: {
        type: 'structure',
        members: {
          UserName: {
            required: true
          },
          NewPath: {
          },
          NewUserName: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    uploadServerCertificate: {
      name: 'UploadServerCertificate',
      input: {
        type: 'structure',
        members: {
          Path: {
          },
          ServerCertificateName: {
            required: true
          },
          CertificateBody: {
            required: true
          },
          PrivateKey: {
            required: true
          },
          CertificateChain: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          ServerCertificateMetadata: {
            type: 'structure',
            members: {
              Path: {
              },
              ServerCertificateName: {
              },
              ServerCertificateId: {
              },
              Arn: {
              },
              UploadDate: {
                type: 'timestamp'
              }
            }
          }
        }
      }
    },
    uploadSigningCertificate: {
      name: 'UploadSigningCertificate',
      input: {
        type: 'structure',
        members: {
          UserName: {
          },
          CertificateBody: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Certificate: {
            type: 'structure',
            members: {
              UserName: {
              },
              CertificateId: {
              },
              CertificateBody: {
              },
              Status: {
              },
              UploadDate: {
                type: 'timestamp'
              }
            }
          }
        }
      }
    }
  }
};

},{}],58:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

module.exports = {
  format: 'query',
  apiVersion: '2010-06-01',
  endpointPrefix: 'importexport',
  globalEndpoint: 'importexport.amazonaws.com',
  resultWrapped: true,
  serviceFullName: 'AWS Import/Export',
  signatureVersion: 'v2',
  timestampFormat: 'iso8601',
  operations: {
    cancelJob: {
      name: 'CancelJob',
      http: {
        method: 'POST',
        uri: '/?Operation=CancelJob'
      },
      input: {
        type: 'structure',
        members: {
          JobId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Success: {
            type: 'boolean'
          }
        }
      }
    },
    createJob: {
      name: 'CreateJob',
      http: {
        method: 'POST',
        uri: '/?Operation=CreateJob'
      },
      input: {
        type: 'structure',
        members: {
          JobType: {
            required: true
          },
          Manifest: {
            required: true
          },
          ManifestAddendum: {
          },
          ValidateOnly: {
            type: 'boolean',
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          JobId: {
          },
          JobType: {
          },
          AwsShippingAddress: {
          },
          Signature: {
          },
          SignatureFileContents: {
          },
          WarningMessage: {
          }
        }
      }
    },
    getStatus: {
      name: 'GetStatus',
      http: {
        method: 'POST',
        uri: '/?Operation=GetStatus'
      },
      input: {
        type: 'structure',
        members: {
          JobId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          JobId: {
          },
          JobType: {
          },
          AwsShippingAddress: {
          },
          LocationCode: {
          },
          LocationMessage: {
          },
          ProgressCode: {
          },
          ProgressMessage: {
          },
          Carrier: {
          },
          TrackingNumber: {
          },
          LogBucket: {
          },
          LogKey: {
          },
          ErrorCount: {
            type: 'integer'
          },
          Signature: {
          },
          SignatureFileContents: {
          },
          CurrentManifest: {
          },
          CreationDate: {
            type: 'timestamp'
          }
        }
      }
    },
    listJobs: {
      name: 'ListJobs',
      http: {
        method: 'POST',
        uri: '/?Operation=ListJobs'
      },
      input: {
        type: 'structure',
        members: {
          MaxJobs: {
            type: 'integer'
          },
          Marker: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Jobs: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                JobId: {
                },
                CreationDate: {
                  type: 'timestamp'
                },
                IsCanceled: {
                  type: 'boolean'
                },
                JobType: {
                }
              }
            }
          },
          IsTruncated: {
            type: 'boolean'
          }
        }
      }
    },
    updateJob: {
      name: 'UpdateJob',
      http: {
        method: 'POST',
        uri: '/?Operation=UpdateJob'
      },
      input: {
        type: 'structure',
        members: {
          JobId: {
            required: true
          },
          Manifest: {
            required: true
          },
          JobType: {
            required: true
          },
          ValidateOnly: {
            type: 'boolean',
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Success: {
            type: 'boolean'
          },
          WarningMessage: {
          }
        }
      }
    }
  }
};

},{}],59:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

module.exports = {
  format: 'json',
  apiVersion: '2013-02-18',
  endpointPrefix: 'opsworks',
  jsonVersion: '1.1',
  serviceFullName: 'AWS OpsWorks',
  signatureVersion: 'v4',
  targetPrefix: 'OpsWorks_20130218',
  timestampFormat: 'iso8601',
  operations: {
    cloneStack: {
      name: 'CloneStack',
      input: {
        type: 'structure',
        members: {
          SourceStackId: {
            required: true
          },
          Name: {
            required: true
          },
          Region: {
            required: true
          },
          Attributes: {
            type: 'map'
          },
          ServiceRoleArn: {
            required: true
          },
          DefaultInstanceProfileArn: {
            required: true
          },
          DefaultOs: {
          },
          HostnameTheme: {
          },
          DefaultAvailabilityZone: {
          },
          CustomJson: {
          },
          UseCustomCookbooks: {
            type: 'boolean'
          },
          CustomCookbooksSource: {
            type: 'structure',
            members: {
              Type: {
              },
              Url: {
              },
              Username: {
              },
              Password: {
              },
              SshKey: {
              },
              Revision: {
              }
            }
          },
          DefaultSshKeyName: {
          },
          ClonePermissions: {
            type: 'boolean'
          },
          CloneAppIds: {
            type: 'list'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          StackId: {
          }
        }
      }
    },
    createApp: {
      name: 'CreateApp',
      input: {
        type: 'structure',
        members: {
          StackId: {
            required: true
          },
          Name: {
            required: true
          },
          Description: {
          },
          Type: {
            required: true
          },
          AppSource: {
            type: 'structure',
            members: {
              Type: {
              },
              Url: {
              },
              Username: {
              },
              Password: {
              },
              SshKey: {
              },
              Revision: {
              }
            }
          },
          Domains: {
            type: 'list'
          },
          EnableSsl: {
            type: 'boolean'
          },
          SslConfiguration: {
            type: 'structure',
            members: {
              Certificate: {
                required: true
              },
              PrivateKey: {
                required: true
              },
              Chain: {
              }
            }
          },
          Attributes: {
            type: 'map'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          AppId: {
          }
        }
      }
    },
    createDeployment: {
      name: 'CreateDeployment',
      input: {
        type: 'structure',
        members: {
          StackId: {
            required: true
          },
          AppId: {
            required: true
          },
          InstanceIds: {
            type: 'list'
          },
          Command: {
            type: 'structure',
            members: {
              Name: {
                required: true
              },
              Args: {
                type: 'map',
                members: {
                  type: 'list'
                },
                required: true
              }
            },
            required: true
          },
          Comment: {
          },
          CustomJson: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          DeploymentId: {
          }
        }
      }
    },
    createInstance: {
      name: 'CreateInstance',
      input: {
        type: 'structure',
        members: {
          StackId: {
            required: true
          },
          LayerIds: {
            type: 'list',
            required: true
          },
          InstanceType: {
          },
          AutoScalingType: {
          },
          Hostname: {
          },
          Os: {
          },
          SshKeyName: {
          },
          AvailabilityZone: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          InstanceId: {
          }
        }
      }
    },
    createLayer: {
      name: 'CreateLayer',
      input: {
        type: 'structure',
        members: {
          StackId: {
            required: true
          },
          Type: {
            required: true
          },
          Name: {
            required: true
          },
          Shortname: {
          },
          Attributes: {
            type: 'map'
          },
          CustomInstanceProfileArn: {
          },
          CustomSecurityGroupIds: {
            type: 'list'
          },
          Packages: {
            type: 'list'
          },
          VolumeConfigurations: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                MountPoint: {
                  required: true
                },
                RaidLevel: {
                  type: 'integer'
                },
                NumberOfDisks: {
                  type: 'integer',
                  required: true
                },
                Size: {
                  type: 'integer',
                  required: true
                }
              }
            }
          },
          EnableAutoHealing: {
            type: 'boolean'
          },
          AutoAssignElasticIps: {
            type: 'boolean'
          },
          CustomRecipes: {
            type: 'structure',
            members: {
              Setup: {
                type: 'list'
              },
              Configure: {
                type: 'list'
              },
              Deploy: {
                type: 'list'
              },
              Undeploy: {
                type: 'list'
              },
              Shutdown: {
                type: 'list'
              }
            }
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          LayerId: {
          }
        }
      }
    },
    createStack: {
      name: 'CreateStack',
      input: {
        type: 'structure',
        members: {
          Name: {
            required: true
          },
          Region: {
            required: true
          },
          Attributes: {
            type: 'map'
          },
          ServiceRoleArn: {
            required: true
          },
          DefaultInstanceProfileArn: {
            required: true
          },
          DefaultOs: {
          },
          HostnameTheme: {
          },
          DefaultAvailabilityZone: {
          },
          CustomJson: {
          },
          UseCustomCookbooks: {
            type: 'boolean'
          },
          CustomCookbooksSource: {
            type: 'structure',
            members: {
              Type: {
              },
              Url: {
              },
              Username: {
              },
              Password: {
              },
              SshKey: {
              },
              Revision: {
              }
            }
          },
          DefaultSshKeyName: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          StackId: {
          }
        }
      }
    },
    createUserProfile: {
      name: 'CreateUserProfile',
      input: {
        type: 'structure',
        members: {
          IamUserArn: {
            required: true
          },
          SshUsername: {
          },
          SshPublicKey: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          IamUserArn: {
          }
        }
      }
    },
    deleteApp: {
      name: 'DeleteApp',
      input: {
        type: 'structure',
        members: {
          AppId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteInstance: {
      name: 'DeleteInstance',
      input: {
        type: 'structure',
        members: {
          InstanceId: {
            required: true
          },
          DeleteElasticIp: {
            type: 'boolean'
          },
          DeleteVolumes: {
            type: 'boolean'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteLayer: {
      name: 'DeleteLayer',
      input: {
        type: 'structure',
        members: {
          LayerId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteStack: {
      name: 'DeleteStack',
      input: {
        type: 'structure',
        members: {
          StackId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteUserProfile: {
      name: 'DeleteUserProfile',
      input: {
        type: 'structure',
        members: {
          IamUserArn: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    describeApps: {
      name: 'DescribeApps',
      input: {
        type: 'structure',
        members: {
          StackId: {
          },
          AppIds: {
            type: 'list'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Apps: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                AppId: {
                },
                StackId: {
                },
                Name: {
                },
                Description: {
                },
                Type: {
                },
                AppSource: {
                  type: 'structure',
                  members: {
                    Type: {
                    },
                    Url: {
                    },
                    Username: {
                    },
                    Password: {
                    },
                    SshKey: {
                    },
                    Revision: {
                    }
                  }
                },
                Domains: {
                  type: 'list'
                },
                EnableSsl: {
                  type: 'boolean'
                },
                SslConfiguration: {
                  type: 'structure',
                  members: {
                    Certificate: {
                    },
                    PrivateKey: {
                    },
                    Chain: {
                    }
                  }
                },
                Attributes: {
                  type: 'map'
                },
                CreatedAt: {
                }
              }
            }
          }
        }
      }
    },
    describeCommands: {
      name: 'DescribeCommands',
      input: {
        type: 'structure',
        members: {
          DeploymentId: {
          },
          InstanceId: {
          },
          CommandIds: {
            type: 'list'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Commands: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                CommandId: {
                },
                InstanceId: {
                },
                DeploymentId: {
                },
                CreatedAt: {
                },
                AcknowledgedAt: {
                },
                CompletedAt: {
                },
                Status: {
                },
                ExitCode: {
                  type: 'integer'
                },
                LogUrl: {
                },
                Type: {
                }
              }
            }
          }
        }
      }
    },
    describeDeployments: {
      name: 'DescribeDeployments',
      input: {
        type: 'structure',
        members: {
          StackId: {
          },
          AppId: {
          },
          DeploymentIds: {
            type: 'list'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Deployments: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                DeploymentId: {
                },
                StackId: {
                },
                AppId: {
                },
                CreatedAt: {
                },
                CompletedAt: {
                },
                Duration: {
                  type: 'integer'
                },
                IamUserArn: {
                },
                Comment: {
                },
                Command: {
                  type: 'structure',
                  members: {
                    Name: {
                    },
                    Args: {
                      type: 'map',
                      members: {
                        type: 'list'
                      }
                    }
                  }
                },
                Status: {
                },
                CustomJson: {
                },
                InstanceIds: {
                  type: 'list'
                }
              }
            }
          }
        }
      }
    },
    describeElasticIps: {
      name: 'DescribeElasticIps',
      input: {
        type: 'structure',
        members: {
          InstanceId: {
          },
          Ips: {
            type: 'list'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          ElasticIps: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Ip: {
                },
                Name: {
                },
                Region: {
                }
              }
            }
          }
        }
      }
    },
    describeInstances: {
      name: 'DescribeInstances',
      input: {
        type: 'structure',
        members: {
          StackId: {
          },
          LayerId: {
          },
          AppId: {
          },
          InstanceIds: {
            type: 'list'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Instances: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                InstanceId: {
                },
                Ec2InstanceId: {
                },
                Hostname: {
                },
                StackId: {
                },
                LayerIds: {
                  type: 'list'
                },
                SecurityGroupIds: {
                  type: 'list'
                },
                InstanceType: {
                },
                InstanceProfileArn: {
                },
                Status: {
                },
                Os: {
                },
                AvailabilityZone: {
                },
                PublicDns: {
                },
                PrivateDns: {
                },
                PublicIp: {
                },
                PrivateIp: {
                },
                ElasticIp: {
                },
                AutoScalingType: {
                },
                SshKeyName: {
                },
                SshHostRsaKeyFingerprint: {
                },
                SshHostDsaKeyFingerprint: {
                },
                CreatedAt: {
                },
                LastServiceErrorId: {
                }
              }
            }
          }
        }
      }
    },
    describeLayers: {
      name: 'DescribeLayers',
      input: {
        type: 'structure',
        members: {
          StackId: {
            required: true
          },
          LayerIds: {
            type: 'list'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Layers: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                StackId: {
                },
                LayerId: {
                },
                Type: {
                },
                Name: {
                },
                Shortname: {
                },
                Attributes: {
                  type: 'map'
                },
                CustomInstanceProfileArn: {
                },
                CustomSecurityGroupIds: {
                  type: 'list'
                },
                DefaultSecurityGroupNames: {
                  type: 'list'
                },
                Packages: {
                  type: 'list'
                },
                VolumeConfigurations: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      MountPoint: {
                      },
                      RaidLevel: {
                        type: 'integer'
                      },
                      NumberOfDisks: {
                        type: 'integer'
                      },
                      Size: {
                        type: 'integer'
                      }
                    }
                  }
                },
                EnableAutoHealing: {
                  type: 'boolean'
                },
                AutoAssignElasticIps: {
                  type: 'boolean'
                },
                DefaultRecipes: {
                  type: 'structure',
                  members: {
                    Setup: {
                      type: 'list'
                    },
                    Configure: {
                      type: 'list'
                    },
                    Deploy: {
                      type: 'list'
                    },
                    Undeploy: {
                      type: 'list'
                    },
                    Shutdown: {
                      type: 'list'
                    }
                  }
                },
                CustomRecipes: {
                  type: 'structure',
                  members: {
                    Setup: {
                      type: 'list'
                    },
                    Configure: {
                      type: 'list'
                    },
                    Deploy: {
                      type: 'list'
                    },
                    Undeploy: {
                      type: 'list'
                    },
                    Shutdown: {
                      type: 'list'
                    }
                  }
                },
                CreatedAt: {
                }
              }
            }
          }
        }
      }
    },
    describeLoadBasedAutoScaling: {
      name: 'DescribeLoadBasedAutoScaling',
      input: {
        type: 'structure',
        members: {
          LayerIds: {
            type: 'list',
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          LoadBasedAutoScalingConfigurations: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                LayerId: {
                },
                Enable: {
                  type: 'boolean'
                },
                UpScaling: {
                  type: 'structure',
                  members: {
                    InstanceCount: {
                      type: 'integer'
                    },
                    ThresholdsWaitTime: {
                      type: 'integer'
                    },
                    IgnoreMetricsTime: {
                      type: 'integer'
                    },
                    CpuThreshold: {
                      type: 'float'
                    },
                    MemoryThreshold: {
                      type: 'float'
                    },
                    LoadThreshold: {
                      type: 'float'
                    }
                  }
                },
                DownScaling: {
                  type: 'structure',
                  members: {
                    InstanceCount: {
                      type: 'integer'
                    },
                    ThresholdsWaitTime: {
                      type: 'integer'
                    },
                    IgnoreMetricsTime: {
                      type: 'integer'
                    },
                    CpuThreshold: {
                      type: 'float'
                    },
                    MemoryThreshold: {
                      type: 'float'
                    },
                    LoadThreshold: {
                      type: 'float'
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    describePermissions: {
      name: 'DescribePermissions',
      input: {
        type: 'structure',
        members: {
          IamUserArn: {
            required: true
          },
          StackId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Permissions: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                StackId: {
                },
                IamUserArn: {
                },
                AllowSsh: {
                  type: 'boolean'
                },
                AllowSudo: {
                  type: 'boolean'
                }
              }
            }
          }
        }
      }
    },
    describeRaidArrays: {
      name: 'DescribeRaidArrays',
      input: {
        type: 'structure',
        members: {
          InstanceId: {
          },
          RaidArrayIds: {
            type: 'list'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          RaidArrays: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                RaidArrayId: {
                },
                InstanceId: {
                },
                Name: {
                },
                RaidLevel: {
                  type: 'integer'
                },
                NumberOfDisks: {
                  type: 'integer'
                },
                Size: {
                  type: 'integer'
                },
                Device: {
                },
                MountPoint: {
                },
                AvailabilityZone: {
                },
                CreatedAt: {
                }
              }
            }
          }
        }
      }
    },
    describeServiceErrors: {
      name: 'DescribeServiceErrors',
      input: {
        type: 'structure',
        members: {
          StackId: {
          },
          InstanceId: {
          },
          ServiceErrorIds: {
            type: 'list'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          ServiceErrors: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                ServiceErrorId: {
                },
                StackId: {
                },
                InstanceId: {
                },
                Type: {
                },
                Message: {
                },
                CreatedAt: {
                }
              }
            }
          }
        }
      }
    },
    describeStacks: {
      name: 'DescribeStacks',
      input: {
        type: 'structure',
        members: {
          StackIds: {
            type: 'list'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Stacks: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                StackId: {
                },
                Name: {
                },
                Region: {
                },
                Attributes: {
                  type: 'map'
                },
                ServiceRoleArn: {
                },
                DefaultInstanceProfileArn: {
                },
                DefaultOs: {
                },
                HostnameTheme: {
                },
                DefaultAvailabilityZone: {
                },
                CustomJson: {
                },
                UseCustomCookbooks: {
                  type: 'boolean'
                },
                CustomCookbooksSource: {
                  type: 'structure',
                  members: {
                    Type: {
                    },
                    Url: {
                    },
                    Username: {
                    },
                    Password: {
                    },
                    SshKey: {
                    },
                    Revision: {
                    }
                  }
                },
                DefaultSshKeyName: {
                },
                CreatedAt: {
                }
              }
            }
          }
        }
      }
    },
    describeTimeBasedAutoScaling: {
      name: 'DescribeTimeBasedAutoScaling',
      input: {
        type: 'structure',
        members: {
          InstanceIds: {
            type: 'list',
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          TimeBasedAutoScalingConfigurations: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                InstanceId: {
                },
                AutoScalingSchedule: {
                  type: 'structure',
                  members: {
                    Monday: {
                      type: 'map'
                    },
                    Tuesday: {
                      type: 'map'
                    },
                    Wednesday: {
                      type: 'map'
                    },
                    Thursday: {
                      type: 'map'
                    },
                    Friday: {
                      type: 'map'
                    },
                    Saturday: {
                      type: 'map'
                    },
                    Sunday: {
                      type: 'map'
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    describeUserProfiles: {
      name: 'DescribeUserProfiles',
      input: {
        type: 'structure',
        members: {
          IamUserArns: {
            type: 'list',
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          UserProfiles: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                IamUserArn: {
                },
                Name: {
                },
                SshUsername: {
                },
                SshPublicKey: {
                }
              }
            }
          }
        }
      }
    },
    describeVolumes: {
      name: 'DescribeVolumes',
      input: {
        type: 'structure',
        members: {
          InstanceId: {
          },
          RaidArrayId: {
          },
          VolumeIds: {
            type: 'list'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Volumes: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                VolumeId: {
                },
                Ec2VolumeId: {
                },
                Name: {
                },
                RaidArrayId: {
                },
                InstanceId: {
                },
                Status: {
                },
                Size: {
                  type: 'integer'
                },
                Device: {
                },
                MountPoint: {
                },
                Region: {
                },
                AvailabilityZone: {
                }
              }
            }
          }
        }
      }
    },
    getHostnameSuggestion: {
      name: 'GetHostnameSuggestion',
      input: {
        type: 'structure',
        members: {
          LayerId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          LayerId: {
          },
          Hostname: {
          }
        }
      }
    },
    rebootInstance: {
      name: 'RebootInstance',
      input: {
        type: 'structure',
        members: {
          InstanceId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    setLoadBasedAutoScaling: {
      name: 'SetLoadBasedAutoScaling',
      input: {
        type: 'structure',
        members: {
          LayerId: {
            required: true
          },
          Enable: {
            type: 'boolean'
          },
          UpScaling: {
            type: 'structure',
            members: {
              InstanceCount: {
                type: 'integer'
              },
              ThresholdsWaitTime: {
                type: 'integer'
              },
              IgnoreMetricsTime: {
                type: 'integer'
              },
              CpuThreshold: {
                type: 'float'
              },
              MemoryThreshold: {
                type: 'float'
              },
              LoadThreshold: {
                type: 'float'
              }
            }
          },
          DownScaling: {
            type: 'structure',
            members: {
              InstanceCount: {
                type: 'integer'
              },
              ThresholdsWaitTime: {
                type: 'integer'
              },
              IgnoreMetricsTime: {
                type: 'integer'
              },
              CpuThreshold: {
                type: 'float'
              },
              MemoryThreshold: {
                type: 'float'
              },
              LoadThreshold: {
                type: 'float'
              }
            }
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    setPermission: {
      name: 'SetPermission',
      input: {
        type: 'structure',
        members: {
          StackId: {
            required: true
          },
          IamUserArn: {
            required: true
          },
          AllowSsh: {
            type: 'boolean'
          },
          AllowSudo: {
            type: 'boolean'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    setTimeBasedAutoScaling: {
      name: 'SetTimeBasedAutoScaling',
      input: {
        type: 'structure',
        members: {
          InstanceId: {
            required: true
          },
          AutoScalingSchedule: {
            type: 'structure',
            members: {
              Monday: {
                type: 'map'
              },
              Tuesday: {
                type: 'map'
              },
              Wednesday: {
                type: 'map'
              },
              Thursday: {
                type: 'map'
              },
              Friday: {
                type: 'map'
              },
              Saturday: {
                type: 'map'
              },
              Sunday: {
                type: 'map'
              }
            },
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    startInstance: {
      name: 'StartInstance',
      input: {
        type: 'structure',
        members: {
          InstanceId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    startStack: {
      name: 'StartStack',
      input: {
        type: 'structure',
        members: {
          StackId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    stopInstance: {
      name: 'StopInstance',
      input: {
        type: 'structure',
        members: {
          InstanceId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    stopStack: {
      name: 'StopStack',
      input: {
        type: 'structure',
        members: {
          StackId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    updateApp: {
      name: 'UpdateApp',
      input: {
        type: 'structure',
        members: {
          AppId: {
            required: true
          },
          Name: {
          },
          Description: {
          },
          Type: {
          },
          AppSource: {
            type: 'structure',
            members: {
              Type: {
              },
              Url: {
              },
              Username: {
              },
              Password: {
              },
              SshKey: {
              },
              Revision: {
              }
            }
          },
          Domains: {
            type: 'list'
          },
          EnableSsl: {
            type: 'boolean'
          },
          SslConfiguration: {
            type: 'structure',
            members: {
              Certificate: {
                required: true
              },
              PrivateKey: {
                required: true
              },
              Chain: {
              }
            }
          },
          Attributes: {
            type: 'map'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    updateInstance: {
      name: 'UpdateInstance',
      input: {
        type: 'structure',
        members: {
          InstanceId: {
            required: true
          },
          LayerIds: {
            type: 'list',
            required: true
          },
          InstanceType: {
          },
          AutoScalingType: {
          },
          Hostname: {
          },
          Os: {
          },
          SshKeyName: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    updateLayer: {
      name: 'UpdateLayer',
      input: {
        type: 'structure',
        members: {
          LayerId: {
            required: true
          },
          Name: {
          },
          Shortname: {
          },
          Attributes: {
            type: 'map'
          },
          CustomInstanceProfileArn: {
          },
          CustomSecurityGroupIds: {
            type: 'list'
          },
          Packages: {
            type: 'list'
          },
          VolumeConfigurations: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                MountPoint: {
                  required: true
                },
                RaidLevel: {
                  type: 'integer'
                },
                NumberOfDisks: {
                  type: 'integer',
                  required: true
                },
                Size: {
                  type: 'integer',
                  required: true
                }
              }
            }
          },
          EnableAutoHealing: {
            type: 'boolean'
          },
          AutoAssignElasticIps: {
            type: 'boolean'
          },
          CustomRecipes: {
            type: 'structure',
            members: {
              Setup: {
                type: 'list'
              },
              Configure: {
                type: 'list'
              },
              Deploy: {
                type: 'list'
              },
              Undeploy: {
                type: 'list'
              },
              Shutdown: {
                type: 'list'
              }
            }
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    updateStack: {
      name: 'UpdateStack',
      input: {
        type: 'structure',
        members: {
          StackId: {
            required: true
          },
          Name: {
          },
          Attributes: {
            type: 'map'
          },
          ServiceRoleArn: {
          },
          DefaultInstanceProfileArn: {
          },
          DefaultOs: {
          },
          HostnameTheme: {
          },
          DefaultAvailabilityZone: {
          },
          CustomJson: {
          },
          UseCustomCookbooks: {
            type: 'boolean'
          },
          CustomCookbooksSource: {
            type: 'structure',
            members: {
              Type: {
              },
              Url: {
              },
              Username: {
              },
              Password: {
              },
              SshKey: {
              },
              Revision: {
              }
            }
          },
          DefaultSshKeyName: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    updateUserProfile: {
      name: 'UpdateUserProfile',
      input: {
        type: 'structure',
        members: {
          IamUserArn: {
            required: true
          },
          SshUsername: {
          },
          SshPublicKey: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    }
  }
};

},{}],62:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

module.exports = {
  format: 'rest-xml',
  apiVersion: '2012-12-12',
  endpointPrefix: 'route53',
  globalEndpoint: 'route53.amazonaws.com',
  serviceAbbreviation: 'Route 53',
  serviceFullName: 'Amazon Route 53',
  signatureVersion: 'v3https',
  timestampFormat: 'iso8601',
  xmlnamespace: 'https://route53.amazonaws.com/doc/2012-12-12/',
  operations: {
    changeResourceRecordSets: {
      name: 'ChangeResourceRecordSets',
      http: {
        method: 'POST',
        uri: '/2012-12-12/hostedzone/{HostedZoneId}/rrset/'
      },
      input: {
        type: 'structure',
        members: {
          HostedZoneId: {
            required: true,
            location: 'uri'
          },
          ChangeBatch: {
            type: 'structure',
            members: {
              Comment: {
              },
              Changes: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    Action: {
                      required: true
                    },
                    ResourceRecordSet: {
                      type: 'structure',
                      members: {
                        Name: {
                          required: true
                        },
                        Type: {
                          required: true
                        },
                        SetIdentifier: {
                        },
                        Weight: {
                          type: 'integer'
                        },
                        Region: {
                        },
                        Failover: {
                        },
                        TTL: {
                          type: 'integer'
                        },
                        ResourceRecords: {
                          type: 'list',
                          members: {
                            type: 'structure',
                            members: {
                              Value: {
                                required: true
                              }
                            },
                            order: [
                              'Value'
                            ],
                            name: 'ResourceRecord'
                          }
                        },
                        AliasTarget: {
                          type: 'structure',
                          members: {
                            HostedZoneId: {
                              required: true
                            },
                            DNSName: {
                              required: true
                            },
                            EvaluateTargetHealth: {
                              type: 'boolean',
                              required: true
                            }
                          },
                          order: [
                            'HostedZoneId',
                            'DNSName',
                            'EvaluateTargetHealth'
                          ]
                        },
                        HealthCheckId: {
                        }
                      },
                      order: [
                        'Name',
                        'Type',
                        'SetIdentifier',
                        'Weight',
                        'Region',
                        'Failover',
                        'TTL',
                        'ResourceRecords',
                        'AliasTarget',
                        'HealthCheckId'
                      ],
                      required: true
                    }
                  },
                  order: [
                    'Action',
                    'ResourceRecordSet'
                  ],
                  name: 'Change'
                },
                required: true
              }
            },
            order: [
              'Comment',
              'Changes'
            ],
            required: true
          }
        },
        order: [
          'HostedZoneId',
          'ChangeBatch'
        ],
        xml: 'ChangeResourceRecordSetsRequest'
      },
      output: {
        type: 'structure',
        members: {
          ChangeInfo: {
            type: 'structure',
            members: {
              Id: {
              },
              Status: {
              },
              SubmittedAt: {
                type: 'timestamp'
              },
              Comment: {
              }
            }
          }
        }
      }
    },
    createHealthCheck: {
      name: 'CreateHealthCheck',
      http: {
        method: 'POST',
        uri: '/2012-12-12/healthcheck'
      },
      input: {
        type: 'structure',
        members: {
          CallerReference: {
            required: true
          },
          HealthCheckConfig: {
            type: 'structure',
            members: {
              IPAddress: {
                required: true
              },
              Port: {
                type: 'integer'
              },
              Type: {
                required: true
              },
              ResourcePath: {
              },
              FullyQualifiedDomainName: {
              }
            },
            order: [
              'IPAddress',
              'Port',
              'Type',
              'ResourcePath',
              'FullyQualifiedDomainName'
            ],
            required: true
          }
        },
        order: [
          'CallerReference',
          'HealthCheckConfig'
        ],
        xml: 'CreateHealthCheckRequest'
      },
      output: {
        type: 'structure',
        members: {
          HealthCheck: {
            type: 'structure',
            members: {
              Id: {
              },
              CallerReference: {
              },
              HealthCheckConfig: {
                type: 'structure',
                members: {
                  IPAddress: {
                  },
                  Port: {
                    type: 'integer'
                  },
                  Type: {
                  },
                  ResourcePath: {
                  },
                  FullyQualifiedDomainName: {
                  }
                }
              }
            }
          },
          Location: {
            location: 'header',
            name: 'Location'
          }
        }
      }
    },
    createHostedZone: {
      name: 'CreateHostedZone',
      http: {
        method: 'POST',
        uri: '/2012-12-12/hostedzone'
      },
      input: {
        type: 'structure',
        members: {
          Name: {
            required: true
          },
          CallerReference: {
            required: true
          },
          HostedZoneConfig: {
            type: 'structure',
            members: {
              Comment: {
              }
            },
            order: [
              'Comment'
            ]
          }
        },
        order: [
          'Name',
          'CallerReference',
          'HostedZoneConfig'
        ],
        xml: 'CreateHostedZoneRequest'
      },
      output: {
        type: 'structure',
        members: {
          HostedZone: {
            type: 'structure',
            members: {
              Id: {
              },
              Name: {
              },
              CallerReference: {
              },
              Config: {
                type: 'structure',
                members: {
                  Comment: {
                  }
                }
              },
              ResourceRecordSetCount: {
                type: 'integer'
              }
            }
          },
          ChangeInfo: {
            type: 'structure',
            members: {
              Id: {
              },
              Status: {
              },
              SubmittedAt: {
                type: 'timestamp'
              },
              Comment: {
              }
            }
          },
          DelegationSet: {
            type: 'structure',
            members: {
              NameServers: {
                type: 'list',
                members: {
                  name: 'NameServer'
                }
              }
            }
          },
          Location: {
            location: 'header',
            name: 'Location'
          }
        }
      }
    },
    deleteHealthCheck: {
      name: 'DeleteHealthCheck',
      http: {
        method: 'DELETE',
        uri: '/2012-12-12/healthcheck/{HealthCheckId}'
      },
      input: {
        type: 'structure',
        members: {
          HealthCheckId: {
            required: true,
            location: 'uri'
          }
        },
        order: [
          'HealthCheckId'
        ]
      },
      output: {
        type: 'structure'
      }
    },
    deleteHostedZone: {
      name: 'DeleteHostedZone',
      http: {
        method: 'DELETE',
        uri: '/2012-12-12/hostedzone/{Id}'
      },
      input: {
        type: 'structure',
        members: {
          Id: {
            required: true,
            location: 'uri'
          }
        },
        order: [
          'Id'
        ]
      },
      output: {
        type: 'structure',
        members: {
          ChangeInfo: {
            type: 'structure',
            members: {
              Id: {
              },
              Status: {
              },
              SubmittedAt: {
                type: 'timestamp'
              },
              Comment: {
              }
            }
          }
        }
      }
    },
    getChange: {
      name: 'GetChange',
      http: {
        method: 'GET',
        uri: '/2012-12-12/change/{Id}'
      },
      input: {
        type: 'structure',
        members: {
          Id: {
            required: true,
            location: 'uri'
          }
        },
        order: [
          'Id'
        ]
      },
      output: {
        type: 'structure',
        members: {
          ChangeInfo: {
            type: 'structure',
            members: {
              Id: {
              },
              Status: {
              },
              SubmittedAt: {
                type: 'timestamp'
              },
              Comment: {
              }
            }
          }
        }
      }
    },
    getHealthCheck: {
      name: 'GetHealthCheck',
      http: {
        method: 'GET',
        uri: '/2012-12-12/healthcheck/{HealthCheckId}'
      },
      input: {
        type: 'structure',
        members: {
          HealthCheckId: {
            required: true,
            location: 'uri'
          }
        },
        order: [
          'HealthCheckId'
        ]
      },
      output: {
        type: 'structure',
        members: {
          HealthCheck: {
            type: 'structure',
            members: {
              Id: {
              },
              CallerReference: {
              },
              HealthCheckConfig: {
                type: 'structure',
                members: {
                  IPAddress: {
                  },
                  Port: {
                    type: 'integer'
                  },
                  Type: {
                  },
                  ResourcePath: {
                  },
                  FullyQualifiedDomainName: {
                  }
                }
              }
            }
          }
        }
      }
    },
    getHostedZone: {
      name: 'GetHostedZone',
      http: {
        method: 'GET',
        uri: '/2012-12-12/hostedzone/{Id}'
      },
      input: {
        type: 'structure',
        members: {
          Id: {
            required: true,
            location: 'uri'
          }
        },
        order: [
          'Id'
        ]
      },
      output: {
        type: 'structure',
        members: {
          HostedZone: {
            type: 'structure',
            members: {
              Id: {
              },
              Name: {
              },
              CallerReference: {
              },
              Config: {
                type: 'structure',
                members: {
                  Comment: {
                  }
                }
              },
              ResourceRecordSetCount: {
                type: 'integer'
              }
            }
          },
          DelegationSet: {
            type: 'structure',
            members: {
              NameServers: {
                type: 'list',
                members: {
                  name: 'NameServer'
                }
              }
            }
          }
        }
      }
    },
    listHealthChecks: {
      name: 'ListHealthChecks',
      http: {
        method: 'GET',
        uri: '/2012-12-12/healthcheck?marker={Marker}&maxitems={MaxItems}'
      },
      input: {
        type: 'structure',
        members: {
          Marker: {
            location: 'uri'
          },
          MaxItems: {
            location: 'uri'
          }
        },
        order: [
          'Marker',
          'MaxItems'
        ]
      },
      output: {
        type: 'structure',
        members: {
          HealthChecks: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Id: {
                },
                CallerReference: {
                },
                HealthCheckConfig: {
                  type: 'structure',
                  members: {
                    IPAddress: {
                    },
                    Port: {
                      type: 'integer'
                    },
                    Type: {
                    },
                    ResourcePath: {
                    },
                    FullyQualifiedDomainName: {
                    }
                  }
                }
              },
              name: 'HealthCheck'
            }
          },
          Marker: {
          },
          IsTruncated: {
            type: 'boolean'
          },
          NextMarker: {
          },
          MaxItems: {
          }
        }
      }
    },
    listHostedZones: {
      name: 'ListHostedZones',
      http: {
        method: 'GET',
        uri: '/2012-12-12/hostedzone?marker={Marker}&maxitems={MaxItems}'
      },
      input: {
        type: 'structure',
        members: {
          Marker: {
            location: 'uri'
          },
          MaxItems: {
            location: 'uri'
          }
        },
        order: [
          'Marker',
          'MaxItems'
        ]
      },
      output: {
        type: 'structure',
        members: {
          HostedZones: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Id: {
                },
                Name: {
                },
                CallerReference: {
                },
                Config: {
                  type: 'structure',
                  members: {
                    Comment: {
                    }
                  }
                },
                ResourceRecordSetCount: {
                  type: 'integer'
                }
              },
              name: 'HostedZone'
            }
          },
          Marker: {
          },
          IsTruncated: {
            type: 'boolean'
          },
          NextMarker: {
          },
          MaxItems: {
          }
        }
      }
    },
    listResourceRecordSets: {
      name: 'ListResourceRecordSets',
      http: {
        method: 'GET',
        uri: '/2012-12-12/hostedzone/{HostedZoneId}/rrset?type={StartRecordType}&name={StartRecordName}&identifier={StartRecordIdentifier}&maxitems={MaxItems}'
      },
      input: {
        type: 'structure',
        members: {
          HostedZoneId: {
            required: true,
            location: 'uri'
          },
          StartRecordName: {
            location: 'uri'
          },
          StartRecordType: {
            location: 'uri'
          },
          StartRecordIdentifier: {
            location: 'uri'
          },
          MaxItems: {
            location: 'uri'
          }
        },
        order: [
          'HostedZoneId',
          'StartRecordName',
          'StartRecordType',
          'StartRecordIdentifier',
          'MaxItems'
        ]
      },
      output: {
        type: 'structure',
        members: {
          ResourceRecordSets: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                },
                Type: {
                },
                SetIdentifier: {
                },
                Weight: {
                  type: 'integer'
                },
                Region: {
                },
                Failover: {
                },
                TTL: {
                  type: 'integer'
                },
                ResourceRecords: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      Value: {
                      }
                    },
                    name: 'ResourceRecord'
                  }
                },
                AliasTarget: {
                  type: 'structure',
                  members: {
                    HostedZoneId: {
                    },
                    DNSName: {
                    },
                    EvaluateTargetHealth: {
                      type: 'boolean'
                    }
                  }
                },
                HealthCheckId: {
                }
              },
              name: 'ResourceRecordSet'
            }
          },
          IsTruncated: {
            type: 'boolean'
          },
          NextRecordName: {
          },
          NextRecordType: {
          },
          NextRecordIdentifier: {
          },
          MaxItems: {
          }
        }
      }
    }
  }
};

},{}],61:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

module.exports = {
  format: 'query',
  apiVersion: '2012-12-01',
  endpointPrefix: 'redshift',
  resultWrapped: true,
  serviceFullName: 'Amazon Redshift',
  signatureVersion: 'v4',
  timestampFormat: 'iso8601',
  operations: {
    authorizeClusterSecurityGroupIngress: {
      name: 'AuthorizeClusterSecurityGroupIngress',
      input: {
        type: 'structure',
        members: {
          ClusterSecurityGroupName: {
            required: true
          },
          CIDRIP: {
          },
          EC2SecurityGroupName: {
          },
          EC2SecurityGroupOwnerId: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          ClusterSecurityGroup: {
            type: 'structure',
            members: {
              ClusterSecurityGroupName: {
              },
              Description: {
              },
              EC2SecurityGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    Status: {
                    },
                    EC2SecurityGroupName: {
                    },
                    EC2SecurityGroupOwnerId: {
                    }
                  },
                  name: 'EC2SecurityGroup'
                }
              },
              IPRanges: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    Status: {
                    },
                    CIDRIP: {
                    }
                  },
                  name: 'IPRange'
                }
              }
            },
            wrapper: true
          }
        }
      }
    },
    copyClusterSnapshot: {
      name: 'CopyClusterSnapshot',
      input: {
        type: 'structure',
        members: {
          SourceSnapshotIdentifier: {
            required: true
          },
          TargetSnapshotIdentifier: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Snapshot: {
            type: 'structure',
            members: {
              SnapshotIdentifier: {
              },
              ClusterIdentifier: {
              },
              SnapshotCreateTime: {
                type: 'timestamp'
              },
              Status: {
              },
              Port: {
                type: 'integer'
              },
              AvailabilityZone: {
              },
              ClusterCreateTime: {
                type: 'timestamp'
              },
              MasterUsername: {
              },
              ClusterVersion: {
              },
              SnapshotType: {
              },
              NodeType: {
              },
              NumberOfNodes: {
                type: 'integer'
              },
              DBName: {
              },
              VpcId: {
              }
            },
            wrapper: true
          }
        }
      }
    },
    createCluster: {
      name: 'CreateCluster',
      input: {
        type: 'structure',
        members: {
          DBName: {
          },
          ClusterIdentifier: {
            required: true
          },
          ClusterType: {
          },
          NodeType: {
            required: true
          },
          MasterUsername: {
            required: true
          },
          MasterUserPassword: {
            required: true
          },
          ClusterSecurityGroups: {
            type: 'list',
            members: {
              name: 'ClusterSecurityGroupName'
            }
          },
          VpcSecurityGroupIds: {
            type: 'list',
            members: {
              name: 'VpcSecurityGroupId'
            }
          },
          ClusterSubnetGroupName: {
          },
          AvailabilityZone: {
          },
          PreferredMaintenanceWindow: {
          },
          ClusterParameterGroupName: {
          },
          AutomatedSnapshotRetentionPeriod: {
            type: 'integer'
          },
          Port: {
            type: 'integer'
          },
          ClusterVersion: {
          },
          AllowVersionUpgrade: {
            type: 'boolean'
          },
          NumberOfNodes: {
            type: 'integer'
          },
          PubliclyAccessible: {
            type: 'boolean'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Cluster: {
            type: 'structure',
            members: {
              ClusterIdentifier: {
              },
              NodeType: {
              },
              ClusterStatus: {
              },
              ModifyStatus: {
              },
              MasterUsername: {
              },
              DBName: {
              },
              Endpoint: {
                type: 'structure',
                members: {
                  Address: {
                  },
                  Port: {
                    type: 'integer'
                  }
                }
              },
              ClusterCreateTime: {
                type: 'timestamp'
              },
              AutomatedSnapshotRetentionPeriod: {
                type: 'integer'
              },
              ClusterSecurityGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    ClusterSecurityGroupName: {
                    },
                    Status: {
                    }
                  },
                  name: 'ClusterSecurityGroup'
                }
              },
              VpcSecurityGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    VpcSecurityGroupId: {
                    },
                    Status: {
                    }
                  },
                  name: 'VpcSecurityGroup'
                }
              },
              ClusterParameterGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    ParameterGroupName: {
                    },
                    ParameterApplyStatus: {
                    }
                  },
                  name: 'ClusterParameterGroup'
                }
              },
              ClusterSubnetGroupName: {
              },
              VpcId: {
              },
              AvailabilityZone: {
              },
              PreferredMaintenanceWindow: {
              },
              PendingModifiedValues: {
                type: 'structure',
                members: {
                  MasterUserPassword: {
                  },
                  NodeType: {
                  },
                  NumberOfNodes: {
                    type: 'integer'
                  },
                  ClusterType: {
                  },
                  ClusterVersion: {
                  },
                  AutomatedSnapshotRetentionPeriod: {
                    type: 'integer'
                  }
                }
              },
              ClusterVersion: {
              },
              AllowVersionUpgrade: {
                type: 'boolean'
              },
              NumberOfNodes: {
                type: 'integer'
              },
              PubliclyAccessible: {
                type: 'boolean'
              }
            },
            wrapper: true
          }
        }
      }
    },
    createClusterParameterGroup: {
      name: 'CreateClusterParameterGroup',
      input: {
        type: 'structure',
        members: {
          ParameterGroupName: {
            required: true
          },
          ParameterGroupFamily: {
            required: true
          },
          Description: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          ClusterParameterGroup: {
            type: 'structure',
            members: {
              ParameterGroupName: {
              },
              ParameterGroupFamily: {
              },
              Description: {
              }
            },
            wrapper: true
          }
        }
      }
    },
    createClusterSecurityGroup: {
      name: 'CreateClusterSecurityGroup',
      input: {
        type: 'structure',
        members: {
          ClusterSecurityGroupName: {
            required: true
          },
          Description: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          ClusterSecurityGroup: {
            type: 'structure',
            members: {
              ClusterSecurityGroupName: {
              },
              Description: {
              },
              EC2SecurityGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    Status: {
                    },
                    EC2SecurityGroupName: {
                    },
                    EC2SecurityGroupOwnerId: {
                    }
                  },
                  name: 'EC2SecurityGroup'
                }
              },
              IPRanges: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    Status: {
                    },
                    CIDRIP: {
                    }
                  },
                  name: 'IPRange'
                }
              }
            },
            wrapper: true
          }
        }
      }
    },
    createClusterSnapshot: {
      name: 'CreateClusterSnapshot',
      input: {
        type: 'structure',
        members: {
          SnapshotIdentifier: {
            required: true
          },
          ClusterIdentifier: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Snapshot: {
            type: 'structure',
            members: {
              SnapshotIdentifier: {
              },
              ClusterIdentifier: {
              },
              SnapshotCreateTime: {
                type: 'timestamp'
              },
              Status: {
              },
              Port: {
                type: 'integer'
              },
              AvailabilityZone: {
              },
              ClusterCreateTime: {
                type: 'timestamp'
              },
              MasterUsername: {
              },
              ClusterVersion: {
              },
              SnapshotType: {
              },
              NodeType: {
              },
              NumberOfNodes: {
                type: 'integer'
              },
              DBName: {
              },
              VpcId: {
              }
            },
            wrapper: true
          }
        }
      }
    },
    createClusterSubnetGroup: {
      name: 'CreateClusterSubnetGroup',
      input: {
        type: 'structure',
        members: {
          ClusterSubnetGroupName: {
            required: true
          },
          Description: {
            required: true
          },
          SubnetIds: {
            type: 'list',
            members: {
              name: 'SubnetIdentifier'
            },
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          ClusterSubnetGroup: {
            type: 'structure',
            members: {
              ClusterSubnetGroupName: {
              },
              Description: {
              },
              VpcId: {
              },
              SubnetGroupStatus: {
              },
              Subnets: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    SubnetIdentifier: {
                    },
                    SubnetAvailabilityZone: {
                      type: 'structure',
                      members: {
                        Name: {
                        }
                      },
                      wrapper: true
                    },
                    SubnetStatus: {
                    }
                  },
                  name: 'Subnet'
                }
              }
            },
            wrapper: true
          }
        }
      }
    },
    deleteCluster: {
      name: 'DeleteCluster',
      input: {
        type: 'structure',
        members: {
          ClusterIdentifier: {
            required: true
          },
          SkipFinalClusterSnapshot: {
            type: 'boolean'
          },
          FinalClusterSnapshotIdentifier: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Cluster: {
            type: 'structure',
            members: {
              ClusterIdentifier: {
              },
              NodeType: {
              },
              ClusterStatus: {
              },
              ModifyStatus: {
              },
              MasterUsername: {
              },
              DBName: {
              },
              Endpoint: {
                type: 'structure',
                members: {
                  Address: {
                  },
                  Port: {
                    type: 'integer'
                  }
                }
              },
              ClusterCreateTime: {
                type: 'timestamp'
              },
              AutomatedSnapshotRetentionPeriod: {
                type: 'integer'
              },
              ClusterSecurityGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    ClusterSecurityGroupName: {
                    },
                    Status: {
                    }
                  },
                  name: 'ClusterSecurityGroup'
                }
              },
              VpcSecurityGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    VpcSecurityGroupId: {
                    },
                    Status: {
                    }
                  },
                  name: 'VpcSecurityGroup'
                }
              },
              ClusterParameterGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    ParameterGroupName: {
                    },
                    ParameterApplyStatus: {
                    }
                  },
                  name: 'ClusterParameterGroup'
                }
              },
              ClusterSubnetGroupName: {
              },
              VpcId: {
              },
              AvailabilityZone: {
              },
              PreferredMaintenanceWindow: {
              },
              PendingModifiedValues: {
                type: 'structure',
                members: {
                  MasterUserPassword: {
                  },
                  NodeType: {
                  },
                  NumberOfNodes: {
                    type: 'integer'
                  },
                  ClusterType: {
                  },
                  ClusterVersion: {
                  },
                  AutomatedSnapshotRetentionPeriod: {
                    type: 'integer'
                  }
                }
              },
              ClusterVersion: {
              },
              AllowVersionUpgrade: {
                type: 'boolean'
              },
              NumberOfNodes: {
                type: 'integer'
              },
              PubliclyAccessible: {
                type: 'boolean'
              }
            },
            wrapper: true
          }
        }
      }
    },
    deleteClusterParameterGroup: {
      name: 'DeleteClusterParameterGroup',
      input: {
        type: 'structure',
        members: {
          ParameterGroupName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteClusterSecurityGroup: {
      name: 'DeleteClusterSecurityGroup',
      input: {
        type: 'structure',
        members: {
          ClusterSecurityGroupName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteClusterSnapshot: {
      name: 'DeleteClusterSnapshot',
      input: {
        type: 'structure',
        members: {
          SnapshotIdentifier: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Snapshot: {
            type: 'structure',
            members: {
              SnapshotIdentifier: {
              },
              ClusterIdentifier: {
              },
              SnapshotCreateTime: {
                type: 'timestamp'
              },
              Status: {
              },
              Port: {
                type: 'integer'
              },
              AvailabilityZone: {
              },
              ClusterCreateTime: {
                type: 'timestamp'
              },
              MasterUsername: {
              },
              ClusterVersion: {
              },
              SnapshotType: {
              },
              NodeType: {
              },
              NumberOfNodes: {
                type: 'integer'
              },
              DBName: {
              },
              VpcId: {
              }
            },
            wrapper: true
          }
        }
      }
    },
    deleteClusterSubnetGroup: {
      name: 'DeleteClusterSubnetGroup',
      input: {
        type: 'structure',
        members: {
          ClusterSubnetGroupName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    describeClusterParameterGroups: {
      name: 'DescribeClusterParameterGroups',
      input: {
        type: 'structure',
        members: {
          ParameterGroupName: {
          },
          MaxRecords: {
            type: 'integer'
          },
          Marker: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Marker: {
          },
          ParameterGroups: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                ParameterGroupName: {
                },
                ParameterGroupFamily: {
                },
                Description: {
                }
              },
              wrapper: true,
              name: 'ClusterParameterGroup'
            }
          }
        }
      }
    },
    describeClusterParameters: {
      name: 'DescribeClusterParameters',
      input: {
        type: 'structure',
        members: {
          ParameterGroupName: {
            required: true
          },
          Source: {
          },
          MaxRecords: {
            type: 'integer'
          },
          Marker: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Parameters: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                ParameterName: {
                },
                ParameterValue: {
                },
                Description: {
                },
                Source: {
                },
                DataType: {
                },
                AllowedValues: {
                },
                IsModifiable: {
                  type: 'boolean'
                },
                MinimumEngineVersion: {
                }
              },
              name: 'Parameter'
            }
          },
          Marker: {
          }
        }
      }
    },
    describeClusterSecurityGroups: {
      name: 'DescribeClusterSecurityGroups',
      input: {
        type: 'structure',
        members: {
          ClusterSecurityGroupName: {
          },
          MaxRecords: {
            type: 'integer'
          },
          Marker: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Marker: {
          },
          ClusterSecurityGroups: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                ClusterSecurityGroupName: {
                },
                Description: {
                },
                EC2SecurityGroups: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      Status: {
                      },
                      EC2SecurityGroupName: {
                      },
                      EC2SecurityGroupOwnerId: {
                      }
                    },
                    name: 'EC2SecurityGroup'
                  }
                },
                IPRanges: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      Status: {
                      },
                      CIDRIP: {
                      }
                    },
                    name: 'IPRange'
                  }
                }
              },
              wrapper: true,
              name: 'ClusterSecurityGroup'
            }
          }
        }
      }
    },
    describeClusterSnapshots: {
      name: 'DescribeClusterSnapshots',
      input: {
        type: 'structure',
        members: {
          ClusterIdentifier: {
          },
          SnapshotIdentifier: {
          },
          SnapshotType: {
          },
          StartTime: {
            type: 'timestamp'
          },
          EndTime: {
            type: 'timestamp'
          },
          MaxRecords: {
            type: 'integer'
          },
          Marker: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Marker: {
          },
          Snapshots: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                SnapshotIdentifier: {
                },
                ClusterIdentifier: {
                },
                SnapshotCreateTime: {
                  type: 'timestamp'
                },
                Status: {
                },
                Port: {
                  type: 'integer'
                },
                AvailabilityZone: {
                },
                ClusterCreateTime: {
                  type: 'timestamp'
                },
                MasterUsername: {
                },
                ClusterVersion: {
                },
                SnapshotType: {
                },
                NodeType: {
                },
                NumberOfNodes: {
                  type: 'integer'
                },
                DBName: {
                },
                VpcId: {
                }
              },
              wrapper: true,
              name: 'Snapshot'
            }
          }
        }
      }
    },
    describeClusterSubnetGroups: {
      name: 'DescribeClusterSubnetGroups',
      input: {
        type: 'structure',
        members: {
          ClusterSubnetGroupName: {
          },
          MaxRecords: {
            type: 'integer'
          },
          Marker: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Marker: {
          },
          ClusterSubnetGroups: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                ClusterSubnetGroupName: {
                },
                Description: {
                },
                VpcId: {
                },
                SubnetGroupStatus: {
                },
                Subnets: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      SubnetIdentifier: {
                      },
                      SubnetAvailabilityZone: {
                        type: 'structure',
                        members: {
                          Name: {
                          }
                        },
                        wrapper: true
                      },
                      SubnetStatus: {
                      }
                    },
                    name: 'Subnet'
                  }
                }
              },
              wrapper: true,
              name: 'ClusterSubnetGroup'
            }
          }
        }
      }
    },
    describeClusterVersions: {
      name: 'DescribeClusterVersions',
      input: {
        type: 'structure',
        members: {
          ClusterVersion: {
          },
          ClusterParameterGroupFamily: {
          },
          MaxRecords: {
            type: 'integer'
          },
          Marker: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Marker: {
          },
          ClusterVersions: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                ClusterVersion: {
                },
                ClusterParameterGroupFamily: {
                },
                Description: {
                }
              },
              name: 'ClusterVersion'
            }
          }
        }
      }
    },
    describeClusters: {
      name: 'DescribeClusters',
      input: {
        type: 'structure',
        members: {
          ClusterIdentifier: {
          },
          MaxRecords: {
            type: 'integer'
          },
          Marker: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Marker: {
          },
          Clusters: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                ClusterIdentifier: {
                },
                NodeType: {
                },
                ClusterStatus: {
                },
                ModifyStatus: {
                },
                MasterUsername: {
                },
                DBName: {
                },
                Endpoint: {
                  type: 'structure',
                  members: {
                    Address: {
                    },
                    Port: {
                      type: 'integer'
                    }
                  }
                },
                ClusterCreateTime: {
                  type: 'timestamp'
                },
                AutomatedSnapshotRetentionPeriod: {
                  type: 'integer'
                },
                ClusterSecurityGroups: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      ClusterSecurityGroupName: {
                      },
                      Status: {
                      }
                    },
                    name: 'ClusterSecurityGroup'
                  }
                },
                VpcSecurityGroups: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      VpcSecurityGroupId: {
                      },
                      Status: {
                      }
                    },
                    name: 'VpcSecurityGroup'
                  }
                },
                ClusterParameterGroups: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      ParameterGroupName: {
                      },
                      ParameterApplyStatus: {
                      }
                    },
                    name: 'ClusterParameterGroup'
                  }
                },
                ClusterSubnetGroupName: {
                },
                VpcId: {
                },
                AvailabilityZone: {
                },
                PreferredMaintenanceWindow: {
                },
                PendingModifiedValues: {
                  type: 'structure',
                  members: {
                    MasterUserPassword: {
                    },
                    NodeType: {
                    },
                    NumberOfNodes: {
                      type: 'integer'
                    },
                    ClusterType: {
                    },
                    ClusterVersion: {
                    },
                    AutomatedSnapshotRetentionPeriod: {
                      type: 'integer'
                    }
                  }
                },
                ClusterVersion: {
                },
                AllowVersionUpgrade: {
                  type: 'boolean'
                },
                NumberOfNodes: {
                  type: 'integer'
                },
                PubliclyAccessible: {
                  type: 'boolean'
                }
              },
              wrapper: true,
              name: 'Cluster'
            }
          }
        }
      }
    },
    describeDefaultClusterParameters: {
      name: 'DescribeDefaultClusterParameters',
      input: {
        type: 'structure',
        members: {
          ParameterGroupFamily: {
            required: true
          },
          MaxRecords: {
            type: 'integer'
          },
          Marker: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          DefaultClusterParameters: {
            type: 'structure',
            members: {
              ParameterGroupFamily: {
              },
              Marker: {
              },
              Parameters: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    ParameterName: {
                    },
                    ParameterValue: {
                    },
                    Description: {
                    },
                    Source: {
                    },
                    DataType: {
                    },
                    AllowedValues: {
                    },
                    IsModifiable: {
                      type: 'boolean'
                    },
                    MinimumEngineVersion: {
                    }
                  },
                  name: 'Parameter'
                }
              }
            },
            wrapper: true
          }
        }
      }
    },
    describeEvents: {
      name: 'DescribeEvents',
      input: {
        type: 'structure',
        members: {
          SourceIdentifier: {
          },
          SourceType: {
          },
          StartTime: {
            type: 'timestamp'
          },
          EndTime: {
            type: 'timestamp'
          },
          Duration: {
            type: 'integer'
          },
          MaxRecords: {
            type: 'integer'
          },
          Marker: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Marker: {
          },
          Events: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                SourceIdentifier: {
                },
                SourceType: {
                },
                Message: {
                },
                Date: {
                  type: 'timestamp'
                }
              },
              name: 'Event'
            }
          }
        }
      }
    },
    describeOrderableClusterOptions: {
      name: 'DescribeOrderableClusterOptions',
      input: {
        type: 'structure',
        members: {
          ClusterVersion: {
          },
          NodeType: {
          },
          MaxRecords: {
            type: 'integer'
          },
          Marker: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          OrderableClusterOptions: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                ClusterVersion: {
                },
                ClusterType: {
                },
                NodeType: {
                },
                AvailabilityZones: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      Name: {
                      }
                    },
                    wrapper: true,
                    name: 'AvailabilityZone'
                  }
                }
              },
              wrapper: true,
              name: 'OrderableClusterOption'
            }
          },
          Marker: {
          }
        }
      }
    },
    describeReservedNodeOfferings: {
      name: 'DescribeReservedNodeOfferings',
      input: {
        type: 'structure',
        members: {
          ReservedNodeOfferingId: {
          },
          NodeType: {
          },
          Duration: {
          },
          MaxRecords: {
            type: 'integer'
          },
          Marker: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Marker: {
          },
          ReservedNodeOfferings: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                ReservedNodeOfferingId: {
                },
                NodeType: {
                },
                Duration: {
                  type: 'integer'
                },
                FixedPrice: {
                  type: 'float'
                },
                UsagePrice: {
                  type: 'float'
                },
                CurrencyCode: {
                },
                OfferingType: {
                },
                RecurringCharges: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      RecurringChargeAmount: {
                        type: 'float'
                      },
                      RecurringChargeFrequency: {
                      }
                    },
                    wrapper: true,
                    name: 'RecurringCharge'
                  }
                }
              },
              wrapper: true,
              name: 'ReservedNodeOffering'
            }
          }
        }
      }
    },
    describeReservedNodes: {
      name: 'DescribeReservedNodes',
      input: {
        type: 'structure',
        members: {
          ReservedNodeId: {
          },
          ReservedNodeOfferingId: {
          },
          NodeType: {
          },
          Duration: {
          },
          MaxRecords: {
            type: 'integer'
          },
          Marker: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Marker: {
          },
          ReservedNodes: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                ReservedNodeId: {
                },
                ReservedNodeOfferingId: {
                },
                NodeType: {
                },
                StartTime: {
                  type: 'timestamp'
                },
                Duration: {
                  type: 'integer'
                },
                FixedPrice: {
                  type: 'float'
                },
                UsagePrice: {
                  type: 'float'
                },
                CurrencyCode: {
                },
                NodeCount: {
                  type: 'integer'
                },
                State: {
                },
                OfferingType: {
                },
                RecurringCharges: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      RecurringChargeAmount: {
                        type: 'float'
                      },
                      RecurringChargeFrequency: {
                      }
                    },
                    wrapper: true,
                    name: 'RecurringCharge'
                  }
                }
              },
              wrapper: true,
              name: 'ReservedNode'
            }
          }
        }
      }
    },
    describeResize: {
      name: 'DescribeResize',
      input: {
        type: 'structure',
        members: {
          ClusterIdentifier: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          TargetNodeType: {
          },
          TargetNumberOfNodes: {
            type: 'integer'
          },
          TargetClusterType: {
          },
          Status: {
          },
          ImportTablesCompleted: {
            type: 'list'
          },
          ImportTablesInProgress: {
            type: 'list'
          },
          ImportTablesNotStarted: {
            type: 'list'
          }
        }
      }
    },
    modifyCluster: {
      name: 'ModifyCluster',
      input: {
        type: 'structure',
        members: {
          ClusterIdentifier: {
            required: true
          },
          ClusterType: {
          },
          NodeType: {
          },
          NumberOfNodes: {
            type: 'integer'
          },
          ClusterSecurityGroups: {
            type: 'list',
            members: {
              name: 'ClusterSecurityGroupName'
            }
          },
          VpcSecurityGroupIds: {
            type: 'list',
            members: {
              name: 'VpcSecurityGroupId'
            }
          },
          MasterUserPassword: {
          },
          ClusterParameterGroupName: {
          },
          AutomatedSnapshotRetentionPeriod: {
            type: 'integer'
          },
          PreferredMaintenanceWindow: {
          },
          ClusterVersion: {
          },
          AllowVersionUpgrade: {
            type: 'boolean'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Cluster: {
            type: 'structure',
            members: {
              ClusterIdentifier: {
              },
              NodeType: {
              },
              ClusterStatus: {
              },
              ModifyStatus: {
              },
              MasterUsername: {
              },
              DBName: {
              },
              Endpoint: {
                type: 'structure',
                members: {
                  Address: {
                  },
                  Port: {
                    type: 'integer'
                  }
                }
              },
              ClusterCreateTime: {
                type: 'timestamp'
              },
              AutomatedSnapshotRetentionPeriod: {
                type: 'integer'
              },
              ClusterSecurityGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    ClusterSecurityGroupName: {
                    },
                    Status: {
                    }
                  },
                  name: 'ClusterSecurityGroup'
                }
              },
              VpcSecurityGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    VpcSecurityGroupId: {
                    },
                    Status: {
                    }
                  },
                  name: 'VpcSecurityGroup'
                }
              },
              ClusterParameterGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    ParameterGroupName: {
                    },
                    ParameterApplyStatus: {
                    }
                  },
                  name: 'ClusterParameterGroup'
                }
              },
              ClusterSubnetGroupName: {
              },
              VpcId: {
              },
              AvailabilityZone: {
              },
              PreferredMaintenanceWindow: {
              },
              PendingModifiedValues: {
                type: 'structure',
                members: {
                  MasterUserPassword: {
                  },
                  NodeType: {
                  },
                  NumberOfNodes: {
                    type: 'integer'
                  },
                  ClusterType: {
                  },
                  ClusterVersion: {
                  },
                  AutomatedSnapshotRetentionPeriod: {
                    type: 'integer'
                  }
                }
              },
              ClusterVersion: {
              },
              AllowVersionUpgrade: {
                type: 'boolean'
              },
              NumberOfNodes: {
                type: 'integer'
              },
              PubliclyAccessible: {
                type: 'boolean'
              }
            },
            wrapper: true
          }
        }
      }
    },
    modifyClusterParameterGroup: {
      name: 'ModifyClusterParameterGroup',
      input: {
        type: 'structure',
        members: {
          ParameterGroupName: {
            required: true
          },
          Parameters: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                ParameterName: {
                },
                ParameterValue: {
                },
                Description: {
                },
                Source: {
                },
                DataType: {
                },
                AllowedValues: {
                },
                IsModifiable: {
                  type: 'boolean'
                },
                MinimumEngineVersion: {
                }
              },
              name: 'Parameter'
            },
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          ParameterGroupName: {
          },
          ParameterGroupStatus: {
          }
        }
      }
    },
    modifyClusterSubnetGroup: {
      name: 'ModifyClusterSubnetGroup',
      input: {
        type: 'structure',
        members: {
          ClusterSubnetGroupName: {
            required: true
          },
          Description: {
          },
          SubnetIds: {
            type: 'list',
            members: {
              name: 'SubnetIdentifier'
            },
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          ClusterSubnetGroup: {
            type: 'structure',
            members: {
              ClusterSubnetGroupName: {
              },
              Description: {
              },
              VpcId: {
              },
              SubnetGroupStatus: {
              },
              Subnets: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    SubnetIdentifier: {
                    },
                    SubnetAvailabilityZone: {
                      type: 'structure',
                      members: {
                        Name: {
                        }
                      },
                      wrapper: true
                    },
                    SubnetStatus: {
                    }
                  },
                  name: 'Subnet'
                }
              }
            },
            wrapper: true
          }
        }
      }
    },
    purchaseReservedNodeOffering: {
      name: 'PurchaseReservedNodeOffering',
      input: {
        type: 'structure',
        members: {
          ReservedNodeOfferingId: {
            required: true
          },
          ReservedNodeId: {
          },
          NodeCount: {
            type: 'integer'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          ReservedNode: {
            type: 'structure',
            members: {
              ReservedNodeId: {
              },
              ReservedNodeOfferingId: {
              },
              NodeType: {
              },
              StartTime: {
                type: 'timestamp'
              },
              Duration: {
                type: 'integer'
              },
              FixedPrice: {
                type: 'float'
              },
              UsagePrice: {
                type: 'float'
              },
              CurrencyCode: {
              },
              NodeCount: {
                type: 'integer'
              },
              State: {
              },
              OfferingType: {
              },
              RecurringCharges: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    RecurringChargeAmount: {
                      type: 'float'
                    },
                    RecurringChargeFrequency: {
                    }
                  },
                  wrapper: true,
                  name: 'RecurringCharge'
                }
              }
            },
            wrapper: true
          }
        }
      }
    },
    rebootCluster: {
      name: 'RebootCluster',
      input: {
        type: 'structure',
        members: {
          ClusterIdentifier: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Cluster: {
            type: 'structure',
            members: {
              ClusterIdentifier: {
              },
              NodeType: {
              },
              ClusterStatus: {
              },
              ModifyStatus: {
              },
              MasterUsername: {
              },
              DBName: {
              },
              Endpoint: {
                type: 'structure',
                members: {
                  Address: {
                  },
                  Port: {
                    type: 'integer'
                  }
                }
              },
              ClusterCreateTime: {
                type: 'timestamp'
              },
              AutomatedSnapshotRetentionPeriod: {
                type: 'integer'
              },
              ClusterSecurityGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    ClusterSecurityGroupName: {
                    },
                    Status: {
                    }
                  },
                  name: 'ClusterSecurityGroup'
                }
              },
              VpcSecurityGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    VpcSecurityGroupId: {
                    },
                    Status: {
                    }
                  },
                  name: 'VpcSecurityGroup'
                }
              },
              ClusterParameterGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    ParameterGroupName: {
                    },
                    ParameterApplyStatus: {
                    }
                  },
                  name: 'ClusterParameterGroup'
                }
              },
              ClusterSubnetGroupName: {
              },
              VpcId: {
              },
              AvailabilityZone: {
              },
              PreferredMaintenanceWindow: {
              },
              PendingModifiedValues: {
                type: 'structure',
                members: {
                  MasterUserPassword: {
                  },
                  NodeType: {
                  },
                  NumberOfNodes: {
                    type: 'integer'
                  },
                  ClusterType: {
                  },
                  ClusterVersion: {
                  },
                  AutomatedSnapshotRetentionPeriod: {
                    type: 'integer'
                  }
                }
              },
              ClusterVersion: {
              },
              AllowVersionUpgrade: {
                type: 'boolean'
              },
              NumberOfNodes: {
                type: 'integer'
              },
              PubliclyAccessible: {
                type: 'boolean'
              }
            },
            wrapper: true
          }
        }
      }
    },
    resetClusterParameterGroup: {
      name: 'ResetClusterParameterGroup',
      input: {
        type: 'structure',
        members: {
          ParameterGroupName: {
            required: true
          },
          ResetAllParameters: {
            type: 'boolean'
          },
          Parameters: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                ParameterName: {
                },
                ParameterValue: {
                },
                Description: {
                },
                Source: {
                },
                DataType: {
                },
                AllowedValues: {
                },
                IsModifiable: {
                  type: 'boolean'
                },
                MinimumEngineVersion: {
                }
              },
              name: 'Parameter'
            }
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          ParameterGroupName: {
          },
          ParameterGroupStatus: {
          }
        }
      }
    },
    restoreFromClusterSnapshot: {
      name: 'RestoreFromClusterSnapshot',
      input: {
        type: 'structure',
        members: {
          ClusterIdentifier: {
            required: true
          },
          SnapshotIdentifier: {
            required: true
          },
          Port: {
            type: 'integer'
          },
          AvailabilityZone: {
          },
          AllowVersionUpgrade: {
            type: 'boolean'
          },
          ClusterSubnetGroupName: {
          },
          PubliclyAccessible: {
            type: 'boolean'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Cluster: {
            type: 'structure',
            members: {
              ClusterIdentifier: {
              },
              NodeType: {
              },
              ClusterStatus: {
              },
              ModifyStatus: {
              },
              MasterUsername: {
              },
              DBName: {
              },
              Endpoint: {
                type: 'structure',
                members: {
                  Address: {
                  },
                  Port: {
                    type: 'integer'
                  }
                }
              },
              ClusterCreateTime: {
                type: 'timestamp'
              },
              AutomatedSnapshotRetentionPeriod: {
                type: 'integer'
              },
              ClusterSecurityGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    ClusterSecurityGroupName: {
                    },
                    Status: {
                    }
                  },
                  name: 'ClusterSecurityGroup'
                }
              },
              VpcSecurityGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    VpcSecurityGroupId: {
                    },
                    Status: {
                    }
                  },
                  name: 'VpcSecurityGroup'
                }
              },
              ClusterParameterGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    ParameterGroupName: {
                    },
                    ParameterApplyStatus: {
                    }
                  },
                  name: 'ClusterParameterGroup'
                }
              },
              ClusterSubnetGroupName: {
              },
              VpcId: {
              },
              AvailabilityZone: {
              },
              PreferredMaintenanceWindow: {
              },
              PendingModifiedValues: {
                type: 'structure',
                members: {
                  MasterUserPassword: {
                  },
                  NodeType: {
                  },
                  NumberOfNodes: {
                    type: 'integer'
                  },
                  ClusterType: {
                  },
                  ClusterVersion: {
                  },
                  AutomatedSnapshotRetentionPeriod: {
                    type: 'integer'
                  }
                }
              },
              ClusterVersion: {
              },
              AllowVersionUpgrade: {
                type: 'boolean'
              },
              NumberOfNodes: {
                type: 'integer'
              },
              PubliclyAccessible: {
                type: 'boolean'
              }
            },
            wrapper: true
          }
        }
      }
    },
    revokeClusterSecurityGroupIngress: {
      name: 'RevokeClusterSecurityGroupIngress',
      input: {
        type: 'structure',
        members: {
          ClusterSecurityGroupName: {
            required: true
          },
          CIDRIP: {
          },
          EC2SecurityGroupName: {
          },
          EC2SecurityGroupOwnerId: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          ClusterSecurityGroup: {
            type: 'structure',
            members: {
              ClusterSecurityGroupName: {
              },
              Description: {
              },
              EC2SecurityGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    Status: {
                    },
                    EC2SecurityGroupName: {
                    },
                    EC2SecurityGroupOwnerId: {
                    }
                  },
                  name: 'EC2SecurityGroup'
                }
              },
              IPRanges: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    Status: {
                    },
                    CIDRIP: {
                    }
                  },
                  name: 'IPRange'
                }
              }
            },
            wrapper: true
          }
        }
      }
    }
  }
};

},{}],60:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

module.exports = {
  format: 'query',
  apiVersion: '2012-07-31',
  endpointPrefix: 'rds',
  resultWrapped: true,
  serviceAbbreviation: 'Amazon RDS',
  serviceFullName: 'Amazon Relational Database Service (Beta)',
  signatureVersion: 'v2',
  timestampFormat: 'iso8601',
  operations: {
    authorizeDBSecurityGroupIngress: {
      name: 'AuthorizeDBSecurityGroupIngress',
      input: {
        type: 'structure',
        members: {
          DBSecurityGroupName: {
            required: true
          },
          CIDRIP: {
          },
          EC2SecurityGroupName: {
          },
          EC2SecurityGroupId: {
          },
          EC2SecurityGroupOwnerId: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          DBSecurityGroup: {
            type: 'structure',
            members: {
              OwnerId: {
              },
              DBSecurityGroupName: {
              },
              DBSecurityGroupDescription: {
              },
              VpcId: {
              },
              EC2SecurityGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    Status: {
                    },
                    EC2SecurityGroupName: {
                    },
                    EC2SecurityGroupId: {
                    },
                    EC2SecurityGroupOwnerId: {
                    }
                  },
                  name: 'EC2SecurityGroup'
                }
              },
              IPRanges: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    Status: {
                    },
                    CIDRIP: {
                    }
                  },
                  name: 'IPRange'
                }
              }
            },
            wrapper: true
          }
        }
      }
    },
    copyDBSnapshot: {
      name: 'CopyDBSnapshot',
      input: {
        type: 'structure',
        members: {
          SourceDBSnapshotIdentifier: {
            required: true
          },
          TargetDBSnapshotIdentifier: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          DBSnapshot: {
            type: 'structure',
            members: {
              DBSnapshotIdentifier: {
              },
              DBInstanceIdentifier: {
              },
              SnapshotCreateTime: {
                type: 'timestamp'
              },
              Engine: {
              },
              AllocatedStorage: {
                type: 'integer'
              },
              Status: {
              },
              Port: {
                type: 'integer'
              },
              AvailabilityZone: {
              },
              VpcId: {
              },
              InstanceCreateTime: {
                type: 'timestamp'
              },
              MasterUsername: {
              },
              EngineVersion: {
              },
              LicenseModel: {
              },
              SnapshotType: {
              }
            },
            wrapper: true
          }
        }
      }
    },
    createDBInstance: {
      name: 'CreateDBInstance',
      input: {
        type: 'structure',
        members: {
          DBName: {
          },
          DBInstanceIdentifier: {
            required: true
          },
          AllocatedStorage: {
            type: 'integer',
            required: true
          },
          DBInstanceClass: {
            required: true
          },
          Engine: {
            required: true
          },
          MasterUsername: {
            required: true
          },
          MasterUserPassword: {
            required: true
          },
          DBSecurityGroups: {
            type: 'list',
            members: {
              name: 'DBSecurityGroupName'
            }
          },
          AvailabilityZone: {
          },
          DBSubnetGroupName: {
          },
          PreferredMaintenanceWindow: {
          },
          DBParameterGroupName: {
          },
          BackupRetentionPeriod: {
            type: 'integer'
          },
          PreferredBackupWindow: {
          },
          Port: {
            type: 'integer'
          },
          MultiAZ: {
            type: 'boolean'
          },
          EngineVersion: {
          },
          AutoMinorVersionUpgrade: {
            type: 'boolean'
          },
          LicenseModel: {
          },
          OptionGroupName: {
          },
          CharacterSetName: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          DBInstance: {
            type: 'structure',
            members: {
              DBInstanceIdentifier: {
              },
              DBInstanceClass: {
              },
              Engine: {
              },
              DBInstanceStatus: {
              },
              MasterUsername: {
              },
              DBName: {
              },
              Endpoint: {
                type: 'structure',
                members: {
                  Address: {
                  },
                  Port: {
                    type: 'integer'
                  }
                }
              },
              AllocatedStorage: {
                type: 'integer'
              },
              InstanceCreateTime: {
                type: 'timestamp'
              },
              PreferredBackupWindow: {
              },
              BackupRetentionPeriod: {
                type: 'integer'
              },
              DBSecurityGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    DBSecurityGroupName: {
                    },
                    Status: {
                    }
                  },
                  name: 'DBSecurityGroup'
                }
              },
              DBParameterGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    DBParameterGroupName: {
                    },
                    ParameterApplyStatus: {
                    }
                  },
                  name: 'DBParameterGroup'
                }
              },
              AvailabilityZone: {
              },
              DBSubnetGroup: {
                type: 'structure',
                members: {
                  DBSubnetGroupName: {
                  },
                  DBSubnetGroupDescription: {
                  },
                  VpcId: {
                  },
                  SubnetGroupStatus: {
                  },
                  Subnets: {
                    type: 'list',
                    members: {
                      type: 'structure',
                      members: {
                        SubnetIdentifier: {
                        },
                        SubnetAvailabilityZone: {
                          type: 'structure',
                          members: {
                            Name: {
                            }
                          },
                          wrapper: true
                        },
                        SubnetStatus: {
                        }
                      },
                      name: 'Subnet'
                    }
                  }
                },
                wrapper: true
              },
              PreferredMaintenanceWindow: {
              },
              PendingModifiedValues: {
                type: 'structure',
                members: {
                  DBInstanceClass: {
                  },
                  AllocatedStorage: {
                    type: 'integer'
                  },
                  MasterUserPassword: {
                  },
                  Port: {
                    type: 'integer'
                  },
                  BackupRetentionPeriod: {
                    type: 'integer'
                  },
                  MultiAZ: {
                    type: 'boolean'
                  },
                  EngineVersion: {
                  }
                }
              },
              LatestRestorableTime: {
                type: 'timestamp'
              },
              MultiAZ: {
                type: 'boolean'
              },
              EngineVersion: {
              },
              AutoMinorVersionUpgrade: {
                type: 'boolean'
              },
              ReadReplicaSourceDBInstanceIdentifier: {
              },
              ReadReplicaDBInstanceIdentifiers: {
                type: 'list',
                members: {
                  name: 'ReadReplicaDBInstanceIdentifier'
                }
              },
              LicenseModel: {
              },
              OptionGroupMembership: {
                type: 'structure',
                members: {
                  OptionGroupName: {
                  },
                  Status: {
                  }
                }
              },
              CharacterSetName: {
              }
            },
            wrapper: true
          }
        }
      }
    },
    createDBInstanceReadReplica: {
      name: 'CreateDBInstanceReadReplica',
      input: {
        type: 'structure',
        members: {
          DBInstanceIdentifier: {
            required: true
          },
          SourceDBInstanceIdentifier: {
            required: true
          },
          DBInstanceClass: {
          },
          AvailabilityZone: {
          },
          Port: {
            type: 'integer'
          },
          AutoMinorVersionUpgrade: {
            type: 'boolean'
          },
          OptionGroupName: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          DBInstance: {
            type: 'structure',
            members: {
              DBInstanceIdentifier: {
              },
              DBInstanceClass: {
              },
              Engine: {
              },
              DBInstanceStatus: {
              },
              MasterUsername: {
              },
              DBName: {
              },
              Endpoint: {
                type: 'structure',
                members: {
                  Address: {
                  },
                  Port: {
                    type: 'integer'
                  }
                }
              },
              AllocatedStorage: {
                type: 'integer'
              },
              InstanceCreateTime: {
                type: 'timestamp'
              },
              PreferredBackupWindow: {
              },
              BackupRetentionPeriod: {
                type: 'integer'
              },
              DBSecurityGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    DBSecurityGroupName: {
                    },
                    Status: {
                    }
                  },
                  name: 'DBSecurityGroup'
                }
              },
              DBParameterGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    DBParameterGroupName: {
                    },
                    ParameterApplyStatus: {
                    }
                  },
                  name: 'DBParameterGroup'
                }
              },
              AvailabilityZone: {
              },
              DBSubnetGroup: {
                type: 'structure',
                members: {
                  DBSubnetGroupName: {
                  },
                  DBSubnetGroupDescription: {
                  },
                  VpcId: {
                  },
                  SubnetGroupStatus: {
                  },
                  Subnets: {
                    type: 'list',
                    members: {
                      type: 'structure',
                      members: {
                        SubnetIdentifier: {
                        },
                        SubnetAvailabilityZone: {
                          type: 'structure',
                          members: {
                            Name: {
                            }
                          },
                          wrapper: true
                        },
                        SubnetStatus: {
                        }
                      },
                      name: 'Subnet'
                    }
                  }
                },
                wrapper: true
              },
              PreferredMaintenanceWindow: {
              },
              PendingModifiedValues: {
                type: 'structure',
                members: {
                  DBInstanceClass: {
                  },
                  AllocatedStorage: {
                    type: 'integer'
                  },
                  MasterUserPassword: {
                  },
                  Port: {
                    type: 'integer'
                  },
                  BackupRetentionPeriod: {
                    type: 'integer'
                  },
                  MultiAZ: {
                    type: 'boolean'
                  },
                  EngineVersion: {
                  }
                }
              },
              LatestRestorableTime: {
                type: 'timestamp'
              },
              MultiAZ: {
                type: 'boolean'
              },
              EngineVersion: {
              },
              AutoMinorVersionUpgrade: {
                type: 'boolean'
              },
              ReadReplicaSourceDBInstanceIdentifier: {
              },
              ReadReplicaDBInstanceIdentifiers: {
                type: 'list',
                members: {
                  name: 'ReadReplicaDBInstanceIdentifier'
                }
              },
              LicenseModel: {
              },
              OptionGroupMembership: {
                type: 'structure',
                members: {
                  OptionGroupName: {
                  },
                  Status: {
                  }
                }
              },
              CharacterSetName: {
              }
            },
            wrapper: true
          }
        }
      }
    },
    createDBParameterGroup: {
      name: 'CreateDBParameterGroup',
      input: {
        type: 'structure',
        members: {
          DBParameterGroupName: {
            required: true
          },
          DBParameterGroupFamily: {
            required: true
          },
          Description: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          DBParameterGroup: {
            type: 'structure',
            members: {
              DBParameterGroupName: {
              },
              DBParameterGroupFamily: {
              },
              Description: {
              }
            },
            wrapper: true
          }
        }
      }
    },
    createDBSecurityGroup: {
      name: 'CreateDBSecurityGroup',
      input: {
        type: 'structure',
        members: {
          DBSecurityGroupName: {
            required: true
          },
          DBSecurityGroupDescription: {
            required: true
          },
          EC2VpcId: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          DBSecurityGroup: {
            type: 'structure',
            members: {
              OwnerId: {
              },
              DBSecurityGroupName: {
              },
              DBSecurityGroupDescription: {
              },
              VpcId: {
              },
              EC2SecurityGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    Status: {
                    },
                    EC2SecurityGroupName: {
                    },
                    EC2SecurityGroupId: {
                    },
                    EC2SecurityGroupOwnerId: {
                    }
                  },
                  name: 'EC2SecurityGroup'
                }
              },
              IPRanges: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    Status: {
                    },
                    CIDRIP: {
                    }
                  },
                  name: 'IPRange'
                }
              }
            },
            wrapper: true
          }
        }
      }
    },
    createDBSnapshot: {
      name: 'CreateDBSnapshot',
      input: {
        type: 'structure',
        members: {
          DBSnapshotIdentifier: {
            required: true
          },
          DBInstanceIdentifier: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          DBSnapshot: {
            type: 'structure',
            members: {
              DBSnapshotIdentifier: {
              },
              DBInstanceIdentifier: {
              },
              SnapshotCreateTime: {
                type: 'timestamp'
              },
              Engine: {
              },
              AllocatedStorage: {
                type: 'integer'
              },
              Status: {
              },
              Port: {
                type: 'integer'
              },
              AvailabilityZone: {
              },
              VpcId: {
              },
              InstanceCreateTime: {
                type: 'timestamp'
              },
              MasterUsername: {
              },
              EngineVersion: {
              },
              LicenseModel: {
              },
              SnapshotType: {
              }
            },
            wrapper: true
          }
        }
      }
    },
    createDBSubnetGroup: {
      name: 'CreateDBSubnetGroup',
      input: {
        type: 'structure',
        members: {
          DBSubnetGroupName: {
            required: true
          },
          DBSubnetGroupDescription: {
            required: true
          },
          SubnetIds: {
            type: 'list',
            members: {
              name: 'SubnetIdentifier'
            },
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          DBSubnetGroup: {
            type: 'structure',
            members: {
              DBSubnetGroupName: {
              },
              DBSubnetGroupDescription: {
              },
              VpcId: {
              },
              SubnetGroupStatus: {
              },
              Subnets: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    SubnetIdentifier: {
                    },
                    SubnetAvailabilityZone: {
                      type: 'structure',
                      members: {
                        Name: {
                        }
                      },
                      wrapper: true
                    },
                    SubnetStatus: {
                    }
                  },
                  name: 'Subnet'
                }
              }
            },
            wrapper: true
          }
        }
      }
    },
    createOptionGroup: {
      name: 'CreateOptionGroup',
      input: {
        type: 'structure',
        members: {
          OptionGroupName: {
            required: true
          },
          EngineName: {
            required: true
          },
          MajorEngineVersion: {
            required: true
          },
          OptionGroupDescription: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          OptionGroup: {
            type: 'structure',
            members: {
              OptionGroupName: {
              },
              OptionGroupDescription: {
              },
              EngineName: {
              },
              MajorEngineVersion: {
              },
              Options: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    OptionName: {
                    },
                    OptionDescription: {
                    },
                    Port: {
                      type: 'integer'
                    },
                    DBSecurityGroupMemberships: {
                      type: 'list',
                      members: {
                        type: 'structure',
                        members: {
                          DBSecurityGroupName: {
                          },
                          Status: {
                          }
                        },
                        name: 'DBSecurityGroup'
                      }
                    }
                  },
                  name: 'Option'
                }
              }
            },
            wrapper: true
          }
        }
      }
    },
    deleteDBInstance: {
      name: 'DeleteDBInstance',
      input: {
        type: 'structure',
        members: {
          DBInstanceIdentifier: {
            required: true
          },
          SkipFinalSnapshot: {
            type: 'boolean'
          },
          FinalDBSnapshotIdentifier: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          DBInstance: {
            type: 'structure',
            members: {
              DBInstanceIdentifier: {
              },
              DBInstanceClass: {
              },
              Engine: {
              },
              DBInstanceStatus: {
              },
              MasterUsername: {
              },
              DBName: {
              },
              Endpoint: {
                type: 'structure',
                members: {
                  Address: {
                  },
                  Port: {
                    type: 'integer'
                  }
                }
              },
              AllocatedStorage: {
                type: 'integer'
              },
              InstanceCreateTime: {
                type: 'timestamp'
              },
              PreferredBackupWindow: {
              },
              BackupRetentionPeriod: {
                type: 'integer'
              },
              DBSecurityGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    DBSecurityGroupName: {
                    },
                    Status: {
                    }
                  },
                  name: 'DBSecurityGroup'
                }
              },
              DBParameterGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    DBParameterGroupName: {
                    },
                    ParameterApplyStatus: {
                    }
                  },
                  name: 'DBParameterGroup'
                }
              },
              AvailabilityZone: {
              },
              DBSubnetGroup: {
                type: 'structure',
                members: {
                  DBSubnetGroupName: {
                  },
                  DBSubnetGroupDescription: {
                  },
                  VpcId: {
                  },
                  SubnetGroupStatus: {
                  },
                  Subnets: {
                    type: 'list',
                    members: {
                      type: 'structure',
                      members: {
                        SubnetIdentifier: {
                        },
                        SubnetAvailabilityZone: {
                          type: 'structure',
                          members: {
                            Name: {
                            }
                          },
                          wrapper: true
                        },
                        SubnetStatus: {
                        }
                      },
                      name: 'Subnet'
                    }
                  }
                },
                wrapper: true
              },
              PreferredMaintenanceWindow: {
              },
              PendingModifiedValues: {
                type: 'structure',
                members: {
                  DBInstanceClass: {
                  },
                  AllocatedStorage: {
                    type: 'integer'
                  },
                  MasterUserPassword: {
                  },
                  Port: {
                    type: 'integer'
                  },
                  BackupRetentionPeriod: {
                    type: 'integer'
                  },
                  MultiAZ: {
                    type: 'boolean'
                  },
                  EngineVersion: {
                  }
                }
              },
              LatestRestorableTime: {
                type: 'timestamp'
              },
              MultiAZ: {
                type: 'boolean'
              },
              EngineVersion: {
              },
              AutoMinorVersionUpgrade: {
                type: 'boolean'
              },
              ReadReplicaSourceDBInstanceIdentifier: {
              },
              ReadReplicaDBInstanceIdentifiers: {
                type: 'list',
                members: {
                  name: 'ReadReplicaDBInstanceIdentifier'
                }
              },
              LicenseModel: {
              },
              OptionGroupMembership: {
                type: 'structure',
                members: {
                  OptionGroupName: {
                  },
                  Status: {
                  }
                }
              },
              CharacterSetName: {
              }
            },
            wrapper: true
          }
        }
      }
    },
    deleteDBParameterGroup: {
      name: 'DeleteDBParameterGroup',
      input: {
        type: 'structure',
        members: {
          DBParameterGroupName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteDBSecurityGroup: {
      name: 'DeleteDBSecurityGroup',
      input: {
        type: 'structure',
        members: {
          DBSecurityGroupName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteDBSnapshot: {
      name: 'DeleteDBSnapshot',
      input: {
        type: 'structure',
        members: {
          DBSnapshotIdentifier: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          DBSnapshot: {
            type: 'structure',
            members: {
              DBSnapshotIdentifier: {
              },
              DBInstanceIdentifier: {
              },
              SnapshotCreateTime: {
                type: 'timestamp'
              },
              Engine: {
              },
              AllocatedStorage: {
                type: 'integer'
              },
              Status: {
              },
              Port: {
                type: 'integer'
              },
              AvailabilityZone: {
              },
              VpcId: {
              },
              InstanceCreateTime: {
                type: 'timestamp'
              },
              MasterUsername: {
              },
              EngineVersion: {
              },
              LicenseModel: {
              },
              SnapshotType: {
              }
            },
            wrapper: true
          }
        }
      }
    },
    deleteDBSubnetGroup: {
      name: 'DeleteDBSubnetGroup',
      input: {
        type: 'structure',
        members: {
          DBSubnetGroupName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteOptionGroup: {
      name: 'DeleteOptionGroup',
      input: {
        type: 'structure',
        members: {
          OptionGroupName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    describeDBEngineVersions: {
      name: 'DescribeDBEngineVersions',
      input: {
        type: 'structure',
        members: {
          Engine: {
          },
          EngineVersion: {
          },
          DBParameterGroupFamily: {
          },
          MaxRecords: {
            type: 'integer'
          },
          Marker: {
          },
          DefaultOnly: {
            type: 'boolean'
          },
          ListSupportedCharacterSets: {
            type: 'boolean'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Marker: {
          },
          DBEngineVersions: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Engine: {
                },
                EngineVersion: {
                },
                DBParameterGroupFamily: {
                },
                DBEngineDescription: {
                },
                DBEngineVersionDescription: {
                },
                SupportedCharacterSets: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      CharacterSetName: {
                      },
                      CharacterSetDescription: {
                      }
                    },
                    name: 'CharacterSet'
                  }
                }
              },
              name: 'DBEngineVersion'
            }
          }
        }
      }
    },
    describeDBInstances: {
      name: 'DescribeDBInstances',
      input: {
        type: 'structure',
        members: {
          DBInstanceIdentifier: {
          },
          MaxRecords: {
            type: 'integer'
          },
          Marker: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Marker: {
          },
          DBInstances: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                DBInstanceIdentifier: {
                },
                DBInstanceClass: {
                },
                Engine: {
                },
                DBInstanceStatus: {
                },
                MasterUsername: {
                },
                DBName: {
                },
                Endpoint: {
                  type: 'structure',
                  members: {
                    Address: {
                    },
                    Port: {
                      type: 'integer'
                    }
                  }
                },
                AllocatedStorage: {
                  type: 'integer'
                },
                InstanceCreateTime: {
                  type: 'timestamp'
                },
                PreferredBackupWindow: {
                },
                BackupRetentionPeriod: {
                  type: 'integer'
                },
                DBSecurityGroups: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      DBSecurityGroupName: {
                      },
                      Status: {
                      }
                    },
                    name: 'DBSecurityGroup'
                  }
                },
                DBParameterGroups: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      DBParameterGroupName: {
                      },
                      ParameterApplyStatus: {
                      }
                    },
                    name: 'DBParameterGroup'
                  }
                },
                AvailabilityZone: {
                },
                DBSubnetGroup: {
                  type: 'structure',
                  members: {
                    DBSubnetGroupName: {
                    },
                    DBSubnetGroupDescription: {
                    },
                    VpcId: {
                    },
                    SubnetGroupStatus: {
                    },
                    Subnets: {
                      type: 'list',
                      members: {
                        type: 'structure',
                        members: {
                          SubnetIdentifier: {
                          },
                          SubnetAvailabilityZone: {
                            type: 'structure',
                            members: {
                              Name: {
                              }
                            },
                            wrapper: true
                          },
                          SubnetStatus: {
                          }
                        },
                        name: 'Subnet'
                      }
                    }
                  },
                  wrapper: true
                },
                PreferredMaintenanceWindow: {
                },
                PendingModifiedValues: {
                  type: 'structure',
                  members: {
                    DBInstanceClass: {
                    },
                    AllocatedStorage: {
                      type: 'integer'
                    },
                    MasterUserPassword: {
                    },
                    Port: {
                      type: 'integer'
                    },
                    BackupRetentionPeriod: {
                      type: 'integer'
                    },
                    MultiAZ: {
                      type: 'boolean'
                    },
                    EngineVersion: {
                    }
                  }
                },
                LatestRestorableTime: {
                  type: 'timestamp'
                },
                MultiAZ: {
                  type: 'boolean'
                },
                EngineVersion: {
                },
                AutoMinorVersionUpgrade: {
                  type: 'boolean'
                },
                ReadReplicaSourceDBInstanceIdentifier: {
                },
                ReadReplicaDBInstanceIdentifiers: {
                  type: 'list',
                  members: {
                    name: 'ReadReplicaDBInstanceIdentifier'
                  }
                },
                LicenseModel: {
                },
                OptionGroupMembership: {
                  type: 'structure',
                  members: {
                    OptionGroupName: {
                    },
                    Status: {
                    }
                  }
                },
                CharacterSetName: {
                }
              },
              wrapper: true,
              name: 'DBInstance'
            }
          }
        }
      }
    },
    describeDBParameterGroups: {
      name: 'DescribeDBParameterGroups',
      input: {
        type: 'structure',
        members: {
          DBParameterGroupName: {
          },
          MaxRecords: {
            type: 'integer'
          },
          Marker: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Marker: {
          },
          DBParameterGroups: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                DBParameterGroupName: {
                },
                DBParameterGroupFamily: {
                },
                Description: {
                }
              },
              wrapper: true,
              name: 'DBParameterGroup'
            }
          }
        }
      }
    },
    describeDBParameters: {
      name: 'DescribeDBParameters',
      input: {
        type: 'structure',
        members: {
          DBParameterGroupName: {
            required: true
          },
          Source: {
          },
          MaxRecords: {
            type: 'integer'
          },
          Marker: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Parameters: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                ParameterName: {
                },
                ParameterValue: {
                },
                Description: {
                },
                Source: {
                },
                ApplyType: {
                },
                DataType: {
                },
                AllowedValues: {
                },
                IsModifiable: {
                  type: 'boolean'
                },
                MinimumEngineVersion: {
                },
                ApplyMethod: {
                }
              },
              name: 'Parameter'
            }
          },
          Marker: {
          }
        }
      }
    },
    describeDBSecurityGroups: {
      name: 'DescribeDBSecurityGroups',
      input: {
        type: 'structure',
        members: {
          DBSecurityGroupName: {
          },
          MaxRecords: {
            type: 'integer'
          },
          Marker: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Marker: {
          },
          DBSecurityGroups: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                OwnerId: {
                },
                DBSecurityGroupName: {
                },
                DBSecurityGroupDescription: {
                },
                VpcId: {
                },
                EC2SecurityGroups: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      Status: {
                      },
                      EC2SecurityGroupName: {
                      },
                      EC2SecurityGroupId: {
                      },
                      EC2SecurityGroupOwnerId: {
                      }
                    },
                    name: 'EC2SecurityGroup'
                  }
                },
                IPRanges: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      Status: {
                      },
                      CIDRIP: {
                      }
                    },
                    name: 'IPRange'
                  }
                }
              },
              wrapper: true,
              name: 'DBSecurityGroup'
            }
          }
        }
      }
    },
    describeDBSnapshots: {
      name: 'DescribeDBSnapshots',
      input: {
        type: 'structure',
        members: {
          DBInstanceIdentifier: {
          },
          DBSnapshotIdentifier: {
          },
          SnapshotType: {
          },
          MaxRecords: {
            type: 'integer'
          },
          Marker: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Marker: {
          },
          DBSnapshots: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                DBSnapshotIdentifier: {
                },
                DBInstanceIdentifier: {
                },
                SnapshotCreateTime: {
                  type: 'timestamp'
                },
                Engine: {
                },
                AllocatedStorage: {
                  type: 'integer'
                },
                Status: {
                },
                Port: {
                  type: 'integer'
                },
                AvailabilityZone: {
                },
                VpcId: {
                },
                InstanceCreateTime: {
                  type: 'timestamp'
                },
                MasterUsername: {
                },
                EngineVersion: {
                },
                LicenseModel: {
                },
                SnapshotType: {
                }
              },
              wrapper: true,
              name: 'DBSnapshot'
            }
          }
        }
      }
    },
    describeDBSubnetGroups: {
      name: 'DescribeDBSubnetGroups',
      input: {
        type: 'structure',
        members: {
          DBSubnetGroupName: {
          },
          MaxRecords: {
            type: 'integer'
          },
          Marker: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Marker: {
          },
          DBSubnetGroups: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                DBSubnetGroupName: {
                },
                DBSubnetGroupDescription: {
                },
                VpcId: {
                },
                SubnetGroupStatus: {
                },
                Subnets: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      SubnetIdentifier: {
                      },
                      SubnetAvailabilityZone: {
                        type: 'structure',
                        members: {
                          Name: {
                          }
                        },
                        wrapper: true
                      },
                      SubnetStatus: {
                      }
                    },
                    name: 'Subnet'
                  }
                }
              },
              wrapper: true,
              name: 'DBSubnetGroup'
            }
          }
        }
      }
    },
    describeEngineDefaultParameters: {
      name: 'DescribeEngineDefaultParameters',
      input: {
        type: 'structure',
        members: {
          DBParameterGroupFamily: {
            required: true
          },
          MaxRecords: {
            type: 'integer'
          },
          Marker: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          EngineDefaults: {
            type: 'structure',
            members: {
              DBParameterGroupFamily: {
              },
              Marker: {
              },
              Parameters: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    ParameterName: {
                    },
                    ParameterValue: {
                    },
                    Description: {
                    },
                    Source: {
                    },
                    ApplyType: {
                    },
                    DataType: {
                    },
                    AllowedValues: {
                    },
                    IsModifiable: {
                      type: 'boolean'
                    },
                    MinimumEngineVersion: {
                    },
                    ApplyMethod: {
                    }
                  },
                  name: 'Parameter'
                }
              }
            },
            wrapper: true
          }
        }
      }
    },
    describeEvents: {
      name: 'DescribeEvents',
      input: {
        type: 'structure',
        members: {
          SourceIdentifier: {
          },
          SourceType: {
          },
          StartTime: {
            type: 'timestamp'
          },
          EndTime: {
            type: 'timestamp'
          },
          Duration: {
            type: 'integer'
          },
          MaxRecords: {
            type: 'integer'
          },
          Marker: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Marker: {
          },
          Events: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                SourceIdentifier: {
                },
                SourceType: {
                },
                Message: {
                },
                Date: {
                  type: 'timestamp'
                }
              },
              name: 'Event'
            }
          }
        }
      }
    },
    describeOptionGroupOptions: {
      name: 'DescribeOptionGroupOptions',
      input: {
        type: 'structure',
        members: {
          EngineName: {
            required: true
          },
          MajorEngineVersion: {
          },
          MaxRecords: {
            type: 'integer'
          },
          Marker: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          OptionGroupOptions: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                },
                Description: {
                },
                EngineName: {
                },
                MajorEngineVersion: {
                },
                MinimumRequiredMinorEngineVersion: {
                },
                PortRequired: {
                  type: 'boolean'
                },
                DefaultPort: {
                  type: 'integer'
                },
                OptionsDependedOn: {
                  type: 'list',
                  members: {
                    name: 'OptionName'
                  }
                }
              },
              name: 'OptionGroupOption'
            }
          },
          Marker: {
          }
        }
      }
    },
    describeOptionGroups: {
      name: 'DescribeOptionGroups',
      input: {
        type: 'structure',
        members: {
          OptionGroupName: {
          },
          Marker: {
          },
          MaxRecords: {
            type: 'integer'
          },
          EngineName: {
          },
          MajorEngineVersion: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          OptionGroupsList: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                OptionGroupName: {
                },
                OptionGroupDescription: {
                },
                EngineName: {
                },
                MajorEngineVersion: {
                },
                Options: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      OptionName: {
                      },
                      OptionDescription: {
                      },
                      Port: {
                        type: 'integer'
                      },
                      DBSecurityGroupMemberships: {
                        type: 'list',
                        members: {
                          type: 'structure',
                          members: {
                            DBSecurityGroupName: {
                            },
                            Status: {
                            }
                          },
                          name: 'DBSecurityGroup'
                        }
                      }
                    },
                    name: 'Option'
                  }
                }
              },
              wrapper: true,
              name: 'OptionGroup'
            }
          },
          Marker: {
          }
        }
      }
    },
    describeOrderableDBInstanceOptions: {
      name: 'DescribeOrderableDBInstanceOptions',
      input: {
        type: 'structure',
        members: {
          Engine: {
            required: true
          },
          EngineVersion: {
          },
          DBInstanceClass: {
          },
          LicenseModel: {
          },
          MaxRecords: {
            type: 'integer'
          },
          Marker: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          OrderableDBInstanceOptions: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Engine: {
                },
                EngineVersion: {
                },
                DBInstanceClass: {
                },
                LicenseModel: {
                },
                AvailabilityZones: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      Name: {
                      }
                    },
                    wrapper: true,
                    name: 'AvailabilityZone'
                  }
                },
                MultiAZCapable: {
                  type: 'boolean'
                },
                ReadReplicaCapable: {
                  type: 'boolean'
                },
                VpcCapable: {
                  type: 'boolean'
                },
                VpcMultiAZCapable: {
                  type: 'boolean'
                },
                VpcReadReplicaCapable: {
                  type: 'boolean'
                }
              },
              wrapper: true,
              name: 'OrderableDBInstanceOption'
            }
          },
          Marker: {
          }
        }
      }
    },
    describeReservedDBInstances: {
      name: 'DescribeReservedDBInstances',
      input: {
        type: 'structure',
        members: {
          ReservedDBInstanceId: {
          },
          ReservedDBInstancesOfferingId: {
          },
          DBInstanceClass: {
          },
          Duration: {
          },
          ProductDescription: {
          },
          OfferingType: {
          },
          MultiAZ: {
            type: 'boolean'
          },
          MaxRecords: {
            type: 'integer'
          },
          Marker: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Marker: {
          },
          ReservedDBInstances: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                ReservedDBInstanceId: {
                },
                ReservedDBInstancesOfferingId: {
                },
                DBInstanceClass: {
                },
                StartTime: {
                  type: 'timestamp'
                },
                Duration: {
                  type: 'integer'
                },
                FixedPrice: {
                  type: 'float'
                },
                UsagePrice: {
                  type: 'float'
                },
                CurrencyCode: {
                },
                DBInstanceCount: {
                  type: 'integer'
                },
                ProductDescription: {
                },
                OfferingType: {
                },
                MultiAZ: {
                  type: 'boolean'
                },
                State: {
                },
                RecurringCharges: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      RecurringChargeAmount: {
                        type: 'float'
                      },
                      RecurringChargeFrequency: {
                      }
                    },
                    wrapper: true,
                    name: 'RecurringCharge'
                  }
                }
              },
              wrapper: true,
              name: 'ReservedDBInstance'
            }
          }
        }
      }
    },
    describeReservedDBInstancesOfferings: {
      name: 'DescribeReservedDBInstancesOfferings',
      input: {
        type: 'structure',
        members: {
          ReservedDBInstancesOfferingId: {
          },
          DBInstanceClass: {
          },
          Duration: {
          },
          ProductDescription: {
          },
          OfferingType: {
          },
          MultiAZ: {
            type: 'boolean'
          },
          MaxRecords: {
            type: 'integer'
          },
          Marker: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Marker: {
          },
          ReservedDBInstancesOfferings: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                ReservedDBInstancesOfferingId: {
                },
                DBInstanceClass: {
                },
                Duration: {
                  type: 'integer'
                },
                FixedPrice: {
                  type: 'float'
                },
                UsagePrice: {
                  type: 'float'
                },
                CurrencyCode: {
                },
                ProductDescription: {
                },
                OfferingType: {
                },
                MultiAZ: {
                  type: 'boolean'
                },
                RecurringCharges: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      RecurringChargeAmount: {
                        type: 'float'
                      },
                      RecurringChargeFrequency: {
                      }
                    },
                    wrapper: true,
                    name: 'RecurringCharge'
                  }
                }
              },
              wrapper: true,
              name: 'ReservedDBInstancesOffering'
            }
          }
        }
      }
    },
    modifyDBInstance: {
      name: 'ModifyDBInstance',
      input: {
        type: 'structure',
        members: {
          DBInstanceIdentifier: {
            required: true
          },
          AllocatedStorage: {
            type: 'integer'
          },
          DBInstanceClass: {
          },
          DBSecurityGroups: {
            type: 'list',
            members: {
              name: 'DBSecurityGroupName'
            }
          },
          ApplyImmediately: {
            type: 'boolean'
          },
          MasterUserPassword: {
          },
          DBParameterGroupName: {
          },
          BackupRetentionPeriod: {
            type: 'integer'
          },
          PreferredBackupWindow: {
          },
          PreferredMaintenanceWindow: {
          },
          MultiAZ: {
            type: 'boolean'
          },
          EngineVersion: {
          },
          AllowMajorVersionUpgrade: {
            type: 'boolean'
          },
          AutoMinorVersionUpgrade: {
            type: 'boolean'
          },
          OptionGroupName: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          DBInstance: {
            type: 'structure',
            members: {
              DBInstanceIdentifier: {
              },
              DBInstanceClass: {
              },
              Engine: {
              },
              DBInstanceStatus: {
              },
              MasterUsername: {
              },
              DBName: {
              },
              Endpoint: {
                type: 'structure',
                members: {
                  Address: {
                  },
                  Port: {
                    type: 'integer'
                  }
                }
              },
              AllocatedStorage: {
                type: 'integer'
              },
              InstanceCreateTime: {
                type: 'timestamp'
              },
              PreferredBackupWindow: {
              },
              BackupRetentionPeriod: {
                type: 'integer'
              },
              DBSecurityGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    DBSecurityGroupName: {
                    },
                    Status: {
                    }
                  },
                  name: 'DBSecurityGroup'
                }
              },
              DBParameterGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    DBParameterGroupName: {
                    },
                    ParameterApplyStatus: {
                    }
                  },
                  name: 'DBParameterGroup'
                }
              },
              AvailabilityZone: {
              },
              DBSubnetGroup: {
                type: 'structure',
                members: {
                  DBSubnetGroupName: {
                  },
                  DBSubnetGroupDescription: {
                  },
                  VpcId: {
                  },
                  SubnetGroupStatus: {
                  },
                  Subnets: {
                    type: 'list',
                    members: {
                      type: 'structure',
                      members: {
                        SubnetIdentifier: {
                        },
                        SubnetAvailabilityZone: {
                          type: 'structure',
                          members: {
                            Name: {
                            }
                          },
                          wrapper: true
                        },
                        SubnetStatus: {
                        }
                      },
                      name: 'Subnet'
                    }
                  }
                },
                wrapper: true
              },
              PreferredMaintenanceWindow: {
              },
              PendingModifiedValues: {
                type: 'structure',
                members: {
                  DBInstanceClass: {
                  },
                  AllocatedStorage: {
                    type: 'integer'
                  },
                  MasterUserPassword: {
                  },
                  Port: {
                    type: 'integer'
                  },
                  BackupRetentionPeriod: {
                    type: 'integer'
                  },
                  MultiAZ: {
                    type: 'boolean'
                  },
                  EngineVersion: {
                  }
                }
              },
              LatestRestorableTime: {
                type: 'timestamp'
              },
              MultiAZ: {
                type: 'boolean'
              },
              EngineVersion: {
              },
              AutoMinorVersionUpgrade: {
                type: 'boolean'
              },
              ReadReplicaSourceDBInstanceIdentifier: {
              },
              ReadReplicaDBInstanceIdentifiers: {
                type: 'list',
                members: {
                  name: 'ReadReplicaDBInstanceIdentifier'
                }
              },
              LicenseModel: {
              },
              OptionGroupMembership: {
                type: 'structure',
                members: {
                  OptionGroupName: {
                  },
                  Status: {
                  }
                }
              },
              CharacterSetName: {
              }
            },
            wrapper: true
          }
        }
      }
    },
    modifyDBParameterGroup: {
      name: 'ModifyDBParameterGroup',
      input: {
        type: 'structure',
        members: {
          DBParameterGroupName: {
            required: true
          },
          Parameters: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                ParameterName: {
                },
                ParameterValue: {
                },
                Description: {
                },
                Source: {
                },
                ApplyType: {
                },
                DataType: {
                },
                AllowedValues: {
                },
                IsModifiable: {
                  type: 'boolean'
                },
                MinimumEngineVersion: {
                },
                ApplyMethod: {
                }
              },
              name: 'Parameter'
            },
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          DBParameterGroupName: {
          }
        }
      }
    },
    modifyDBSubnetGroup: {
      name: 'ModifyDBSubnetGroup',
      input: {
        type: 'structure',
        members: {
          DBSubnetGroupName: {
            required: true
          },
          DBSubnetGroupDescription: {
          },
          SubnetIds: {
            type: 'list',
            members: {
              name: 'SubnetIdentifier'
            },
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          DBSubnetGroup: {
            type: 'structure',
            members: {
              DBSubnetGroupName: {
              },
              DBSubnetGroupDescription: {
              },
              VpcId: {
              },
              SubnetGroupStatus: {
              },
              Subnets: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    SubnetIdentifier: {
                    },
                    SubnetAvailabilityZone: {
                      type: 'structure',
                      members: {
                        Name: {
                        }
                      },
                      wrapper: true
                    },
                    SubnetStatus: {
                    }
                  },
                  name: 'Subnet'
                }
              }
            },
            wrapper: true
          }
        }
      }
    },
    modifyOptionGroup: {
      name: 'ModifyOptionGroup',
      input: {
        type: 'structure',
        members: {
          OptionGroupName: {
            required: true
          },
          OptionsToInclude: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                OptionName: {
                  required: true
                },
                Port: {
                  type: 'integer'
                },
                DBSecurityGroupMemberships: {
                  type: 'list',
                  members: {
                    name: 'DBSecurityGroupName'
                  }
                }
              },
              name: 'OptionConfiguration'
            }
          },
          OptionsToRemove: {
            type: 'list'
          },
          ApplyImmediately: {
            type: 'boolean'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          OptionGroup: {
            type: 'structure',
            members: {
              OptionGroupName: {
              },
              OptionGroupDescription: {
              },
              EngineName: {
              },
              MajorEngineVersion: {
              },
              Options: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    OptionName: {
                    },
                    OptionDescription: {
                    },
                    Port: {
                      type: 'integer'
                    },
                    DBSecurityGroupMemberships: {
                      type: 'list',
                      members: {
                        type: 'structure',
                        members: {
                          DBSecurityGroupName: {
                          },
                          Status: {
                          }
                        },
                        name: 'DBSecurityGroup'
                      }
                    }
                  },
                  name: 'Option'
                }
              }
            },
            wrapper: true
          }
        }
      }
    },
    purchaseReservedDBInstancesOffering: {
      name: 'PurchaseReservedDBInstancesOffering',
      input: {
        type: 'structure',
        members: {
          ReservedDBInstancesOfferingId: {
            required: true
          },
          ReservedDBInstanceId: {
          },
          DBInstanceCount: {
            type: 'integer'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          ReservedDBInstance: {
            type: 'structure',
            members: {
              ReservedDBInstanceId: {
              },
              ReservedDBInstancesOfferingId: {
              },
              DBInstanceClass: {
              },
              StartTime: {
                type: 'timestamp'
              },
              Duration: {
                type: 'integer'
              },
              FixedPrice: {
                type: 'float'
              },
              UsagePrice: {
                type: 'float'
              },
              CurrencyCode: {
              },
              DBInstanceCount: {
                type: 'integer'
              },
              ProductDescription: {
              },
              OfferingType: {
              },
              MultiAZ: {
                type: 'boolean'
              },
              State: {
              },
              RecurringCharges: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    RecurringChargeAmount: {
                      type: 'float'
                    },
                    RecurringChargeFrequency: {
                    }
                  },
                  wrapper: true,
                  name: 'RecurringCharge'
                }
              }
            },
            wrapper: true
          }
        }
      }
    },
    rebootDBInstance: {
      name: 'RebootDBInstance',
      input: {
        type: 'structure',
        members: {
          DBInstanceIdentifier: {
            required: true
          },
          ForceFailover: {
            type: 'boolean'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          DBInstance: {
            type: 'structure',
            members: {
              DBInstanceIdentifier: {
              },
              DBInstanceClass: {
              },
              Engine: {
              },
              DBInstanceStatus: {
              },
              MasterUsername: {
              },
              DBName: {
              },
              Endpoint: {
                type: 'structure',
                members: {
                  Address: {
                  },
                  Port: {
                    type: 'integer'
                  }
                }
              },
              AllocatedStorage: {
                type: 'integer'
              },
              InstanceCreateTime: {
                type: 'timestamp'
              },
              PreferredBackupWindow: {
              },
              BackupRetentionPeriod: {
                type: 'integer'
              },
              DBSecurityGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    DBSecurityGroupName: {
                    },
                    Status: {
                    }
                  },
                  name: 'DBSecurityGroup'
                }
              },
              DBParameterGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    DBParameterGroupName: {
                    },
                    ParameterApplyStatus: {
                    }
                  },
                  name: 'DBParameterGroup'
                }
              },
              AvailabilityZone: {
              },
              DBSubnetGroup: {
                type: 'structure',
                members: {
                  DBSubnetGroupName: {
                  },
                  DBSubnetGroupDescription: {
                  },
                  VpcId: {
                  },
                  SubnetGroupStatus: {
                  },
                  Subnets: {
                    type: 'list',
                    members: {
                      type: 'structure',
                      members: {
                        SubnetIdentifier: {
                        },
                        SubnetAvailabilityZone: {
                          type: 'structure',
                          members: {
                            Name: {
                            }
                          },
                          wrapper: true
                        },
                        SubnetStatus: {
                        }
                      },
                      name: 'Subnet'
                    }
                  }
                },
                wrapper: true
              },
              PreferredMaintenanceWindow: {
              },
              PendingModifiedValues: {
                type: 'structure',
                members: {
                  DBInstanceClass: {
                  },
                  AllocatedStorage: {
                    type: 'integer'
                  },
                  MasterUserPassword: {
                  },
                  Port: {
                    type: 'integer'
                  },
                  BackupRetentionPeriod: {
                    type: 'integer'
                  },
                  MultiAZ: {
                    type: 'boolean'
                  },
                  EngineVersion: {
                  }
                }
              },
              LatestRestorableTime: {
                type: 'timestamp'
              },
              MultiAZ: {
                type: 'boolean'
              },
              EngineVersion: {
              },
              AutoMinorVersionUpgrade: {
                type: 'boolean'
              },
              ReadReplicaSourceDBInstanceIdentifier: {
              },
              ReadReplicaDBInstanceIdentifiers: {
                type: 'list',
                members: {
                  name: 'ReadReplicaDBInstanceIdentifier'
                }
              },
              LicenseModel: {
              },
              OptionGroupMembership: {
                type: 'structure',
                members: {
                  OptionGroupName: {
                  },
                  Status: {
                  }
                }
              },
              CharacterSetName: {
              }
            },
            wrapper: true
          }
        }
      }
    },
    resetDBParameterGroup: {
      name: 'ResetDBParameterGroup',
      input: {
        type: 'structure',
        members: {
          DBParameterGroupName: {
            required: true
          },
          ResetAllParameters: {
            type: 'boolean'
          },
          Parameters: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                ParameterName: {
                },
                ParameterValue: {
                },
                Description: {
                },
                Source: {
                },
                ApplyType: {
                },
                DataType: {
                },
                AllowedValues: {
                },
                IsModifiable: {
                  type: 'boolean'
                },
                MinimumEngineVersion: {
                },
                ApplyMethod: {
                }
              },
              name: 'Parameter'
            }
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          DBParameterGroupName: {
          }
        }
      }
    },
    restoreDBInstanceFromDBSnapshot: {
      name: 'RestoreDBInstanceFromDBSnapshot',
      input: {
        type: 'structure',
        members: {
          DBInstanceIdentifier: {
            required: true
          },
          DBSnapshotIdentifier: {
            required: true
          },
          DBInstanceClass: {
          },
          Port: {
            type: 'integer'
          },
          AvailabilityZone: {
          },
          DBSubnetGroupName: {
          },
          MultiAZ: {
            type: 'boolean'
          },
          AutoMinorVersionUpgrade: {
            type: 'boolean'
          },
          LicenseModel: {
          },
          DBName: {
          },
          Engine: {
          },
          OptionGroupName: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          DBInstance: {
            type: 'structure',
            members: {
              DBInstanceIdentifier: {
              },
              DBInstanceClass: {
              },
              Engine: {
              },
              DBInstanceStatus: {
              },
              MasterUsername: {
              },
              DBName: {
              },
              Endpoint: {
                type: 'structure',
                members: {
                  Address: {
                  },
                  Port: {
                    type: 'integer'
                  }
                }
              },
              AllocatedStorage: {
                type: 'integer'
              },
              InstanceCreateTime: {
                type: 'timestamp'
              },
              PreferredBackupWindow: {
              },
              BackupRetentionPeriod: {
                type: 'integer'
              },
              DBSecurityGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    DBSecurityGroupName: {
                    },
                    Status: {
                    }
                  },
                  name: 'DBSecurityGroup'
                }
              },
              DBParameterGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    DBParameterGroupName: {
                    },
                    ParameterApplyStatus: {
                    }
                  },
                  name: 'DBParameterGroup'
                }
              },
              AvailabilityZone: {
              },
              DBSubnetGroup: {
                type: 'structure',
                members: {
                  DBSubnetGroupName: {
                  },
                  DBSubnetGroupDescription: {
                  },
                  VpcId: {
                  },
                  SubnetGroupStatus: {
                  },
                  Subnets: {
                    type: 'list',
                    members: {
                      type: 'structure',
                      members: {
                        SubnetIdentifier: {
                        },
                        SubnetAvailabilityZone: {
                          type: 'structure',
                          members: {
                            Name: {
                            }
                          },
                          wrapper: true
                        },
                        SubnetStatus: {
                        }
                      },
                      name: 'Subnet'
                    }
                  }
                },
                wrapper: true
              },
              PreferredMaintenanceWindow: {
              },
              PendingModifiedValues: {
                type: 'structure',
                members: {
                  DBInstanceClass: {
                  },
                  AllocatedStorage: {
                    type: 'integer'
                  },
                  MasterUserPassword: {
                  },
                  Port: {
                    type: 'integer'
                  },
                  BackupRetentionPeriod: {
                    type: 'integer'
                  },
                  MultiAZ: {
                    type: 'boolean'
                  },
                  EngineVersion: {
                  }
                }
              },
              LatestRestorableTime: {
                type: 'timestamp'
              },
              MultiAZ: {
                type: 'boolean'
              },
              EngineVersion: {
              },
              AutoMinorVersionUpgrade: {
                type: 'boolean'
              },
              ReadReplicaSourceDBInstanceIdentifier: {
              },
              ReadReplicaDBInstanceIdentifiers: {
                type: 'list',
                members: {
                  name: 'ReadReplicaDBInstanceIdentifier'
                }
              },
              LicenseModel: {
              },
              OptionGroupMembership: {
                type: 'structure',
                members: {
                  OptionGroupName: {
                  },
                  Status: {
                  }
                }
              },
              CharacterSetName: {
              }
            },
            wrapper: true
          }
        }
      }
    },
    restoreDBInstanceToPointInTime: {
      name: 'RestoreDBInstanceToPointInTime',
      input: {
        type: 'structure',
        members: {
          SourceDBInstanceIdentifier: {
            required: true
          },
          TargetDBInstanceIdentifier: {
            required: true
          },
          RestoreTime: {
            type: 'timestamp'
          },
          UseLatestRestorableTime: {
            type: 'boolean'
          },
          DBInstanceClass: {
          },
          Port: {
            type: 'integer'
          },
          AvailabilityZone: {
          },
          DBSubnetGroupName: {
          },
          MultiAZ: {
            type: 'boolean'
          },
          AutoMinorVersionUpgrade: {
            type: 'boolean'
          },
          LicenseModel: {
          },
          DBName: {
          },
          Engine: {
          },
          OptionGroupName: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          DBInstance: {
            type: 'structure',
            members: {
              DBInstanceIdentifier: {
              },
              DBInstanceClass: {
              },
              Engine: {
              },
              DBInstanceStatus: {
              },
              MasterUsername: {
              },
              DBName: {
              },
              Endpoint: {
                type: 'structure',
                members: {
                  Address: {
                  },
                  Port: {
                    type: 'integer'
                  }
                }
              },
              AllocatedStorage: {
                type: 'integer'
              },
              InstanceCreateTime: {
                type: 'timestamp'
              },
              PreferredBackupWindow: {
              },
              BackupRetentionPeriod: {
                type: 'integer'
              },
              DBSecurityGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    DBSecurityGroupName: {
                    },
                    Status: {
                    }
                  },
                  name: 'DBSecurityGroup'
                }
              },
              DBParameterGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    DBParameterGroupName: {
                    },
                    ParameterApplyStatus: {
                    }
                  },
                  name: 'DBParameterGroup'
                }
              },
              AvailabilityZone: {
              },
              DBSubnetGroup: {
                type: 'structure',
                members: {
                  DBSubnetGroupName: {
                  },
                  DBSubnetGroupDescription: {
                  },
                  VpcId: {
                  },
                  SubnetGroupStatus: {
                  },
                  Subnets: {
                    type: 'list',
                    members: {
                      type: 'structure',
                      members: {
                        SubnetIdentifier: {
                        },
                        SubnetAvailabilityZone: {
                          type: 'structure',
                          members: {
                            Name: {
                            }
                          },
                          wrapper: true
                        },
                        SubnetStatus: {
                        }
                      },
                      name: 'Subnet'
                    }
                  }
                },
                wrapper: true
              },
              PreferredMaintenanceWindow: {
              },
              PendingModifiedValues: {
                type: 'structure',
                members: {
                  DBInstanceClass: {
                  },
                  AllocatedStorage: {
                    type: 'integer'
                  },
                  MasterUserPassword: {
                  },
                  Port: {
                    type: 'integer'
                  },
                  BackupRetentionPeriod: {
                    type: 'integer'
                  },
                  MultiAZ: {
                    type: 'boolean'
                  },
                  EngineVersion: {
                  }
                }
              },
              LatestRestorableTime: {
                type: 'timestamp'
              },
              MultiAZ: {
                type: 'boolean'
              },
              EngineVersion: {
              },
              AutoMinorVersionUpgrade: {
                type: 'boolean'
              },
              ReadReplicaSourceDBInstanceIdentifier: {
              },
              ReadReplicaDBInstanceIdentifiers: {
                type: 'list',
                members: {
                  name: 'ReadReplicaDBInstanceIdentifier'
                }
              },
              LicenseModel: {
              },
              OptionGroupMembership: {
                type: 'structure',
                members: {
                  OptionGroupName: {
                  },
                  Status: {
                  }
                }
              },
              CharacterSetName: {
              }
            },
            wrapper: true
          }
        }
      }
    },
    revokeDBSecurityGroupIngress: {
      name: 'RevokeDBSecurityGroupIngress',
      input: {
        type: 'structure',
        members: {
          DBSecurityGroupName: {
            required: true
          },
          CIDRIP: {
          },
          EC2SecurityGroupName: {
          },
          EC2SecurityGroupId: {
          },
          EC2SecurityGroupOwnerId: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          DBSecurityGroup: {
            type: 'structure',
            members: {
              OwnerId: {
              },
              DBSecurityGroupName: {
              },
              DBSecurityGroupDescription: {
              },
              VpcId: {
              },
              EC2SecurityGroups: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    Status: {
                    },
                    EC2SecurityGroupName: {
                    },
                    EC2SecurityGroupId: {
                    },
                    EC2SecurityGroupOwnerId: {
                    }
                  },
                  name: 'EC2SecurityGroup'
                }
              },
              IPRanges: {
                type: 'list',
                members: {
                  type: 'structure',
                  members: {
                    Status: {
                    },
                    CIDRIP: {
                    }
                  },
                  name: 'IPRange'
                }
              }
            },
            wrapper: true
          }
        }
      }
    }
  }
};

},{}],63:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

module.exports = {
  format: 'rest-xml',
  apiVersion: '2006-03-01',
  checksumFormat: 'md5',
  endpointPrefix: 's3',
  globalEndpoint: 's3.amazonaws.com',
  serviceAbbreviation: 'Amazon S3',
  serviceFullName: 'Amazon Simple Storage Service',
  signatureVersion: 's3',
  timestampFormat: 'rfc822',
  xmlnamespace: 'http://s3.amazonaws.com/doc/2006-03-01/',
  operations: {
    abortMultipartUpload: {
      name: 'AbortMultipartUpload',
      http: {
        method: 'DELETE',
        uri: '/{Bucket}/{Key}?uploadId={UploadId}'
      },
      input: {
        type: 'structure',
        members: {
          Bucket: {
            required: true,
            location: 'uri'
          },
          Key: {
            required: true,
            location: 'uri'
          },
          UploadId: {
            required: true,
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    completeMultipartUpload: {
      name: 'CompleteMultipartUpload',
      http: {
        method: 'POST',
        uri: '/{Bucket}/{Key}?uploadId={UploadId}'
      },
      input: {
        xml: 'MultipartUpload',
        type: 'structure',
        members: {
          Bucket: {
            required: true,
            location: 'uri'
          },
          Key: {
            required: true,
            location: 'uri'
          },
          MultipartUpload: {
            type: 'structure',
            name: 'CompleteMultipartUpload',
            members: {
              Parts: {
                type: 'list',
                flattened: true,
                name: 'Part',
                members: {
                  type: 'structure',
                  members: {
                    ETag: {
                    },
                    PartNumber: {
                      type: 'integer'
                    }
                  }
                }
              }
            }
          },
          UploadId: {
            required: true,
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Location: {
          },
          Bucket: {
          },
          Key: {
          },
          ETag: {
            location: 'header',
            name: 'ETag'
          },
          Expiration: {
            type: 'timestamp',
            location: 'header',
            name: 'x-amz-expiration'
          },
          ServerSideEncryption: {
            location: 'header',
            name: 'x-amz-server-side-encryption'
          },
          VersionId: {
            location: 'header',
            name: 'x-amz-version-id'
          }
        }
      }
    },
    copyObject: {
      name: 'CopyObject',
      http: {
        method: 'PUT',
        uri: '/{Bucket}/{Key}'
      },
      input: {
        type: 'structure',
        members: {
          ACL: {
            location: 'header',
            name: 'x-amz-acl'
          },
          Bucket: {
            required: true,
            location: 'uri'
          },
          CacheControl: {
            location: 'header',
            name: 'Cache-Control'
          },
          ContentDisposition: {
            location: 'header',
            name: 'Content-Disposition'
          },
          ContentEncoding: {
            location: 'header',
            name: 'Content-Encoding'
          },
          ContentLanguage: {
            location: 'header',
            name: 'Content-Language'
          },
          ContentType: {
            location: 'header',
            name: 'Content-Type'
          },
          CopySource: {
            location: 'header',
            name: 'x-amz-copy-source',
            required: true
          },
          CopySourceIfMatch: {
            type: 'timestamp',
            location: 'header',
            name: 'x-amz-copy-source-if-match'
          },
          CopySourceIfModifiedSince: {
            type: 'timestamp',
            location: 'header',
            name: 'x-amz-copy-source-if-modified-since'
          },
          CopySourceIfNoneMatch: {
            type: 'timestamp',
            location: 'header',
            name: 'x-amz-copy-source-if-none-match'
          },
          CopySourceIfUnmodifiedSince: {
            type: 'timestamp',
            location: 'header',
            name: 'x-amz-copy-source-if-unmodified-since'
          },
          Expires: {
            type: 'timestamp',
            location: 'header',
            name: 'Expires'
          },
          GrantFullControl: {
            location: 'header',
            name: 'x-amz-grant-full-control'
          },
          GrantRead: {
            location: 'header',
            name: 'x-amz-grant-read'
          },
          GrantReadACP: {
            location: 'header',
            name: 'x-amz-grant-read-acp'
          },
          GrantWriteACP: {
            location: 'header',
            name: 'x-amz-grant-write-acp'
          },
          Key: {
            required: true,
            location: 'uri'
          },
          Metadata: {
            type: 'map',
            location: 'header',
            name: 'x-amz-meta-'
          },
          MetadataDirective: {
            location: 'header',
            name: 'x-amz-metadata-directive'
          },
          ServerSideEncryption: {
            location: 'header',
            name: 'x-amz-server-side-encryption'
          },
          StorageClass: {
            location: 'header',
            name: 'x-amz-storage-class'
          },
          WebsiteRedirectLocation: {
            location: 'header',
            name: 'x-amz-website-redirect-location'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Expiration: {
            location: 'header',
            name: 'x-amz-expiration'
          },
          CopySourceVersionId: {
            location: 'header',
            name: 'x-amz-copy-source-version-id'
          },
          ServerSideEncryption: {
            location: 'header',
            name: 'x-amz-server-side-encryption'
          },
          ETag: {
          },
          LastModified: {
          }
        }
      }
    },
    createBucket: {
      name: 'CreateBucket',
      alias: 'PutBucket',
      http: {
        method: 'PUT',
        uri: '/{Bucket}'
      },
      input: {
        xml: 'CreateBucketConfiguration',
        type: 'structure',
        members: {
          ACL: {
            location: 'header',
            name: 'x-amz-acl'
          },
          Bucket: {
            required: true,
            location: 'uri'
          },
          CreateBucketConfiguration: {
            type: 'structure',
            members: {
              LocationConstraint: {
              }
            }
          },
          GrantFullControl: {
            location: 'header',
            name: 'x-amz-grant-full-control'
          },
          GrantRead: {
            location: 'header',
            name: 'x-amz-grant-read'
          },
          GrantReadACP: {
            location: 'header',
            name: 'x-amz-grant-read-acp'
          },
          GrantWrite: {
            location: 'header',
            name: 'x-amz-grant-write'
          },
          GrantWriteACP: {
            location: 'header',
            name: 'x-amz-grant-write-acp'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Location: {
            location: 'header',
            name: 'Location'
          }
        }
      }
    },
    createMultipartUpload: {
      name: 'CreateMultipartUpload',
      alias: 'InitiateMultipartUpload',
      http: {
        method: 'POST',
        uri: '/{Bucket}/{Key}?uploads'
      },
      input: {
        type: 'structure',
        members: {
          ACL: {
            location: 'header',
            name: 'x-amz-acl'
          },
          Bucket: {
            required: true,
            location: 'uri'
          },
          CacheControl: {
            location: 'header',
            name: 'Cache-Control'
          },
          ContentDisposition: {
            location: 'header',
            name: 'Content-Disposition'
          },
          ContentEncoding: {
            location: 'header',
            name: 'Content-Encoding'
          },
          ContentLanguage: {
            location: 'header',
            name: 'Content-Language'
          },
          ContentType: {
            location: 'header',
            name: 'Content-Type'
          },
          Expires: {
            type: 'timestamp',
            location: 'header',
            name: 'Expires'
          },
          GrantFullControl: {
            location: 'header',
            name: 'x-amz-grant-full-control'
          },
          GrantRead: {
            location: 'header',
            name: 'x-amz-grant-read'
          },
          GrantReadACP: {
            location: 'header',
            name: 'x-amz-grant-read-acp'
          },
          GrantWriteACP: {
            location: 'header',
            name: 'x-amz-grant-write-acp'
          },
          Key: {
            required: true,
            location: 'uri'
          },
          Metadata: {
            type: 'map',
            location: 'header',
            name: 'x-amz-meta-'
          },
          ServerSideEncryption: {
            location: 'header',
            name: 'x-amz-server-side-encryption'
          },
          StorageClass: {
            location: 'header',
            name: 'x-amz-storage-class'
          },
          WebsiteRedirectLocation: {
            location: 'header',
            name: 'x-amz-website-redirect-location'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Bucket: {
            name: 'Bucket'
          },
          Key: {
          },
          UploadId: {
          },
          ServerSideEncryption: {
            location: 'header',
            name: 'x-amz-server-side-encryption'
          }
        }
      }
    },
    deleteBucket: {
      name: 'DeleteBucket',
      http: {
        method: 'DELETE',
        uri: '/{Bucket}'
      },
      input: {
        type: 'structure',
        members: {
          Bucket: {
            required: true,
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteBucketCors: {
      name: 'DeleteBucketCors',
      http: {
        method: 'DELETE',
        uri: '/{Bucket}?cors'
      },
      input: {
        type: 'structure',
        members: {
          Bucket: {
            required: true,
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteBucketLifecycle: {
      name: 'DeleteBucketLifecycle',
      http: {
        method: 'DELETE',
        uri: '/{Bucket}?lifecycle'
      },
      input: {
        type: 'structure',
        members: {
          Bucket: {
            required: true,
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteBucketPolicy: {
      name: 'DeleteBucketPolicy',
      http: {
        method: 'DELETE',
        uri: '/{Bucket}?policy'
      },
      input: {
        type: 'structure',
        members: {
          Bucket: {
            required: true,
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteBucketTagging: {
      name: 'DeleteBucketTagging',
      http: {
        method: 'DELETE',
        uri: '/{Bucket}?tagging'
      },
      input: {
        type: 'structure',
        members: {
          Bucket: {
            required: true,
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteBucketWebsite: {
      name: 'DeleteBucketWebsite',
      http: {
        method: 'DELETE',
        uri: '/{Bucket}?website'
      },
      input: {
        type: 'structure',
        members: {
          Bucket: {
            required: true,
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteObject: {
      name: 'DeleteObject',
      http: {
        method: 'DELETE',
        uri: '/{Bucket}/{Key}'
      },
      input: {
        type: 'structure',
        members: {
          Bucket: {
            required: true,
            location: 'uri'
          },
          Key: {
            required: true,
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          DeleteMarker: {
            location: 'header',
            name: 'x-amz-delete-marker'
          },
          VersionId: {
            location: 'header',
            name: 'x-amz-version-id'
          }
        }
      }
    },
    deleteObjects: {
      name: 'DeleteObjects',
      alias: 'DeleteMultipleObjects',
      http: {
        method: 'POST',
        uri: '/{Bucket}?delete'
      },
      input: {
        xml: 'Delete',
        type: 'structure',
        members: {
          Bucket: {
            required: true,
            location: 'uri'
          },
          Delete: {
            type: 'structure',
            required: true,
            members: {
              Objects: {
                type: 'list',
                flattened: true,
                name: 'Object',
                required: true,
                members: {
                  type: 'structure',
                  members: {
                    Key: {
                      required: true
                    },
                    VersionId: {
                    }
                  }
                }
              },
              Quiet: {
                type: 'boolean'
              }
            }
          },
          MFA: {
            location: 'header',
            name: 'x-amz-mfa'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Deleted: {
            type: 'list',
            flattened: true,
            members: {
              type: 'structure',
              members: {
                Key: {
                },
                VersionId: {
                },
                DeleteMarker: {
                  type: 'boolean'
                },
                DeleteMarkerVersionId: {
                }
              }
            }
          },
          Error: {
            type: 'list',
            flattened: true,
            name: 'Errors',
            members: {
              type: 'structure',
              members: {
                Key: {
                },
                VersionId: {
                },
                Code: {
                },
                Message: {
                }
              }
            }
          }
        }
      }
    },
    getBucketAcl: {
      name: 'GetBucketAcl',
      http: {
        method: 'GET',
        uri: '/{Bucket}?acl'
      },
      input: {
        type: 'structure',
        members: {
          Bucket: {
            required: true,
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Owner: {
            type: 'structure',
            members: {
              ID: {
              },
              DisplayName: {
              }
            }
          },
          AccessControlList: {
            type: 'list',
            name: 'Grants',
            members: {
              type: 'structure',
              name: 'Grant',
              members: {
                Grantee: {
                  type: 'structure',
                  xmlns: {
                    prefix: 'xsi',
                    uri: 'http://www.w3.org/2001/XMLSchema-instance'
                  },
                  members: {
                    'xsi:type': {
                      attribute: true,
                      name: 'Type'
                    },
                    ID: {
                    },
                    DisplayName: {
                    },
                    EmailAddress: {
                    },
                    URI: {
                    }
                  }
                },
                Permission: {
                }
              }
            }
          }
        }
      }
    },
    getBucketCors: {
      name: 'GetBucketCors',
      http: {
        method: 'GET',
        uri: '/{Bucket}?cors'
      },
      input: {
        type: 'structure',
        members: {
          Bucket: {
            required: true,
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          CORSRule: {
            type: 'list',
            flattened: true,
            name: 'CORSRules',
            members: {
              type: 'structure',
              members: {
                AllowedOrigin: {
                  type: 'list',
                  flattened: true,
                  name: 'AllowedOrigins'
                },
                AllowedMethod: {
                  type: 'list',
                  flattened: true,
                  name: 'AllowedMethods'
                },
                MaxAgeSeconds: {
                  type: 'integer'
                },
                ExposeHeader: {
                  type: 'list',
                  flattened: true,
                  name: 'ExposeHeaders'
                }
              }
            }
          }
        }
      }
    },
    getBucketLifecycle: {
      name: 'GetBucketLifecycle',
      http: {
        method: 'GET',
        uri: '/{Bucket}?lifecycle'
      },
      input: {
        type: 'structure',
        members: {
          Bucket: {
            required: true,
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Rule: {
            type: 'list',
            flattened: true,
            name: 'Rules',
            members: {
              type: 'structure',
              members: {
                ID: {
                },
                Prefix: {
                },
                Status: {
                },
                Transition: {
                  type: 'structure',
                  members: {
                    Days: {
                      type: 'integer'
                    },
                    Date: {
                      type: 'timestamp',
                      format: 'iso8601'
                    },
                    StorageClass: {
                    }
                  }
                },
                Expiration: {
                  type: 'structure',
                  members: {
                    Days: {
                      type: 'integer'
                    },
                    Date: {
                      type: 'timestamp',
                      format: 'iso8601'
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    getBucketLocation: {
      name: 'GetBucketLocation',
      http: {
        method: 'GET',
        uri: '/{Bucket}?location'
      },
      input: {
        type: 'structure',
        members: {
          Bucket: {
            required: true,
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          LocationConstraint: {
          }
        }
      }
    },
    getBucketLogging: {
      name: 'GetBucketLogging',
      http: {
        method: 'GET',
        uri: '/{Bucket}?logging'
      },
      input: {
        type: 'structure',
        members: {
          Bucket: {
            required: true,
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          LoggingEnabled: {
            type: 'structure',
            members: {
              TargetBucket: {
              },
              TargetPrefix: {
              },
              TargetGrants: {
                type: 'list',
                members: {
                  type: 'structure',
                  name: 'Grant',
                  members: {
                    Grantee: {
                      type: 'structure',
                      xmlns: {
                        prefix: 'xsi',
                        uri: 'http://www.w3.org/2001/XMLSchema-instance'
                      },
                      members: {
                        'xsi:type': {
                          attribute: true,
                          name: 'Type'
                        },
                        ID: {
                        },
                        DisplayName: {
                        },
                        EmailAddress: {
                        },
                        URI: {
                        }
                      }
                    },
                    Permission: {
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    getBucketNotification: {
      name: 'GetBucketNotification',
      http: {
        method: 'GET',
        uri: '/{Bucket}?notification'
      },
      input: {
        type: 'structure',
        members: {
          Bucket: {
            required: true,
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          TopicConfiguration: {
            type: 'structure',
            members: {
              Topic: {
              },
              Event: {
              }
            }
          }
        }
      }
    },
    getBucketPolicy: {
      name: 'GetBucketPolicy',
      http: {
        method: 'GET',
        uri: '/{Bucket}?policy'
      },
      input: {
        type: 'structure',
        members: {
          Bucket: {
            required: true,
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Policy: {
            location: 'body'
          }
        },
        payload: 'Policy'
      }
    },
    getBucketRequestPayment: {
      name: 'GetBucketRequestPayment',
      http: {
        method: 'GET',
        uri: '/{Bucket}?requestPayment'
      },
      input: {
        type: 'structure',
        members: {
          Bucket: {
            required: true,
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Payer: {
          }
        }
      }
    },
    getBucketTagging: {
      name: 'GetBucketTagging',
      http: {
        method: 'GET',
        uri: '/{Bucket}?tagging'
      },
      input: {
        type: 'structure',
        members: {
          Bucket: {
            required: true,
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          TagSet: {
            type: 'list',
            members: {
              type: 'structure',
              name: 'Tag',
              members: {
                Key: {
                },
                Value: {
                }
              }
            }
          }
        }
      }
    },
    getBucketVersioning: {
      name: 'GetBucketVersioning',
      http: {
        method: 'GET',
        uri: '/{Bucket}?versioning'
      },
      input: {
        type: 'structure',
        members: {
          Bucket: {
            required: true,
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Status: {
          },
          MFADelete: {
          }
        }
      }
    },
    getBucketWebsite: {
      name: 'GetBucketWebsite',
      http: {
        method: 'GET',
        uri: '/{Bucket}?website'
      },
      input: {
        type: 'structure',
        members: {
          Bucket: {
            required: true,
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          RedirectAllRequestsTo: {
            type: 'structure',
            members: {
              HostName: {
              },
              Protocol: {
              }
            }
          },
          IndexDocument: {
            type: 'structure',
            members: {
              Suffix: {
              }
            }
          },
          ErrorDocument: {
            type: 'structure',
            members: {
              Key: {
              }
            }
          },
          RoutingRules: {
            type: 'list',
            members: {
              type: 'structure',
              name: 'RoutingRule',
              members: {
                Condition: {
                  type: 'structure',
                  members: {
                    KeyPrefixEquals: {
                    },
                    HttpErrorCodeReturnedEquals: {
                    }
                  }
                },
                Redirect: {
                  type: 'structure',
                  members: {
                    ReplaceKeyPrefixWith: {
                    },
                    ReplaceKeyWith: {
                    },
                    HttpRedirectCode: {
                    },
                    HostName: {
                    },
                    Protocol: {
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    getObject: {
      name: 'GetObject',
      http: {
        method: 'GET',
        uri: '/{Bucket}/{Key}?versionId={VersionId}&response-content-type={ResponseContentType}&response-content-language={ResponseContentLanguage}&response-expires={ResponseExpires}&response-cache-control={ResponseCacheControl}&response-content-disposition={ResponseContentDisposition}&response-content-encoding={ResponseContentEncoding}'
      },
      input: {
        type: 'structure',
        members: {
          Bucket: {
            required: true,
            location: 'uri'
          },
          IfMatch: {
            location: 'header',
            name: 'If-Match'
          },
          IfModifiedSince: {
            type: 'timestamp',
            location: 'header',
            name: 'If-Modified-Since'
          },
          IfNoneMatch: {
            location: 'header',
            name: 'If-None-Match'
          },
          IfUnmodifiedSince: {
            type: 'timestamp',
            location: 'header',
            name: 'If-Unmodified-Since'
          },
          Key: {
            required: true,
            location: 'uri'
          },
          Range: {
            location: 'header'
          },
          ResponseCacheControl: {
            location: 'uri'
          },
          ResponseContentDisposition: {
            location: 'uri'
          },
          ResponseContentEncoding: {
            location: 'uri'
          },
          ResponseContentLanguage: {
            location: 'uri'
          },
          ResponseContentType: {
            location: 'uri'
          },
          ResponseExpires: {
            type: 'timestamp',
            location: 'uri'
          },
          VersionId: {
            location: 'uri',
            name: 'versionId'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Body: {
            type: 'binary',
            location: 'body',
            streaming: true
          },
          DeleteMarker: {
            location: 'header',
            name: 'x-amz-delete-marker'
          },
          AcceptRanges: {
            location: 'header',
            name: 'accept-ranges'
          },
          Expiration: {
            location: 'header',
            name: 'x-amz-expiration'
          },
          Restore: {
            location: 'header',
            name: 'x-amz-restore'
          },
          LastModified: {
            type: 'timestamp',
            location: 'header',
            name: 'Last-Modified'
          },
          ContentLength: {
            type: 'integer',
            location: 'header',
            name: 'Content-Length'
          },
          ETag: {
            location: 'header'
          },
          MissingMeta: {
            type: 'integer',
            location: 'header',
            name: 'x-amz-missing-meta'
          },
          VersionId: {
            location: 'header',
            name: 'x-amz-version-id'
          },
          CacheControl: {
            location: 'header',
            name: 'Cache-Control'
          },
          ContentDisposition: {
            location: 'header',
            name: 'Content-Disposition'
          },
          ContentEncoding: {
            location: 'header',
            name: 'Content-Encoding'
          },
          ContentLanguage: {
            location: 'header',
            name: 'Content-Language'
          },
          ContentType: {
            location: 'header',
            name: 'Content-Type'
          },
          Expires: {
            type: 'timestamp',
            location: 'header',
            name: 'Expires'
          },
          WebsiteRedirectLocation: {
            location: 'header',
            name: 'x-amz-website-redirect-location'
          },
          ServerSideEncryption: {
            location: 'header',
            name: 'x-amz-server-side-encryption'
          },
          Metadata: {
            type: 'map',
            location: 'header',
            name: 'x-amz-meta-'
          }
        },
        payload: 'Body'
      }
    },
    getObjectAcl: {
      name: 'GetObjectAcl',
      http: {
        method: 'GET',
        uri: '/{Bucket}/{Key}?acl&versionId={VersionId}'
      },
      input: {
        type: 'structure',
        members: {
          Bucket: {
            required: true,
            location: 'uri'
          },
          Key: {
            required: true,
            location: 'uri'
          },
          VersionId: {
            location: 'uri',
            name: 'versionId'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Owner: {
            type: 'structure',
            members: {
              ID: {
              },
              DisplayName: {
              }
            }
          },
          AccessControlList: {
            type: 'list',
            name: 'Grants',
            members: {
              type: 'structure',
              name: 'Grant',
              members: {
                Grantee: {
                  type: 'structure',
                  xmlns: {
                    prefix: 'xsi',
                    uri: 'http://www.w3.org/2001/XMLSchema-instance'
                  },
                  members: {
                    'xsi:type': {
                      attribute: true,
                      name: 'Type'
                    },
                    ID: {
                    },
                    DisplayName: {
                    },
                    EmailAddress: {
                    },
                    URI: {
                    }
                  }
                },
                Permission: {
                }
              }
            }
          }
        }
      }
    },
    getObjectTorrent: {
      name: 'GetObjectTorrent',
      http: {
        method: 'GET',
        uri: '/{Bucket}/{Key}?torrent'
      },
      input: {
        type: 'structure',
        members: {
          Bucket: {
            required: true,
            location: 'uri'
          },
          Key: {
            required: true,
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Body: {
            type: 'binary',
            location: 'body',
            streaming: true
          }
        },
        payload: 'Body'
      }
    },
    headBucket: {
      name: 'HeadBucket',
      http: {
        method: 'HEAD',
        uri: '/{Bucket}'
      },
      input: {
        type: 'structure',
        members: {
          Bucket: {
            required: true,
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    headObject: {
      name: 'HeadObject',
      http: {
        method: 'HEAD',
        uri: '/{Bucket}/{Key}?versionId={VersionId}'
      },
      input: {
        type: 'structure',
        members: {
          Bucket: {
            required: true,
            location: 'uri'
          },
          IfMatch: {
            location: 'header',
            name: 'If-Match'
          },
          IfModifiedSince: {
            type: 'timestamp',
            location: 'header',
            name: 'If-Modified-Since'
          },
          IfNoneMatch: {
            location: 'header',
            name: 'If-None-Match'
          },
          IfUnmodifiedSince: {
            type: 'timestamp',
            location: 'header',
            name: 'If-Unmodified-Since'
          },
          Key: {
            required: true,
            location: 'uri'
          },
          Range: {
            location: 'header'
          },
          VersionId: {
            location: 'uri',
            name: 'versionId'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          DeleteMarker: {
            location: 'header',
            name: 'x-amz-delete-marker'
          },
          AcceptRanges: {
            location: 'header',
            name: 'accept-ranges'
          },
          Expiration: {
            location: 'header',
            name: 'x-amz-expiration'
          },
          Restore: {
            location: 'header',
            name: 'x-amz-restore'
          },
          LastModified: {
            type: 'timestamp',
            location: 'header',
            name: 'Last-Modified'
          },
          ContentLength: {
            type: 'integer',
            location: 'header',
            name: 'Content-Length'
          },
          ETag: {
            location: 'header'
          },
          MissingMeta: {
            type: 'integer',
            location: 'header',
            name: 'x-amz-missing-meta'
          },
          VersionId: {
            location: 'header',
            name: 'x-amz-version-id'
          },
          CacheControl: {
            location: 'header',
            name: 'Cache-Control'
          },
          ContentDisposition: {
            location: 'header',
            name: 'Content-Disposition'
          },
          ContentEncoding: {
            location: 'header',
            name: 'Content-Encoding'
          },
          ContentLanguage: {
            location: 'header',
            name: 'Content-Language'
          },
          ContentType: {
            location: 'header',
            name: 'Content-Type'
          },
          Expires: {
            type: 'timestamp',
            location: 'header',
            name: 'Expires'
          },
          WebsiteRedirectLocation: {
            location: 'header',
            name: 'x-amz-website-redirect-location'
          },
          ServerSideEncryption: {
            location: 'header',
            name: 'x-amz-server-side-encryption'
          },
          Metadata: {
            type: 'map',
            location: 'header',
            name: 'x-amz-meta-'
          }
        }
      }
    },
    listBuckets: {
      name: 'ListBuckets',
      alias: 'GetService',
      http: {
        method: 'GET',
        uri: '/'
      },
      input: {
        type: 'structure',
        members: {
        }
      },
      output: {
        type: 'structure',
        members: {
          Buckets: {
            type: 'list',
            members: {
              type: 'structure',
              name: 'Bucket',
              members: {
                Name: {
                },
                CreationDate: {
                  type: 'timestamp'
                }
              }
            }
          },
          Owner: {
            type: 'structure',
            members: {
              ID: {
              },
              DisplayName: {
              }
            }
          }
        }
      }
    },
    listMultipartUploads: {
      name: 'ListMultipartUploads',
      http: {
        method: 'GET',
        uri: '/{Bucket}?uploads&prefix={Prefix}&delimiter={Delimiter}&max-uploads={MaxUploads}&key-marker={KeyMarker}&upload-id-marker={UploadIdMarker}'
      },
      input: {
        type: 'structure',
        members: {
          Bucket: {
            required: true,
            location: 'uri'
          },
          Delimiter: {
            location: 'uri'
          },
          KeyMarker: {
            location: 'uri'
          },
          MaxUploads: {
            type: 'integer',
            location: 'uri'
          },
          Prefix: {
            location: 'uri'
          },
          UploadIdMarker: {
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Bucket: {
          },
          KeyMarker: {
          },
          UploadIdMarker: {
          },
          NextKeyMarker: {
          },
          NextUploadIdMarker: {
          },
          MaxUploads: {
            type: 'integer'
          },
          IsTruncated: {
            type: 'boolean'
          },
          Upload: {
            type: 'list',
            flattened: true,
            name: 'Uploads',
            members: {
              type: 'structure',
              members: {
                UploadId: {
                },
                Key: {
                },
                Initiated: {
                  type: 'timestamp'
                },
                StorageClass: {
                },
                Owner: {
                  type: 'structure',
                  members: {
                    ID: {
                    },
                    DisplayName: {
                    }
                  }
                },
                Initiator: {
                  type: 'structure',
                  members: {
                    ID: {
                    },
                    DisplayName: {
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    listObjectVersions: {
      name: 'ListObjectVersions',
      alias: 'GetBucketObjectVersions',
      http: {
        method: 'GET',
        uri: '/{Bucket}?versions&delimiter={Delimiter}&key-marker={KeyMarker}&max-keys={MaxKeys}&prefix={Prefix}&version-id-marker={VersionIdMarker}'
      },
      input: {
        type: 'structure',
        members: {
          Bucket: {
            required: true,
            location: 'uri'
          },
          Delimiter: {
            location: 'uri'
          },
          KeyMarker: {
            location: 'uri'
          },
          MaxKeys: {
            type: 'integer',
            location: 'uri'
          },
          Prefix: {
            location: 'uri'
          },
          VersionIdMarker: {
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          IsTruncated: {
            type: 'boolean'
          },
          KeyMarker: {
          },
          VersionIdMarker: {
          },
          NextKeyMarker: {
          },
          NextVersionIdMarker: {
          },
          Version: {
            type: 'list',
            flattened: true,
            name: 'Versions',
            members: {
              type: 'structure',
              members: {
                ETag: {
                },
                Size: {
                },
                StorageClass: {
                },
                Key: {
                },
                VersionId: {
                },
                IsLatest: {
                  type: 'boolean'
                },
                LastModified: {
                  type: 'timestamp'
                },
                Owner: {
                  type: 'structure',
                  members: {
                    ID: {
                    },
                    DisplayName: {
                    }
                  }
                }
              }
            }
          },
          DeleteMarker: {
            type: 'list',
            flattened: true,
            name: 'DeleteMarkers',
            members: {
              type: 'structure',
              members: {
                Owner: {
                  type: 'structure',
                  members: {
                    ID: {
                    },
                    DisplayName: {
                    }
                  }
                },
                Key: {
                },
                VersionId: {
                },
                IsLatest: {
                  type: 'boolean'
                },
                LastModified: {
                  type: 'timestamp'
                }
              }
            }
          },
          Name: {
          },
          Prefix: {
          },
          MaxKeys: {
            type: 'integer'
          },
          CommonPrefixes: {
            type: 'list',
            flattened: true,
            members: {
              type: 'structure',
              members: {
                Prefix: {
                }
              }
            }
          }
        }
      }
    },
    listObjects: {
      name: 'ListObjects',
      alias: 'GetBucket',
      http: {
        method: 'GET',
        uri: '/{Bucket}?delimiter={Delimiter}&marker={Marker}&max-keys={MaxKeys}&prefix={Prefix}'
      },
      input: {
        type: 'structure',
        members: {
          Bucket: {
            required: true,
            location: 'uri'
          },
          Delimiter: {
            location: 'uri'
          },
          Marker: {
            location: 'uri'
          },
          MaxKeys: {
            type: 'integer',
            location: 'uri'
          },
          Prefix: {
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          IsTruncated: {
            type: 'boolean'
          },
          Marker: {
          },
          Contents: {
            type: 'list',
            flattened: true,
            members: {
              type: 'structure',
              members: {
                Key: {
                },
                LastModified: {
                  type: 'timestamp'
                },
                ETag: {
                },
                Size: {
                  type: 'integer'
                },
                StorageClass: {
                },
                Owner: {
                  type: 'structure',
                  members: {
                    ID: {
                    },
                    DisplayName: {
                    }
                  }
                }
              }
            }
          },
          Name: {
          },
          Prefix: {
          },
          MaxKeys: {
            type: 'integer'
          },
          CommonPrefixes: {
            type: 'list',
            flattened: true,
            members: {
              type: 'structure',
              members: {
                Prefix: {
                }
              }
            }
          }
        }
      }
    },
    listParts: {
      name: 'ListParts',
      http: {
        method: 'GET',
        uri: '/{Bucket}/{Key}?uploadId={UploadId}&max-parts={MaxParts}&part-number-marker={PartNumberMarker}'
      },
      input: {
        type: 'structure',
        members: {
          Bucket: {
            required: true,
            location: 'uri'
          },
          Key: {
            required: true,
            location: 'uri'
          },
          MaxParts: {
            type: 'integer',
            location: 'uri'
          },
          PartNumberMarker: {
            location: 'uri'
          },
          UploadId: {
            required: true,
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Bucket: {
          },
          Key: {
          },
          UploadId: {
          },
          PartNumberMarker: {
            type: 'integer'
          },
          NextPartNumberMarker: {
            type: 'integer'
          },
          MaxParts: {
            type: 'integer'
          },
          IsTruncated: {
            type: 'boolean'
          },
          Part: {
            type: 'list',
            flattened: true,
            name: 'Parts',
            members: {
              type: 'structure',
              members: {
                PartNumber: {
                  type: 'integer'
                },
                LastModified: {
                  type: 'timestamp'
                },
                ETag: {
                },
                Size: {
                  type: 'integer'
                }
              }
            }
          },
          Initiator: {
            type: 'structure',
            members: {
              ID: {
              },
              DisplayName: {
              }
            }
          },
          Owner: {
            type: 'structure',
            members: {
              ID: {
              },
              DisplayName: {
              }
            }
          },
          StorageClass: {
          }
        }
      }
    },
    putBucketAcl: {
      name: 'PutBucketAcl',
      http: {
        method: 'PUT',
        uri: '/{Bucket}?acl'
      },
      input: {
        xml: 'AccessControlPolicy',
        type: 'structure',
        members: {
          ACL: {
            location: 'header',
            name: 'x-amz-acl'
          },
          AccessControlPolicy: {
            type: 'structure',
            members: {
              Grants: {
                type: 'list',
                name: 'AccessControlList',
                members: {
                  type: 'structure',
                  name: 'Grant',
                  members: {
                    Grantee: {
                      type: 'structure',
                      xmlns: {
                        prefix: 'xsi',
                        uri: 'http://www.w3.org/2001/XMLSchema-instance'
                      },
                      members: {
                        DisplayName: {
                        },
                        EmailAddress: {
                        },
                        ID: {
                        },
                        Type: {
                          required: true,
                          attribute: true,
                          name: 'xsi:type'
                        },
                        URI: {
                        }
                      }
                    },
                    Permission: {
                    }
                  }
                }
              },
              Owner: {
                type: 'structure',
                members: {
                  DisplayName: {
                  },
                  ID: {
                  }
                }
              }
            }
          },
          Bucket: {
            required: true,
            location: 'uri'
          },
          ContentMD5: {
            location: 'header',
            name: 'Content-MD5'
          },
          GrantFullControl: {
            location: 'header',
            name: 'x-amz-grant-full-control'
          },
          GrantRead: {
            location: 'header',
            name: 'x-amz-grant-read'
          },
          GrantReadACP: {
            location: 'header',
            name: 'x-amz-grant-read-acp'
          },
          GrantWrite: {
            location: 'header',
            name: 'x-amz-grant-write'
          },
          GrantWriteACP: {
            location: 'header',
            name: 'x-amz-grant-write-acp'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    putBucketCors: {
      name: 'PutBucketCors',
      http: {
        method: 'PUT',
        uri: '/{Bucket}?cors'
      },
      input: {
        xml: 'CORSConfiguration',
        type: 'structure',
        members: {
          Bucket: {
            required: true,
            location: 'uri'
          },
          CORSConfiguration: {
            type: 'structure',
            members: {
              CORSRules: {
                type: 'list',
                flattened: true,
                name: 'CORSRule',
                members: {
                  type: 'structure',
                  members: {
                    AllowedMethods: {
                      type: 'list',
                      flattened: true,
                      name: 'AllowedMethod'
                    },
                    AllowedOrigins: {
                      type: 'list',
                      flattened: true,
                      name: 'AllowedOrigin'
                    },
                    ExposeHeaders: {
                      type: 'list',
                      flattened: true,
                      name: 'ExposeHeader'
                    },
                    MaxAgeSeconds: {
                      type: 'integer'
                    }
                  }
                }
              }
            }
          },
          ContentMD5: {
            location: 'header',
            name: 'Content-MD5'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    putBucketLifecycle: {
      name: 'PutBucketLifecycle',
      http: {
        method: 'PUT',
        uri: '/{Bucket}?lifecycle'
      },
      input: {
        xml: 'LifecycleConfiguration',
        type: 'structure',
        members: {
          Bucket: {
            required: true,
            location: 'uri'
          },
          ContentMD5: {
            location: 'header',
            name: 'Content-MD5'
          },
          LifecycleConfiguration: {
            type: 'structure',
            members: {
              Rules: {
                type: 'list',
                flattened: true,
                name: 'Rule',
                required: true,
                members: {
                  type: 'structure',
                  members: {
                    Expiration: {
                      type: 'structure',
                      members: {
                        Date: {
                          type: 'timestamp',
                          format: 'iso8601'
                        },
                        Days: {
                          type: 'integer',
                          required: true
                        }
                      }
                    },
                    ID: {
                    },
                    Prefix: {
                      required: true
                    },
                    Status: {
                      required: true
                    },
                    Transition: {
                      type: 'structure',
                      members: {
                        Date: {
                          type: 'timestamp',
                          format: 'iso8601'
                        },
                        Days: {
                          type: 'integer'
                        },
                        StorageClass: {
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    putBucketLogging: {
      name: 'PutBucketLogging',
      http: {
        method: 'PUT',
        uri: '/{Bucket}?logging'
      },
      input: {
        xml: 'BucketLoggingStatus',
        type: 'structure',
        members: {
          Bucket: {
            required: true,
            location: 'uri'
          },
          BucketLoggingStatus: {
            type: 'structure',
            required: true,
            members: {
              LoggingEnabled: {
                type: 'structure',
                required: true,
                members: {
                  TargetBucket: {
                  },
                  TargetGrants: {
                    type: 'list',
                    members: {
                      type: 'structure',
                      name: 'Grant',
                      members: {
                        Grantee: {
                          type: 'structure',
                          xmlns: {
                            prefix: 'xsi',
                            uri: 'http://www.w3.org/2001/XMLSchema-instance'
                          },
                          members: {
                            DisplayName: {
                            },
                            EmailAddress: {
                            },
                            ID: {
                            },
                            Type: {
                              required: true,
                              attribute: true,
                              name: 'xsi:type'
                            },
                            URI: {
                            }
                          }
                        },
                        Permission: {
                        }
                      }
                    }
                  },
                  TargetPrefix: {
                  }
                }
              }
            }
          },
          ContentMD5: {
            location: 'header',
            name: 'Content-MD5'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    putBucketNotification: {
      name: 'PutBucketNotification',
      http: {
        method: 'PUT',
        uri: '/{Bucket}?notification'
      },
      input: {
        xml: 'NotificationConfiguration',
        type: 'structure',
        members: {
          Bucket: {
            required: true,
            location: 'uri'
          },
          ContentMD5: {
            location: 'header',
            name: 'Content-MD5'
          },
          NotificationConfiguration: {
            type: 'structure',
            required: true,
            members: {
              TopicConfiguration: {
                type: 'structure',
                required: true,
                members: {
                  Event: {
                  },
                  Topic: {
                  }
                }
              }
            }
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    putBucketPolicy: {
      name: 'PutBucketPolicy',
      http: {
        method: 'PUT',
        uri: '/{Bucket}?policy'
      },
      input: {
        type: 'structure',
        members: {
          Bucket: {
            required: true,
            location: 'uri'
          },
          ContentMD5: {
            location: 'header',
            name: 'Content-MD5'
          },
          Policy: {
            required: true,
            location: 'body'
          }
        },
        payload: 'Policy'
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    putBucketRequestPayment: {
      name: 'PutBucketRequestPayment',
      http: {
        method: 'PUT',
        uri: '/{Bucket}?requestPayment'
      },
      input: {
        xml: 'RequestPaymentConfiguration',
        type: 'structure',
        members: {
          Bucket: {
            required: true,
            location: 'uri'
          },
          ContentMD5: {
            location: 'header',
            name: 'Content-MD5'
          },
          RequestPaymentConfiguration: {
            type: 'structure',
            required: true,
            members: {
              Payer: {
                required: true
              }
            }
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    putBucketTagging: {
      name: 'PutBucketTagging',
      http: {
        method: 'PUT',
        uri: '/{Bucket}?tagging'
      },
      input: {
        xml: 'Tagging',
        type: 'structure',
        members: {
          Bucket: {
            required: true,
            location: 'uri'
          },
          ContentMD5: {
            location: 'header',
            name: 'Content-MD5'
          },
          Tagging: {
            type: 'structure',
            required: true,
            members: {
              TagSet: {
                type: 'list',
                required: true,
                members: {
                  type: 'structure',
                  name: 'Tag',
                  required: true,
                  members: {
                    Key: {
                      required: true
                    },
                    Value: {
                      required: true
                    }
                  }
                }
              }
            }
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    putBucketVersioning: {
      name: 'PutBucketVersioning',
      http: {
        method: 'PUT',
        uri: '/{Bucket}?versioning'
      },
      input: {
        xml: 'VersioningConfiguration',
        type: 'structure',
        members: {
          Bucket: {
            required: true,
            location: 'uri'
          },
          ContentMD5: {
            location: 'header',
            name: 'Content-MD5'
          },
          MFA: {
            location: 'header',
            name: 'x-amz-mfa'
          },
          VersioningConfiguration: {
            type: 'structure',
            required: true,
            members: {
              MFADelete: {
              },
              Status: {
              }
            }
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    putBucketWebsite: {
      name: 'PutBucketWebsite',
      http: {
        method: 'PUT',
        uri: '/{Bucket}?website'
      },
      input: {
        xml: 'WebsiteConfiguration',
        type: 'structure',
        members: {
          Bucket: {
            required: true,
            location: 'uri'
          },
          ContentMD5: {
            location: 'header',
            name: 'Content-MD5'
          },
          WebsiteConfiguration: {
            type: 'structure',
            required: true,
            members: {
              ErrorDocument: {
                type: 'structure',
                members: {
                  Key: {
                    required: true
                  }
                }
              },
              IndexDocument: {
                type: 'structure',
                members: {
                  Suffix: {
                    required: true
                  }
                }
              },
              RedirectAllRequestsTo: {
                type: 'structure',
                members: {
                  HostName: {
                    required: true
                  },
                  Protocol: {
                  }
                }
              },
              RoutingRules: {
                type: 'list',
                members: {
                  type: 'structure',
                  name: 'RoutingRule',
                  members: {
                    Condition: {
                      type: 'structure',
                      members: {
                        HttpErrorCodeReturnedEquals: {
                        },
                        KeyPrefixEquals: {
                        }
                      }
                    },
                    Redirect: {
                      type: 'structure',
                      required: true,
                      members: {
                        HostName: {
                          required: true
                        },
                        HttpRedirectCode: {
                        },
                        Protocol: {
                        },
                        ReplaceKeyPrefixWith: {
                        },
                        ReplaceKeyWith: {
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    putObject: {
      name: 'PutObject',
      http: {
        method: 'PUT',
        uri: '/{Bucket}/{Key}'
      },
      input: {
        type: 'structure',
        members: {
          ACL: {
            location: 'header',
            name: 'x-amz-acl'
          },
          Body: {
            type: 'binary',
            location: 'body',
            streaming: true
          },
          Bucket: {
            required: true,
            location: 'uri'
          },
          CacheControl: {
            location: 'header',
            name: 'Cache-Control'
          },
          ContentDisposition: {
            location: 'header',
            name: 'Content-Disposition'
          },
          ContentEncoding: {
            location: 'header',
            name: 'Content-Encoding'
          },
          ContentLanguage: {
            location: 'header',
            name: 'Content-Language'
          },
          ContentMD5: {
            location: 'header',
            name: 'Content-MD5'
          },
          ContentType: {
            location: 'header',
            name: 'Content-Type'
          },
          Expires: {
            type: 'timestamp',
            location: 'header',
            name: 'Expires'
          },
          GrantFullControl: {
            location: 'header',
            name: 'x-amz-grant-full-control'
          },
          GrantRead: {
            location: 'header',
            name: 'x-amz-grant-read'
          },
          GrantReadACP: {
            location: 'header',
            name: 'x-amz-grant-read-acp'
          },
          GrantWriteACP: {
            location: 'header',
            name: 'x-amz-grant-write-acp'
          },
          Key: {
            required: true,
            location: 'uri'
          },
          Metadata: {
            type: 'map',
            location: 'header',
            name: 'x-amz-meta-'
          },
          ServerSideEncryption: {
            location: 'header',
            name: 'x-amz-server-side-encryption'
          },
          StorageClass: {
            location: 'header',
            name: 'x-amz-storage-class'
          },
          WebsiteRedirectLocation: {
            location: 'header',
            name: 'x-amz-website-redirect-location'
          }
        },
        payload: 'Body'
      },
      output: {
        type: 'structure',
        members: {
          Expiration: {
            type: 'timestamp',
            location: 'header',
            name: 'x-amz-expiration'
          },
          ServerSideEncryption: {
            location: 'header',
            name: 'x-amz-server-side-encryption'
          },
          ETag: {
            location: 'header',
            name: 'ETag'
          },
          VersionId: {
            location: 'header',
            name: 'x-amz-version-id'
          }
        }
      }
    },
    putObjectAcl: {
      name: 'PutObjectAcl',
      http: {
        method: 'PUT',
        uri: '/{Bucket}/{Key}?acl'
      },
      input: {
        xml: 'AccessControlPolicy',
        type: 'structure',
        members: {
          ACL: {
            location: 'header',
            name: 'x-amz-acl'
          },
          AccessControlPolicy: {
            type: 'structure',
            members: {
              Grants: {
                type: 'list',
                name: 'AccessControlList',
                members: {
                  type: 'structure',
                  name: 'Grant',
                  members: {
                    Grantee: {
                      type: 'structure',
                      xmlns: {
                        prefix: 'xsi',
                        uri: 'http://www.w3.org/2001/XMLSchema-instance'
                      },
                      members: {
                        DisplayName: {
                        },
                        EmailAddress: {
                        },
                        ID: {
                        },
                        Type: {
                          required: true,
                          attribute: true,
                          name: 'xsi:type'
                        },
                        URI: {
                        }
                      }
                    },
                    Permission: {
                    }
                  }
                }
              },
              Owner: {
                type: 'structure',
                members: {
                  DisplayName: {
                  },
                  ID: {
                  }
                }
              }
            }
          },
          Bucket: {
            required: true,
            location: 'uri'
          },
          ContentMD5: {
            location: 'header',
            name: 'Content-MD5'
          },
          GrantFullControl: {
            location: 'header',
            name: 'x-amz-grant-full-control'
          },
          GrantRead: {
            location: 'header',
            name: 'x-amz-grant-read'
          },
          GrantReadACP: {
            location: 'header',
            name: 'x-amz-grant-read-acp'
          },
          GrantWrite: {
            location: 'header',
            name: 'x-amz-grant-write'
          },
          GrantWriteACP: {
            location: 'header',
            name: 'x-amz-grant-write-acp'
          },
          Key: {
            required: true,
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    restoreObject: {
      name: 'RestoreObject',
      alias: 'PostObjectRestore',
      http: {
        method: 'POST',
        uri: '/{Bucket}/{Key}?restore'
      },
      input: {
        xml: 'RestoreRequest',
        type: 'structure',
        members: {
          Bucket: {
            required: true,
            location: 'uri'
          },
          Key: {
            required: true,
            location: 'uri'
          },
          RestoreRequest: {
            type: 'structure',
            members: {
              Days: {
                type: 'integer',
                required: true
              }
            }
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    uploadPart: {
      name: 'UploadPart',
      http: {
        method: 'PUT',
        uri: '/{Bucket}/{Key}?partNumber={PartNumber}&uploadId={UploadId}'
      },
      input: {
        type: 'structure',
        members: {
          Body: {
            type: 'binary',
            location: 'body',
            streaming: true
          },
          Bucket: {
            required: true,
            location: 'uri'
          },
          Key: {
            required: true,
            location: 'uri'
          },
          PartNumber: {
            required: true,
            location: 'uri'
          },
          UploadId: {
            required: true,
            location: 'uri'
          }
        },
        payload: 'Body'
      },
      output: {
        type: 'structure',
        members: {
          ServerSideEncryption: {
            location: 'header',
            name: 'x-amz-server-side-encryption'
          },
          ETag: {
            location: 'header',
            name: 'ETag'
          }
        }
      }
    },
    uploadPartCopy: {
      name: 'UploadPartCopy',
      http: {
        method: 'PUT',
        uri: '/{Bucket}/{Key}?partNumber={PartNumber}&uploadId={UploadId}'
      },
      input: {
        type: 'structure',
        members: {
          Bucket: {
            required: true,
            location: 'uri'
          },
          CopySource: {
            location: 'header',
            name: 'x-amz-copy-source',
            required: true
          },
          CopySourceIfMatch: {
            type: 'timestamp',
            location: 'header',
            name: 'x-amz-copy-source-if-match'
          },
          CopySourceIfModifiedSince: {
            type: 'timestamp',
            location: 'header',
            name: 'x-amz-copy-source-if-modified-since'
          },
          CopySourceIfNoneMatch: {
            type: 'timestamp',
            location: 'header',
            name: 'x-amz-copy-source-if-none-match'
          },
          CopySourceIfUnmodifiedSince: {
            type: 'timestamp',
            location: 'header',
            name: 'x-amz-copy-source-if-unmodified-since'
          },
          CopySourceRange: {
            location: 'header',
            name: 'x-amz-copy-source-range'
          },
          Key: {
            required: true,
            location: 'uri'
          },
          PartNumber: {
            required: true,
            location: 'uri'
          },
          UploadId: {
            required: true,
            location: 'uri'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          CopySourceVersionId: {
            location: 'header',
            name: 'x-amz-copy-source-version-id'
          },
          ServerSideEncryption: {
            location: 'header',
            name: 'x-amz-server-side-encryption'
          },
          ETag: {
          },
          LastModified: {
            type: 'timestamp'
          }
        }
      }
    }
  }
};

},{}],64:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

module.exports = {
  format: 'query',
  apiVersion: '2010-12-01',
  endpointPrefix: 'email',
  resultWrapped: true,
  serviceAbbreviation: 'Amazon SES',
  serviceFullName: 'Amazon Simple Email Service',
  signatureVersion: 'v4',
  signingName: 'ses',
  timestampFormat: 'iso8601',
  operations: {
    deleteIdentity: {
      name: 'DeleteIdentity',
      input: {
        type: 'structure',
        members: {
          Identity: {
            required: true
          }
        }
      },
      output: {
        type: 'structure'
      }
    },
    deleteVerifiedEmailAddress: {
      name: 'DeleteVerifiedEmailAddress',
      input: {
        type: 'structure',
        members: {
          EmailAddress: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    getIdentityDkimAttributes: {
      name: 'GetIdentityDkimAttributes',
      input: {
        type: 'structure',
        members: {
          Identities: {
            type: 'list',
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          DkimAttributes: {
            type: 'map',
            members: {
              type: 'structure',
              members: {
                DkimEnabled: {
                  type: 'boolean'
                },
                DkimVerificationStatus: {
                },
                DkimTokens: {
                  type: 'list'
                }
              }
            }
          }
        }
      }
    },
    getIdentityNotificationAttributes: {
      name: 'GetIdentityNotificationAttributes',
      input: {
        type: 'structure',
        members: {
          Identities: {
            type: 'list',
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          NotificationAttributes: {
            type: 'map',
            members: {
              type: 'structure',
              members: {
                BounceTopic: {
                },
                ComplaintTopic: {
                },
                ForwardingEnabled: {
                  type: 'boolean'
                }
              }
            }
          }
        }
      }
    },
    getIdentityVerificationAttributes: {
      name: 'GetIdentityVerificationAttributes',
      input: {
        type: 'structure',
        members: {
          Identities: {
            type: 'list',
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          VerificationAttributes: {
            type: 'map',
            members: {
              type: 'structure',
              members: {
                VerificationStatus: {
                },
                VerificationToken: {
                }
              }
            }
          }
        }
      }
    },
    getSendQuota: {
      name: 'GetSendQuota',
      input: {
        type: 'structure',
        members: {
        }
      },
      output: {
        type: 'structure',
        members: {
          Max24HourSend: {
            type: 'float'
          },
          MaxSendRate: {
            type: 'float'
          },
          SentLast24Hours: {
            type: 'float'
          }
        }
      }
    },
    getSendStatistics: {
      name: 'GetSendStatistics',
      input: {
        type: 'structure',
        members: {
        }
      },
      output: {
        type: 'structure',
        members: {
          SendDataPoints: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Timestamp: {
                  type: 'timestamp'
                },
                DeliveryAttempts: {
                  type: 'integer'
                },
                Bounces: {
                  type: 'integer'
                },
                Complaints: {
                  type: 'integer'
                },
                Rejects: {
                  type: 'integer'
                }
              }
            }
          }
        }
      }
    },
    listIdentities: {
      name: 'ListIdentities',
      input: {
        type: 'structure',
        members: {
          IdentityType: {
          },
          NextToken: {
          },
          MaxItems: {
            type: 'integer'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Identities: {
            type: 'list'
          },
          NextToken: {
          }
        }
      }
    },
    listVerifiedEmailAddresses: {
      name: 'ListVerifiedEmailAddresses',
      input: {
        type: 'structure',
        members: {
        }
      },
      output: {
        type: 'structure',
        members: {
          VerifiedEmailAddresses: {
            type: 'list'
          }
        }
      }
    },
    sendEmail: {
      name: 'SendEmail',
      input: {
        type: 'structure',
        members: {
          Source: {
            required: true
          },
          Destination: {
            type: 'structure',
            members: {
              ToAddresses: {
                type: 'list'
              },
              CcAddresses: {
                type: 'list'
              },
              BccAddresses: {
                type: 'list'
              }
            },
            required: true
          },
          Message: {
            type: 'structure',
            members: {
              Subject: {
                type: 'structure',
                members: {
                  Data: {
                    required: true
                  },
                  Charset: {
                  }
                },
                required: true
              },
              Body: {
                type: 'structure',
                members: {
                  Text: {
                    type: 'structure',
                    members: {
                      Data: {
                        required: true
                      },
                      Charset: {
                      }
                    }
                  },
                  Html: {
                    type: 'structure',
                    members: {
                      Data: {
                        required: true
                      },
                      Charset: {
                      }
                    }
                  }
                },
                required: true
              }
            },
            required: true
          },
          ReplyToAddresses: {
            type: 'list'
          },
          ReturnPath: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          MessageId: {
          }
        }
      }
    },
    sendRawEmail: {
      name: 'SendRawEmail',
      input: {
        type: 'structure',
        members: {
          Source: {
          },
          Destinations: {
            type: 'list'
          },
          RawMessage: {
            type: 'structure',
            members: {
              Data: {
                type: 'base64',
                required: true
              }
            },
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          MessageId: {
          }
        }
      }
    },
    setIdentityDkimEnabled: {
      name: 'SetIdentityDkimEnabled',
      input: {
        type: 'structure',
        members: {
          Identity: {
            required: true
          },
          DkimEnabled: {
            type: 'boolean',
            required: true
          }
        }
      },
      output: {
        type: 'structure'
      }
    },
    setIdentityFeedbackForwardingEnabled: {
      name: 'SetIdentityFeedbackForwardingEnabled',
      input: {
        type: 'structure',
        members: {
          Identity: {
            required: true
          },
          ForwardingEnabled: {
            type: 'boolean',
            required: true
          }
        }
      },
      output: {
        type: 'structure'
      }
    },
    setIdentityNotificationTopic: {
      name: 'SetIdentityNotificationTopic',
      input: {
        type: 'structure',
        members: {
          Identity: {
            required: true
          },
          NotificationType: {
            required: true
          },
          SnsTopic: {
          }
        }
      },
      output: {
        type: 'structure'
      }
    },
    verifyDomainDkim: {
      name: 'VerifyDomainDkim',
      input: {
        type: 'structure',
        members: {
          Domain: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          DkimTokens: {
            type: 'list'
          }
        }
      }
    },
    verifyDomainIdentity: {
      name: 'VerifyDomainIdentity',
      input: {
        type: 'structure',
        members: {
          Domain: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          VerificationToken: {
          }
        }
      }
    },
    verifyEmailAddress: {
      name: 'VerifyEmailAddress',
      input: {
        type: 'structure',
        members: {
          EmailAddress: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    verifyEmailIdentity: {
      name: 'VerifyEmailIdentity',
      input: {
        type: 'structure',
        members: {
          EmailAddress: {
            required: true
          }
        }
      },
      output: {
        type: 'structure'
      }
    }
  }
};

},{}],65:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

module.exports = {
  format: 'query',
  apiVersion: '2009-04-15',
  endpointPrefix: 'sdb',
  resultWrapped: true,
  serviceFullName: 'Amazon SimpleDB',
  signatureVersion: 'v2',
  timestampFormat: 'iso8601',
  operations: {
    batchDeleteAttributes: {
      name: 'BatchDeleteAttributes',
      input: {
        type: 'structure',
        members: {
          DomainName: {
            required: true
          },
          Items: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                  required: true,
                  name: 'ItemName'
                },
                Attributes: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      Name: {
                        required: true
                      },
                      AlternateNameEncoding: {
                      },
                      Value: {
                        required: true
                      },
                      AlternateValueEncoding: {
                      }
                    },
                    name: 'Attribute'
                  },
                  flattened: true
                }
              },
              name: 'Item'
            },
            flattened: true,
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    batchPutAttributes: {
      name: 'BatchPutAttributes',
      input: {
        type: 'structure',
        members: {
          DomainName: {
            required: true
          },
          Items: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                  required: true,
                  name: 'ItemName'
                },
                Attributes: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      Name: {
                        required: true
                      },
                      Value: {
                        required: true
                      },
                      Replace: {
                        type: 'boolean'
                      }
                    },
                    name: 'Attribute'
                  },
                  flattened: true,
                  required: true
                }
              },
              name: 'Item'
            },
            flattened: true,
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    createDomain: {
      name: 'CreateDomain',
      input: {
        type: 'structure',
        members: {
          DomainName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteAttributes: {
      name: 'DeleteAttributes',
      input: {
        type: 'structure',
        members: {
          DomainName: {
            required: true
          },
          ItemName: {
            required: true
          },
          Attributes: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                  required: true
                },
                AlternateNameEncoding: {
                },
                Value: {
                  required: true
                },
                AlternateValueEncoding: {
                }
              },
              name: 'Attribute'
            },
            flattened: true
          },
          Expected: {
            type: 'structure',
            members: {
              Name: {
              },
              Value: {
              },
              Exists: {
                type: 'boolean'
              }
            }
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteDomain: {
      name: 'DeleteDomain',
      input: {
        type: 'structure',
        members: {
          DomainName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    domainMetadata: {
      name: 'DomainMetadata',
      input: {
        type: 'structure',
        members: {
          DomainName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          ItemCount: {
            type: 'integer'
          },
          ItemNamesSizeBytes: {
            type: 'integer'
          },
          AttributeNameCount: {
            type: 'integer'
          },
          AttributeNamesSizeBytes: {
            type: 'integer'
          },
          AttributeValueCount: {
            type: 'integer'
          },
          AttributeValuesSizeBytes: {
            type: 'integer'
          },
          Timestamp: {
            type: 'integer'
          }
        }
      }
    },
    getAttributes: {
      name: 'GetAttributes',
      input: {
        type: 'structure',
        members: {
          DomainName: {
            required: true
          },
          ItemName: {
            required: true
          },
          AttributeNames: {
            type: 'list',
            members: {
              name: 'AttributeName'
            },
            flattened: true
          },
          ConsistentRead: {
            type: 'boolean'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Attribute: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                },
                AlternateNameEncoding: {
                },
                Value: {
                },
                AlternateValueEncoding: {
                }
              },
              name: 'Attribute'
            },
            flattened: true,
            name: 'Attributes'
          }
        }
      }
    },
    listDomains: {
      name: 'ListDomains',
      input: {
        type: 'structure',
        members: {
          MaxNumberOfDomains: {
            type: 'integer'
          },
          NextToken: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          DomainName: {
            type: 'list',
            members: {
              name: 'DomainName'
            },
            flattened: true,
            name: 'DomainNames'
          },
          NextToken: {
          }
        }
      }
    },
    putAttributes: {
      name: 'PutAttributes',
      input: {
        type: 'structure',
        members: {
          DomainName: {
            required: true
          },
          ItemName: {
            required: true
          },
          Attributes: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                  required: true
                },
                Value: {
                  required: true
                },
                Replace: {
                  type: 'boolean'
                }
              },
              name: 'Attribute'
            },
            flattened: true,
            required: true
          },
          Expected: {
            type: 'structure',
            members: {
              Name: {
              },
              Value: {
              },
              Exists: {
                type: 'boolean'
              }
            }
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    select: {
      name: 'Select',
      input: {
        type: 'structure',
        members: {
          SelectExpression: {
            required: true
          },
          NextToken: {
          },
          ConsistentRead: {
            type: 'boolean'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Item: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Name: {
                },
                AlternateNameEncoding: {
                },
                Attribute: {
                  type: 'list',
                  members: {
                    type: 'structure',
                    members: {
                      Name: {
                      },
                      AlternateNameEncoding: {
                      },
                      Value: {
                      },
                      AlternateValueEncoding: {
                      }
                    },
                    name: 'Attribute'
                  },
                  flattened: true,
                  name: 'Attributes'
                }
              },
              name: 'Item'
            },
            flattened: true,
            name: 'Items'
          },
          NextToken: {
          }
        }
      }
    }
  }
};

},{}],67:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

module.exports = {
  format: 'query',
  apiVersion: '2010-03-31',
  endpointPrefix: 'sns',
  resultWrapped: true,
  serviceAbbreviation: 'Amazon SNS',
  serviceFullName: 'Amazon Simple Notification Service',
  signatureVersion: 'v2',
  timestampFormat: 'iso8601',
  operations: {
    addPermission: {
      name: 'AddPermission',
      input: {
        type: 'structure',
        members: {
          TopicArn: {
            required: true
          },
          Label: {
            required: true
          },
          AWSAccountId: {
            type: 'list',
            required: true
          },
          ActionName: {
            type: 'list',
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    confirmSubscription: {
      name: 'ConfirmSubscription',
      input: {
        type: 'structure',
        members: {
          TopicArn: {
            required: true
          },
          Token: {
            required: true
          },
          AuthenticateOnUnsubscribe: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          SubscriptionArn: {
          }
        }
      }
    },
    createTopic: {
      name: 'CreateTopic',
      input: {
        type: 'structure',
        members: {
          Name: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          TopicArn: {
          }
        }
      }
    },
    deleteTopic: {
      name: 'DeleteTopic',
      input: {
        type: 'structure',
        members: {
          TopicArn: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    getSubscriptionAttributes: {
      name: 'GetSubscriptionAttributes',
      input: {
        type: 'structure',
        members: {
          SubscriptionArn: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Attributes: {
            type: 'map'
          }
        }
      }
    },
    getTopicAttributes: {
      name: 'GetTopicAttributes',
      input: {
        type: 'structure',
        members: {
          TopicArn: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Attributes: {
            type: 'map'
          }
        }
      }
    },
    listSubscriptions: {
      name: 'ListSubscriptions',
      input: {
        type: 'structure',
        members: {
          NextToken: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Subscriptions: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                SubscriptionArn: {
                },
                Owner: {
                },
                Protocol: {
                },
                Endpoint: {
                },
                TopicArn: {
                }
              }
            }
          },
          NextToken: {
          }
        }
      }
    },
    listSubscriptionsByTopic: {
      name: 'ListSubscriptionsByTopic',
      input: {
        type: 'structure',
        members: {
          TopicArn: {
            required: true
          },
          NextToken: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Subscriptions: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                SubscriptionArn: {
                },
                Owner: {
                },
                Protocol: {
                },
                Endpoint: {
                },
                TopicArn: {
                }
              }
            }
          },
          NextToken: {
          }
        }
      }
    },
    listTopics: {
      name: 'ListTopics',
      input: {
        type: 'structure',
        members: {
          NextToken: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Topics: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                TopicArn: {
                }
              }
            }
          },
          NextToken: {
          }
        }
      }
    },
    publish: {
      name: 'Publish',
      input: {
        type: 'structure',
        members: {
          TopicArn: {
            required: true
          },
          Message: {
            required: true
          },
          Subject: {
          },
          MessageStructure: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          MessageId: {
          }
        }
      }
    },
    removePermission: {
      name: 'RemovePermission',
      input: {
        type: 'structure',
        members: {
          TopicArn: {
            required: true
          },
          Label: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    setSubscriptionAttributes: {
      name: 'SetSubscriptionAttributes',
      input: {
        type: 'structure',
        members: {
          SubscriptionArn: {
            required: true
          },
          AttributeName: {
            required: true
          },
          AttributeValue: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    setTopicAttributes: {
      name: 'SetTopicAttributes',
      input: {
        type: 'structure',
        members: {
          TopicArn: {
            required: true
          },
          AttributeName: {
            required: true
          },
          AttributeValue: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    subscribe: {
      name: 'Subscribe',
      input: {
        type: 'structure',
        members: {
          TopicArn: {
            required: true
          },
          Protocol: {
            required: true
          },
          Endpoint: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          SubscriptionArn: {
          }
        }
      }
    },
    unsubscribe: {
      name: 'Unsubscribe',
      input: {
        type: 'structure',
        members: {
          SubscriptionArn: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    }
  }
};

},{}],68:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

module.exports = {
  format: 'query',
  apiVersion: '2012-11-05',
  endpointPrefix: 'sqs',
  resultWrapped: true,
  serviceAbbreviation: 'Amazon SQS',
  serviceFullName: 'Amazon Simple Queue Service',
  signatureVersion: 'v4',
  timestampFormat: 'iso8601',
  operations: {
    addPermission: {
      name: 'AddPermission',
      input: {
        type: 'structure',
        members: {
          QueueUrl: {
            required: true
          },
          Label: {
            required: true
          },
          AWSAccountIds: {
            type: 'list',
            members: {
              name: 'AWSAccountId'
            },
            flattened: true,
            required: true
          },
          Actions: {
            type: 'list',
            members: {
              name: 'ActionName'
            },
            flattened: true,
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    changeMessageVisibility: {
      name: 'ChangeMessageVisibility',
      input: {
        type: 'structure',
        members: {
          QueueUrl: {
            required: true
          },
          ReceiptHandle: {
            required: true
          },
          VisibilityTimeout: {
            type: 'integer',
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    changeMessageVisibilityBatch: {
      name: 'ChangeMessageVisibilityBatch',
      input: {
        type: 'structure',
        members: {
          QueueUrl: {
            required: true
          },
          Entries: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Id: {
                  required: true
                },
                ReceiptHandle: {
                  required: true
                },
                VisibilityTimeout: {
                  type: 'integer'
                }
              },
              name: 'ChangeMessageVisibilityBatchRequestEntry'
            },
            flattened: true,
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          ChangeMessageVisibilityBatchResultEntry: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Id: {
                }
              },
              name: 'ChangeMessageVisibilityBatchResultEntry'
            },
            flattened: true,
            name: 'Successful'
          },
          BatchResultErrorEntry: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Id: {
                },
                SenderFault: {
                  type: 'boolean'
                },
                Code: {
                },
                Message: {
                }
              },
              name: 'BatchResultErrorEntry'
            },
            flattened: true,
            name: 'Failed'
          }
        }
      }
    },
    createQueue: {
      name: 'CreateQueue',
      input: {
        type: 'structure',
        members: {
          QueueName: {
            required: true
          },
          Attributes: {
            type: 'map',
            keys: {
              name: 'Name'
            },
            members: {
              name: 'Value'
            },
            flattened: true,
            name: 'Attribute'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          QueueUrl: {
          }
        }
      }
    },
    deleteMessage: {
      name: 'DeleteMessage',
      input: {
        type: 'structure',
        members: {
          QueueUrl: {
            required: true
          },
          ReceiptHandle: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deleteMessageBatch: {
      name: 'DeleteMessageBatch',
      input: {
        type: 'structure',
        members: {
          QueueUrl: {
            required: true
          },
          Entries: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Id: {
                  required: true
                },
                ReceiptHandle: {
                  required: true
                }
              },
              name: 'DeleteMessageBatchRequestEntry'
            },
            flattened: true,
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          DeleteMessageBatchResultEntry: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Id: {
                }
              },
              name: 'DeleteMessageBatchResultEntry'
            },
            flattened: true,
            name: 'Successful'
          },
          BatchResultErrorEntry: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Id: {
                },
                SenderFault: {
                  type: 'boolean'
                },
                Code: {
                },
                Message: {
                }
              },
              name: 'BatchResultErrorEntry'
            },
            flattened: true,
            name: 'Failed'
          }
        }
      }
    },
    deleteQueue: {
      name: 'DeleteQueue',
      input: {
        type: 'structure',
        members: {
          QueueUrl: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    getQueueAttributes: {
      name: 'GetQueueAttributes',
      input: {
        type: 'structure',
        members: {
          QueueUrl: {
            required: true
          },
          AttributeNames: {
            type: 'list',
            members: {
              name: 'AttributeName'
            },
            flattened: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Value: {
            type: 'map',
            keys: {
              name: 'Name'
            },
            members: {
              name: 'Value'
            },
            flattened: true,
            name: 'Attributes'
          }
        }
      }
    },
    getQueueUrl: {
      name: 'GetQueueUrl',
      input: {
        type: 'structure',
        members: {
          QueueName: {
            required: true
          },
          QueueOwnerAWSAccountId: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          QueueUrl: {
          }
        }
      }
    },
    listQueues: {
      name: 'ListQueues',
      input: {
        type: 'structure',
        members: {
          QueueNamePrefix: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          QueueUrl: {
            type: 'list',
            members: {
              name: 'QueueUrl'
            },
            flattened: true,
            name: 'QueueUrls'
          }
        }
      }
    },
    receiveMessage: {
      name: 'ReceiveMessage',
      input: {
        type: 'structure',
        members: {
          QueueUrl: {
            required: true
          },
          AttributeNames: {
            type: 'list',
            members: {
              name: 'AttributeName'
            },
            flattened: true
          },
          MaxNumberOfMessages: {
            type: 'integer'
          },
          VisibilityTimeout: {
            type: 'integer'
          },
          WaitTimeSeconds: {
            type: 'integer'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Message: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                MessageId: {
                },
                ReceiptHandle: {
                },
                MD5OfBody: {
                },
                Body: {
                },
                Value: {
                  type: 'map',
                  keys: {
                    name: 'Name'
                  },
                  members: {
                    name: 'Value'
                  },
                  flattened: true,
                  name: 'Attributes'
                }
              },
              name: 'Message'
            },
            flattened: true,
            name: 'Messages'
          }
        }
      }
    },
    removePermission: {
      name: 'RemovePermission',
      input: {
        type: 'structure',
        members: {
          QueueUrl: {
            required: true
          },
          Label: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    sendMessage: {
      name: 'SendMessage',
      input: {
        type: 'structure',
        members: {
          QueueUrl: {
            required: true
          },
          MessageBody: {
            required: true
          },
          DelaySeconds: {
            type: 'integer'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          MD5OfMessageBody: {
          },
          MessageId: {
          }
        }
      }
    },
    sendMessageBatch: {
      name: 'SendMessageBatch',
      input: {
        type: 'structure',
        members: {
          QueueUrl: {
            required: true
          },
          Entries: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Id: {
                  required: true
                },
                MessageBody: {
                  required: true
                },
                DelaySeconds: {
                  type: 'integer'
                }
              },
              name: 'SendMessageBatchRequestEntry'
            },
            flattened: true,
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          SendMessageBatchResultEntry: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Id: {
                },
                MessageId: {
                },
                MD5OfMessageBody: {
                }
              },
              name: 'SendMessageBatchResultEntry'
            },
            flattened: true,
            name: 'Successful'
          },
          BatchResultErrorEntry: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Id: {
                },
                SenderFault: {
                  type: 'boolean'
                },
                Code: {
                },
                Message: {
                }
              },
              name: 'BatchResultErrorEntry'
            },
            flattened: true,
            name: 'Failed'
          }
        }
      }
    },
    setQueueAttributes: {
      name: 'SetQueueAttributes',
      input: {
        type: 'structure',
        members: {
          QueueUrl: {
            required: true
          },
          Attributes: {
            type: 'map',
            keys: {
              name: 'Name'
            },
            members: {
              name: 'Value'
            },
            flattened: true,
            name: 'Attribute',
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    }
  }
};

},{}],69:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

module.exports = {
  format: 'json',
  apiVersion: '2012-06-30',
  endpointPrefix: 'storagegateway',
  jsonVersion: '1.1',
  serviceFullName: 'AWS Storage Gateway',
  signatureVersion: 'v4',
  targetPrefix: 'StorageGateway_20120630',
  timestampFormat: 'iso8601',
  operations: {
    activateGateway: {
      name: 'ActivateGateway',
      input: {
        type: 'structure',
        members: {
          ActivationKey: {
            required: true
          },
          GatewayName: {
            required: true
          },
          GatewayTimezone: {
            required: true
          },
          GatewayRegion: {
            required: true
          },
          GatewayType: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          GatewayARN: {
          }
        }
      }
    },
    addCache: {
      name: 'AddCache',
      input: {
        type: 'structure',
        members: {
          GatewayARN: {
            required: true
          },
          DiskIds: {
            type: 'list',
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          GatewayARN: {
          }
        }
      }
    },
    addUploadBuffer: {
      name: 'AddUploadBuffer',
      input: {
        type: 'structure',
        members: {
          GatewayARN: {
            required: true
          },
          DiskIds: {
            type: 'list',
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          GatewayARN: {
          }
        }
      }
    },
    addWorkingStorage: {
      name: 'AddWorkingStorage',
      input: {
        type: 'structure',
        members: {
          GatewayARN: {
            required: true
          },
          DiskIds: {
            type: 'list',
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          GatewayARN: {
          }
        }
      }
    },
    createCachediSCSIVolume: {
      name: 'CreateCachediSCSIVolume',
      input: {
        type: 'structure',
        members: {
          GatewayARN: {
            required: true
          },
          VolumeSizeInBytes: {
            type: 'integer',
            required: true
          },
          SnapshotId: {
          },
          TargetName: {
            required: true
          },
          NetworkInterfaceId: {
            required: true
          },
          ClientToken: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          VolumeARN: {
          },
          TargetARN: {
          }
        }
      }
    },
    createSnapshot: {
      name: 'CreateSnapshot',
      input: {
        type: 'structure',
        members: {
          VolumeARN: {
            required: true
          },
          SnapshotDescription: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          VolumeARN: {
          },
          SnapshotId: {
          }
        }
      }
    },
    createSnapshotFromVolumeRecoveryPoint: {
      name: 'CreateSnapshotFromVolumeRecoveryPoint',
      input: {
        type: 'structure',
        members: {
          VolumeARN: {
            required: true
          },
          SnapshotDescription: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          SnapshotId: {
          },
          VolumeARN: {
          },
          VolumeRecoveryPointTime: {
          }
        }
      }
    },
    createStorediSCSIVolume: {
      name: 'CreateStorediSCSIVolume',
      input: {
        type: 'structure',
        members: {
          GatewayARN: {
            required: true
          },
          DiskId: {
            required: true
          },
          SnapshotId: {
          },
          PreserveExistingData: {
            type: 'boolean',
            required: true
          },
          TargetName: {
            required: true
          },
          NetworkInterfaceId: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          VolumeARN: {
          },
          VolumeSizeInBytes: {
            type: 'integer'
          },
          TargetARN: {
          }
        }
      }
    },
    deleteBandwidthRateLimit: {
      name: 'DeleteBandwidthRateLimit',
      input: {
        type: 'structure',
        members: {
          GatewayARN: {
            required: true
          },
          BandwidthType: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          GatewayARN: {
          }
        }
      }
    },
    deleteChapCredentials: {
      name: 'DeleteChapCredentials',
      input: {
        type: 'structure',
        members: {
          TargetARN: {
            required: true
          },
          InitiatorName: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          TargetARN: {
          },
          InitiatorName: {
          }
        }
      }
    },
    deleteGateway: {
      name: 'DeleteGateway',
      input: {
        type: 'structure',
        members: {
          GatewayARN: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          GatewayARN: {
          }
        }
      }
    },
    deleteSnapshotSchedule: {
      name: 'DeleteSnapshotSchedule',
      input: {
        type: 'structure',
        members: {
          VolumeARN: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          VolumeARN: {
          }
        }
      }
    },
    deleteVolume: {
      name: 'DeleteVolume',
      input: {
        type: 'structure',
        members: {
          VolumeARN: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          VolumeARN: {
          }
        }
      }
    },
    describeBandwidthRateLimit: {
      name: 'DescribeBandwidthRateLimit',
      input: {
        type: 'structure',
        members: {
          GatewayARN: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          GatewayARN: {
          },
          AverageUploadRateLimitInBitsPerSec: {
            type: 'integer'
          },
          AverageDownloadRateLimitInBitsPerSec: {
            type: 'integer'
          }
        }
      }
    },
    describeCache: {
      name: 'DescribeCache',
      input: {
        type: 'structure',
        members: {
          GatewayARN: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          GatewayARN: {
          },
          DiskIds: {
            type: 'list'
          },
          CacheAllocatedInBytes: {
            type: 'integer'
          },
          CacheUsedPercentage: {
            type: 'float'
          },
          CacheDirtyPercentage: {
            type: 'float'
          },
          CacheHitPercentage: {
            type: 'float'
          },
          CacheMissPercentage: {
            type: 'float'
          }
        }
      }
    },
    describeCachediSCSIVolumes: {
      name: 'DescribeCachediSCSIVolumes',
      input: {
        type: 'structure',
        members: {
          VolumeARNs: {
            type: 'list',
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          CachediSCSIVolumes: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                VolumeARN: {
                },
                VolumeId: {
                },
                VolumeType: {
                },
                VolumeStatus: {
                },
                VolumeSizeInBytes: {
                  type: 'integer'
                },
                VolumeProgress: {
                  type: 'float'
                },
                SourceSnapshotId: {
                },
                VolumeiSCSIAttributes: {
                  type: 'structure',
                  members: {
                    TargetARN: {
                    },
                    NetworkInterfaceId: {
                    },
                    NetworkInterfacePort: {
                      type: 'integer'
                    },
                    LunNumber: {
                      type: 'integer'
                    },
                    ChapEnabled: {
                      type: 'boolean'
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    describeChapCredentials: {
      name: 'DescribeChapCredentials',
      input: {
        type: 'structure',
        members: {
          TargetARN: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          ChapCredentials: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                TargetARN: {
                },
                SecretToAuthenticateInitiator: {
                },
                InitiatorName: {
                },
                SecretToAuthenticateTarget: {
                }
              }
            }
          }
        }
      }
    },
    describeGatewayInformation: {
      name: 'DescribeGatewayInformation',
      input: {
        type: 'structure',
        members: {
          GatewayARN: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          GatewayARN: {
          },
          GatewayId: {
          },
          GatewayTimezone: {
          },
          GatewayState: {
          },
          GatewayNetworkInterfaces: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                Ipv4Address: {
                },
                MacAddress: {
                },
                Ipv6Address: {
                }
              }
            }
          },
          GatewayType: {
          },
          NextUpdateAvailabilityDate: {
          }
        }
      }
    },
    describeMaintenanceStartTime: {
      name: 'DescribeMaintenanceStartTime',
      input: {
        type: 'structure',
        members: {
          GatewayARN: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          GatewayARN: {
          },
          HourOfDay: {
            type: 'integer'
          },
          MinuteOfHour: {
            type: 'integer'
          },
          DayOfWeek: {
            type: 'integer'
          },
          Timezone: {
          }
        }
      }
    },
    describeSnapshotSchedule: {
      name: 'DescribeSnapshotSchedule',
      input: {
        type: 'structure',
        members: {
          VolumeARN: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          VolumeARN: {
          },
          StartAt: {
            type: 'integer'
          },
          RecurrenceInHours: {
            type: 'integer'
          },
          Description: {
          },
          Timezone: {
          }
        }
      }
    },
    describeStorediSCSIVolumes: {
      name: 'DescribeStorediSCSIVolumes',
      input: {
        type: 'structure',
        members: {
          VolumeARNs: {
            type: 'list',
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          StorediSCSIVolumes: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                VolumeARN: {
                },
                VolumeId: {
                },
                VolumeType: {
                },
                VolumeStatus: {
                },
                VolumeSizeInBytes: {
                  type: 'integer'
                },
                VolumeProgress: {
                  type: 'float'
                },
                VolumeDiskId: {
                },
                SourceSnapshotId: {
                },
                PreservedExistingData: {
                  type: 'boolean'
                },
                VolumeiSCSIAttributes: {
                  type: 'structure',
                  members: {
                    TargetARN: {
                    },
                    NetworkInterfaceId: {
                    },
                    NetworkInterfacePort: {
                      type: 'integer'
                    },
                    LunNumber: {
                      type: 'integer'
                    },
                    ChapEnabled: {
                      type: 'boolean'
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    describeUploadBuffer: {
      name: 'DescribeUploadBuffer',
      input: {
        type: 'structure',
        members: {
          GatewayARN: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          GatewayARN: {
          },
          DiskIds: {
            type: 'list'
          },
          UploadBufferUsedInBytes: {
            type: 'integer'
          },
          UploadBufferAllocatedInBytes: {
            type: 'integer'
          }
        }
      }
    },
    describeWorkingStorage: {
      name: 'DescribeWorkingStorage',
      input: {
        type: 'structure',
        members: {
          GatewayARN: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          GatewayARN: {
          },
          DiskIds: {
            type: 'list'
          },
          WorkingStorageUsedInBytes: {
            type: 'integer'
          },
          WorkingStorageAllocatedInBytes: {
            type: 'integer'
          }
        }
      }
    },
    listGateways: {
      name: 'ListGateways',
      input: {
        type: 'structure',
        members: {
          Marker: {
          },
          Limit: {
            type: 'integer'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Gateways: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                GatewayARN: {
                }
              }
            }
          },
          Marker: {
          }
        }
      }
    },
    listLocalDisks: {
      name: 'ListLocalDisks',
      input: {
        type: 'structure',
        members: {
          GatewayARN: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          GatewayARN: {
          },
          Disks: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                DiskId: {
                },
                DiskPath: {
                },
                DiskNode: {
                },
                DiskSizeInBytes: {
                  type: 'integer'
                },
                DiskAllocationType: {
                },
                DiskAllocationResource: {
                }
              }
            }
          }
        }
      }
    },
    listVolumeRecoveryPoints: {
      name: 'ListVolumeRecoveryPoints',
      input: {
        type: 'structure',
        members: {
          GatewayARN: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          GatewayARN: {
          },
          VolumeRecoveryPointInfos: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                VolumeARN: {
                },
                VolumeSizeInBytes: {
                  type: 'integer'
                },
                VolumeUsageInBytes: {
                  type: 'integer'
                },
                VolumeRecoveryPointTime: {
                }
              }
            }
          }
        }
      }
    },
    listVolumes: {
      name: 'ListVolumes',
      input: {
        type: 'structure',
        members: {
          GatewayARN: {
            required: true
          },
          Marker: {
          },
          Limit: {
            type: 'integer'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          GatewayARN: {
          },
          Marker: {
          },
          VolumeInfos: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                VolumeARN: {
                },
                VolumeType: {
                }
              }
            }
          }
        }
      }
    },
    shutdownGateway: {
      name: 'ShutdownGateway',
      input: {
        type: 'structure',
        members: {
          GatewayARN: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          GatewayARN: {
          }
        }
      }
    },
    startGateway: {
      name: 'StartGateway',
      input: {
        type: 'structure',
        members: {
          GatewayARN: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          GatewayARN: {
          }
        }
      }
    },
    updateBandwidthRateLimit: {
      name: 'UpdateBandwidthRateLimit',
      input: {
        type: 'structure',
        members: {
          GatewayARN: {
            required: true
          },
          AverageUploadRateLimitInBitsPerSec: {
            type: 'integer'
          },
          AverageDownloadRateLimitInBitsPerSec: {
            type: 'integer'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          GatewayARN: {
          }
        }
      }
    },
    updateChapCredentials: {
      name: 'UpdateChapCredentials',
      input: {
        type: 'structure',
        members: {
          TargetARN: {
            required: true
          },
          SecretToAuthenticateInitiator: {
            required: true
          },
          InitiatorName: {
            required: true
          },
          SecretToAuthenticateTarget: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          TargetARN: {
          },
          InitiatorName: {
          }
        }
      }
    },
    updateGatewayInformation: {
      name: 'UpdateGatewayInformation',
      input: {
        type: 'structure',
        members: {
          GatewayARN: {
            required: true
          },
          GatewayName: {
          },
          GatewayTimezone: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          GatewayARN: {
          }
        }
      }
    },
    updateGatewaySoftwareNow: {
      name: 'UpdateGatewaySoftwareNow',
      input: {
        type: 'structure',
        members: {
          GatewayARN: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          GatewayARN: {
          }
        }
      }
    },
    updateMaintenanceStartTime: {
      name: 'UpdateMaintenanceStartTime',
      input: {
        type: 'structure',
        members: {
          GatewayARN: {
            required: true
          },
          HourOfDay: {
            type: 'integer',
            required: true
          },
          MinuteOfHour: {
            type: 'integer',
            required: true
          },
          DayOfWeek: {
            type: 'integer',
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          GatewayARN: {
          }
        }
      }
    },
    updateSnapshotSchedule: {
      name: 'UpdateSnapshotSchedule',
      input: {
        type: 'structure',
        members: {
          VolumeARN: {
            required: true
          },
          StartAt: {
            type: 'integer',
            required: true
          },
          RecurrenceInHours: {
            type: 'integer',
            required: true
          },
          Description: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          VolumeARN: {
          }
        }
      }
    }
  }
};

},{}],66:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

module.exports = {
  format: 'json',
  apiVersion: '2012-01-25',
  endpointPrefix: 'swf',
  jsonVersion: '1.0',
  serviceAbbreviation: 'Amazon SWF',
  serviceFullName: 'Amazon Simple Workflow Service',
  signatureVersion: 'v3',
  targetPrefix: 'SimpleWorkflowService',
  timestampFormat: 'unixTimestamp',
  operations: {
    countClosedWorkflowExecutions: {
      name: 'CountClosedWorkflowExecutions',
      input: {
        type: 'structure',
        members: {
          domain: {
            required: true
          },
          startTimeFilter: {
            type: 'structure',
            members: {
              oldestDate: {
                type: 'timestamp',
                required: true
              },
              latestDate: {
                type: 'timestamp'
              }
            }
          },
          closeTimeFilter: {
            type: 'structure',
            members: {
              oldestDate: {
                type: 'timestamp',
                required: true
              },
              latestDate: {
                type: 'timestamp'
              }
            }
          },
          executionFilter: {
            type: 'structure',
            members: {
              workflowId: {
                required: true
              }
            }
          },
          typeFilter: {
            type: 'structure',
            members: {
              name: {
                required: true
              },
              version: {
              }
            }
          },
          tagFilter: {
            type: 'structure',
            members: {
              tag: {
                required: true
              }
            }
          },
          closeStatusFilter: {
            type: 'structure',
            members: {
              status: {
                required: true
              }
            }
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          count: {
            type: 'integer'
          },
          truncated: {
            type: 'boolean'
          }
        }
      }
    },
    countOpenWorkflowExecutions: {
      name: 'CountOpenWorkflowExecutions',
      input: {
        type: 'structure',
        members: {
          domain: {
            required: true
          },
          startTimeFilter: {
            type: 'structure',
            members: {
              oldestDate: {
                type: 'timestamp',
                required: true
              },
              latestDate: {
                type: 'timestamp'
              }
            },
            required: true
          },
          typeFilter: {
            type: 'structure',
            members: {
              name: {
                required: true
              },
              version: {
              }
            }
          },
          tagFilter: {
            type: 'structure',
            members: {
              tag: {
                required: true
              }
            }
          },
          executionFilter: {
            type: 'structure',
            members: {
              workflowId: {
                required: true
              }
            }
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          count: {
            type: 'integer'
          },
          truncated: {
            type: 'boolean'
          }
        }
      }
    },
    countPendingActivityTasks: {
      name: 'CountPendingActivityTasks',
      input: {
        type: 'structure',
        members: {
          domain: {
            required: true
          },
          taskList: {
            type: 'structure',
            members: {
              name: {
                required: true
              }
            },
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          count: {
            type: 'integer'
          },
          truncated: {
            type: 'boolean'
          }
        }
      }
    },
    countPendingDecisionTasks: {
      name: 'CountPendingDecisionTasks',
      input: {
        type: 'structure',
        members: {
          domain: {
            required: true
          },
          taskList: {
            type: 'structure',
            members: {
              name: {
                required: true
              }
            },
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          count: {
            type: 'integer'
          },
          truncated: {
            type: 'boolean'
          }
        }
      }
    },
    deprecateActivityType: {
      name: 'DeprecateActivityType',
      input: {
        type: 'structure',
        members: {
          domain: {
            required: true
          },
          activityType: {
            type: 'structure',
            members: {
              name: {
                required: true
              },
              version: {
                required: true
              }
            },
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deprecateDomain: {
      name: 'DeprecateDomain',
      input: {
        type: 'structure',
        members: {
          name: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    deprecateWorkflowType: {
      name: 'DeprecateWorkflowType',
      input: {
        type: 'structure',
        members: {
          domain: {
            required: true
          },
          workflowType: {
            type: 'structure',
            members: {
              name: {
                required: true
              },
              version: {
                required: true
              }
            },
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    describeActivityType: {
      name: 'DescribeActivityType',
      input: {
        type: 'structure',
        members: {
          domain: {
            required: true
          },
          activityType: {
            type: 'structure',
            members: {
              name: {
                required: true
              },
              version: {
                required: true
              }
            },
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          typeInfo: {
            type: 'structure',
            members: {
              activityType: {
                type: 'structure',
                members: {
                  name: {
                  },
                  version: {
                  }
                }
              },
              status: {
              },
              description: {
              },
              creationDate: {
                type: 'timestamp'
              },
              deprecationDate: {
                type: 'timestamp'
              }
            }
          },
          configuration: {
            type: 'structure',
            members: {
              defaultTaskStartToCloseTimeout: {
              },
              defaultTaskHeartbeatTimeout: {
              },
              defaultTaskList: {
                type: 'structure',
                members: {
                  name: {
                  }
                }
              },
              defaultTaskScheduleToStartTimeout: {
              },
              defaultTaskScheduleToCloseTimeout: {
              }
            }
          }
        }
      }
    },
    describeDomain: {
      name: 'DescribeDomain',
      input: {
        type: 'structure',
        members: {
          name: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          domainInfo: {
            type: 'structure',
            members: {
              name: {
              },
              status: {
              },
              description: {
              }
            }
          },
          configuration: {
            type: 'structure',
            members: {
              workflowExecutionRetentionPeriodInDays: {
              }
            }
          }
        }
      }
    },
    describeWorkflowExecution: {
      name: 'DescribeWorkflowExecution',
      input: {
        type: 'structure',
        members: {
          domain: {
            required: true
          },
          execution: {
            type: 'structure',
            members: {
              workflowId: {
                required: true
              },
              runId: {
                required: true
              }
            },
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          executionInfo: {
            type: 'structure',
            members: {
              execution: {
                type: 'structure',
                members: {
                  workflowId: {
                  },
                  runId: {
                  }
                }
              },
              workflowType: {
                type: 'structure',
                members: {
                  name: {
                  },
                  version: {
                  }
                }
              },
              startTimestamp: {
                type: 'timestamp'
              },
              closeTimestamp: {
                type: 'timestamp'
              },
              executionStatus: {
              },
              closeStatus: {
              },
              parent: {
                type: 'structure',
                members: {
                  workflowId: {
                  },
                  runId: {
                  }
                }
              },
              tagList: {
                type: 'list'
              },
              cancelRequested: {
                type: 'boolean'
              }
            }
          },
          executionConfiguration: {
            type: 'structure',
            members: {
              taskStartToCloseTimeout: {
              },
              executionStartToCloseTimeout: {
              },
              taskList: {
                type: 'structure',
                members: {
                  name: {
                  }
                }
              },
              childPolicy: {
              }
            }
          },
          openCounts: {
            type: 'structure',
            members: {
              openActivityTasks: {
                type: 'integer'
              },
              openDecisionTasks: {
                type: 'integer'
              },
              openTimers: {
                type: 'integer'
              },
              openChildWorkflowExecutions: {
                type: 'integer'
              }
            }
          },
          latestActivityTaskTimestamp: {
            type: 'timestamp'
          },
          latestExecutionContext: {
          }
        }
      }
    },
    describeWorkflowType: {
      name: 'DescribeWorkflowType',
      input: {
        type: 'structure',
        members: {
          domain: {
            required: true
          },
          workflowType: {
            type: 'structure',
            members: {
              name: {
                required: true
              },
              version: {
                required: true
              }
            },
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          typeInfo: {
            type: 'structure',
            members: {
              workflowType: {
                type: 'structure',
                members: {
                  name: {
                  },
                  version: {
                  }
                }
              },
              status: {
              },
              description: {
              },
              creationDate: {
                type: 'timestamp'
              },
              deprecationDate: {
                type: 'timestamp'
              }
            }
          },
          configuration: {
            type: 'structure',
            members: {
              defaultTaskStartToCloseTimeout: {
              },
              defaultExecutionStartToCloseTimeout: {
              },
              defaultTaskList: {
                type: 'structure',
                members: {
                  name: {
                  }
                }
              },
              defaultChildPolicy: {
              }
            }
          }
        }
      }
    },
    getWorkflowExecutionHistory: {
      name: 'GetWorkflowExecutionHistory',
      input: {
        type: 'structure',
        members: {
          domain: {
            required: true
          },
          execution: {
            type: 'structure',
            members: {
              workflowId: {
                required: true
              },
              runId: {
                required: true
              }
            },
            required: true
          },
          nextPageToken: {
          },
          maximumPageSize: {
            type: 'integer'
          },
          reverseOrder: {
            type: 'boolean'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          events: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                eventTimestamp: {
                  type: 'timestamp'
                },
                eventType: {
                },
                eventId: {
                  type: 'integer'
                },
                workflowExecutionStartedEventAttributes: {
                  type: 'structure',
                  members: {
                    input: {
                    },
                    executionStartToCloseTimeout: {
                    },
                    taskStartToCloseTimeout: {
                    },
                    childPolicy: {
                    },
                    taskList: {
                      type: 'structure',
                      members: {
                        name: {
                        }
                      }
                    },
                    workflowType: {
                      type: 'structure',
                      members: {
                        name: {
                        },
                        version: {
                        }
                      }
                    },
                    tagList: {
                      type: 'list'
                    },
                    continuedExecutionRunId: {
                    },
                    parentWorkflowExecution: {
                      type: 'structure',
                      members: {
                        workflowId: {
                        },
                        runId: {
                        }
                      }
                    },
                    parentInitiatedEventId: {
                      type: 'integer'
                    }
                  }
                },
                workflowExecutionCompletedEventAttributes: {
                  type: 'structure',
                  members: {
                    result: {
                    },
                    decisionTaskCompletedEventId: {
                      type: 'integer'
                    }
                  }
                },
                completeWorkflowExecutionFailedEventAttributes: {
                  type: 'structure',
                  members: {
                    cause: {
                    },
                    decisionTaskCompletedEventId: {
                      type: 'integer'
                    }
                  }
                },
                workflowExecutionFailedEventAttributes: {
                  type: 'structure',
                  members: {
                    reason: {
                    },
                    details: {
                    },
                    decisionTaskCompletedEventId: {
                      type: 'integer'
                    }
                  }
                },
                failWorkflowExecutionFailedEventAttributes: {
                  type: 'structure',
                  members: {
                    cause: {
                    },
                    decisionTaskCompletedEventId: {
                      type: 'integer'
                    }
                  }
                },
                workflowExecutionTimedOutEventAttributes: {
                  type: 'structure',
                  members: {
                    timeoutType: {
                    },
                    childPolicy: {
                    }
                  }
                },
                workflowExecutionCanceledEventAttributes: {
                  type: 'structure',
                  members: {
                    details: {
                    },
                    decisionTaskCompletedEventId: {
                      type: 'integer'
                    }
                  }
                },
                cancelWorkflowExecutionFailedEventAttributes: {
                  type: 'structure',
                  members: {
                    cause: {
                    },
                    decisionTaskCompletedEventId: {
                      type: 'integer'
                    }
                  }
                },
                workflowExecutionContinuedAsNewEventAttributes: {
                  type: 'structure',
                  members: {
                    input: {
                    },
                    decisionTaskCompletedEventId: {
                      type: 'integer'
                    },
                    newExecutionRunId: {
                    },
                    executionStartToCloseTimeout: {
                    },
                    taskList: {
                      type: 'structure',
                      members: {
                        name: {
                        }
                      }
                    },
                    taskStartToCloseTimeout: {
                    },
                    childPolicy: {
                    },
                    tagList: {
                      type: 'list'
                    },
                    workflowType: {
                      type: 'structure',
                      members: {
                        name: {
                        },
                        version: {
                        }
                      }
                    }
                  }
                },
                continueAsNewWorkflowExecutionFailedEventAttributes: {
                  type: 'structure',
                  members: {
                    cause: {
                    },
                    decisionTaskCompletedEventId: {
                      type: 'integer'
                    }
                  }
                },
                workflowExecutionTerminatedEventAttributes: {
                  type: 'structure',
                  members: {
                    reason: {
                    },
                    details: {
                    },
                    childPolicy: {
                    },
                    cause: {
                    }
                  }
                },
                workflowExecutionCancelRequestedEventAttributes: {
                  type: 'structure',
                  members: {
                    externalWorkflowExecution: {
                      type: 'structure',
                      members: {
                        workflowId: {
                        },
                        runId: {
                        }
                      }
                    },
                    externalInitiatedEventId: {
                      type: 'integer'
                    },
                    cause: {
                    }
                  }
                },
                decisionTaskScheduledEventAttributes: {
                  type: 'structure',
                  members: {
                    taskList: {
                      type: 'structure',
                      members: {
                        name: {
                        }
                      }
                    },
                    startToCloseTimeout: {
                    }
                  }
                },
                decisionTaskStartedEventAttributes: {
                  type: 'structure',
                  members: {
                    identity: {
                    },
                    scheduledEventId: {
                      type: 'integer'
                    }
                  }
                },
                decisionTaskCompletedEventAttributes: {
                  type: 'structure',
                  members: {
                    executionContext: {
                    },
                    scheduledEventId: {
                      type: 'integer'
                    },
                    startedEventId: {
                      type: 'integer'
                    }
                  }
                },
                decisionTaskTimedOutEventAttributes: {
                  type: 'structure',
                  members: {
                    timeoutType: {
                    },
                    scheduledEventId: {
                      type: 'integer'
                    },
                    startedEventId: {
                      type: 'integer'
                    }
                  }
                },
                activityTaskScheduledEventAttributes: {
                  type: 'structure',
                  members: {
                    activityType: {
                      type: 'structure',
                      members: {
                        name: {
                        },
                        version: {
                        }
                      }
                    },
                    activityId: {
                    },
                    input: {
                    },
                    control: {
                    },
                    scheduleToStartTimeout: {
                    },
                    scheduleToCloseTimeout: {
                    },
                    startToCloseTimeout: {
                    },
                    taskList: {
                      type: 'structure',
                      members: {
                        name: {
                        }
                      }
                    },
                    decisionTaskCompletedEventId: {
                      type: 'integer'
                    },
                    heartbeatTimeout: {
                    }
                  }
                },
                activityTaskStartedEventAttributes: {
                  type: 'structure',
                  members: {
                    identity: {
                    },
                    scheduledEventId: {
                      type: 'integer'
                    }
                  }
                },
                activityTaskCompletedEventAttributes: {
                  type: 'structure',
                  members: {
                    result: {
                    },
                    scheduledEventId: {
                      type: 'integer'
                    },
                    startedEventId: {
                      type: 'integer'
                    }
                  }
                },
                activityTaskFailedEventAttributes: {
                  type: 'structure',
                  members: {
                    reason: {
                    },
                    details: {
                    },
                    scheduledEventId: {
                      type: 'integer'
                    },
                    startedEventId: {
                      type: 'integer'
                    }
                  }
                },
                activityTaskTimedOutEventAttributes: {
                  type: 'structure',
                  members: {
                    timeoutType: {
                    },
                    scheduledEventId: {
                      type: 'integer'
                    },
                    startedEventId: {
                      type: 'integer'
                    },
                    details: {
                    }
                  }
                },
                activityTaskCanceledEventAttributes: {
                  type: 'structure',
                  members: {
                    details: {
                    },
                    scheduledEventId: {
                      type: 'integer'
                    },
                    startedEventId: {
                      type: 'integer'
                    },
                    latestCancelRequestedEventId: {
                      type: 'integer'
                    }
                  }
                },
                activityTaskCancelRequestedEventAttributes: {
                  type: 'structure',
                  members: {
                    decisionTaskCompletedEventId: {
                      type: 'integer'
                    },
                    activityId: {
                    }
                  }
                },
                workflowExecutionSignaledEventAttributes: {
                  type: 'structure',
                  members: {
                    signalName: {
                    },
                    input: {
                    },
                    externalWorkflowExecution: {
                      type: 'structure',
                      members: {
                        workflowId: {
                        },
                        runId: {
                        }
                      }
                    },
                    externalInitiatedEventId: {
                      type: 'integer'
                    }
                  }
                },
                markerRecordedEventAttributes: {
                  type: 'structure',
                  members: {
                    markerName: {
                    },
                    details: {
                    },
                    decisionTaskCompletedEventId: {
                      type: 'integer'
                    }
                  }
                },
                timerStartedEventAttributes: {
                  type: 'structure',
                  members: {
                    timerId: {
                    },
                    control: {
                    },
                    startToFireTimeout: {
                    },
                    decisionTaskCompletedEventId: {
                      type: 'integer'
                    }
                  }
                },
                timerFiredEventAttributes: {
                  type: 'structure',
                  members: {
                    timerId: {
                    },
                    startedEventId: {
                      type: 'integer'
                    }
                  }
                },
                timerCanceledEventAttributes: {
                  type: 'structure',
                  members: {
                    timerId: {
                    },
                    startedEventId: {
                      type: 'integer'
                    },
                    decisionTaskCompletedEventId: {
                      type: 'integer'
                    }
                  }
                },
                startChildWorkflowExecutionInitiatedEventAttributes: {
                  type: 'structure',
                  members: {
                    workflowId: {
                    },
                    workflowType: {
                      type: 'structure',
                      members: {
                        name: {
                        },
                        version: {
                        }
                      }
                    },
                    control: {
                    },
                    input: {
                    },
                    executionStartToCloseTimeout: {
                    },
                    taskList: {
                      type: 'structure',
                      members: {
                        name: {
                        }
                      }
                    },
                    decisionTaskCompletedEventId: {
                      type: 'integer'
                    },
                    childPolicy: {
                    },
                    taskStartToCloseTimeout: {
                    },
                    tagList: {
                      type: 'list'
                    }
                  }
                },
                childWorkflowExecutionStartedEventAttributes: {
                  type: 'structure',
                  members: {
                    workflowExecution: {
                      type: 'structure',
                      members: {
                        workflowId: {
                        },
                        runId: {
                        }
                      }
                    },
                    workflowType: {
                      type: 'structure',
                      members: {
                        name: {
                        },
                        version: {
                        }
                      }
                    },
                    initiatedEventId: {
                      type: 'integer'
                    }
                  }
                },
                childWorkflowExecutionCompletedEventAttributes: {
                  type: 'structure',
                  members: {
                    workflowExecution: {
                      type: 'structure',
                      members: {
                        workflowId: {
                        },
                        runId: {
                        }
                      }
                    },
                    workflowType: {
                      type: 'structure',
                      members: {
                        name: {
                        },
                        version: {
                        }
                      }
                    },
                    result: {
                    },
                    initiatedEventId: {
                      type: 'integer'
                    },
                    startedEventId: {
                      type: 'integer'
                    }
                  }
                },
                childWorkflowExecutionFailedEventAttributes: {
                  type: 'structure',
                  members: {
                    workflowExecution: {
                      type: 'structure',
                      members: {
                        workflowId: {
                        },
                        runId: {
                        }
                      }
                    },
                    workflowType: {
                      type: 'structure',
                      members: {
                        name: {
                        },
                        version: {
                        }
                      }
                    },
                    reason: {
                    },
                    details: {
                    },
                    initiatedEventId: {
                      type: 'integer'
                    },
                    startedEventId: {
                      type: 'integer'
                    }
                  }
                },
                childWorkflowExecutionTimedOutEventAttributes: {
                  type: 'structure',
                  members: {
                    workflowExecution: {
                      type: 'structure',
                      members: {
                        workflowId: {
                        },
                        runId: {
                        }
                      }
                    },
                    workflowType: {
                      type: 'structure',
                      members: {
                        name: {
                        },
                        version: {
                        }
                      }
                    },
                    timeoutType: {
                    },
                    initiatedEventId: {
                      type: 'integer'
                    },
                    startedEventId: {
                      type: 'integer'
                    }
                  }
                },
                childWorkflowExecutionCanceledEventAttributes: {
                  type: 'structure',
                  members: {
                    workflowExecution: {
                      type: 'structure',
                      members: {
                        workflowId: {
                        },
                        runId: {
                        }
                      }
                    },
                    workflowType: {
                      type: 'structure',
                      members: {
                        name: {
                        },
                        version: {
                        }
                      }
                    },
                    details: {
                    },
                    initiatedEventId: {
                      type: 'integer'
                    },
                    startedEventId: {
                      type: 'integer'
                    }
                  }
                },
                childWorkflowExecutionTerminatedEventAttributes: {
                  type: 'structure',
                  members: {
                    workflowExecution: {
                      type: 'structure',
                      members: {
                        workflowId: {
                        },
                        runId: {
                        }
                      }
                    },
                    workflowType: {
                      type: 'structure',
                      members: {
                        name: {
                        },
                        version: {
                        }
                      }
                    },
                    initiatedEventId: {
                      type: 'integer'
                    },
                    startedEventId: {
                      type: 'integer'
                    }
                  }
                },
                signalExternalWorkflowExecutionInitiatedEventAttributes: {
                  type: 'structure',
                  members: {
                    workflowId: {
                    },
                    runId: {
                    },
                    signalName: {
                    },
                    input: {
                    },
                    decisionTaskCompletedEventId: {
                      type: 'integer'
                    },
                    control: {
                    }
                  }
                },
                externalWorkflowExecutionSignaledEventAttributes: {
                  type: 'structure',
                  members: {
                    workflowExecution: {
                      type: 'structure',
                      members: {
                        workflowId: {
                        },
                        runId: {
                        }
                      }
                    },
                    initiatedEventId: {
                      type: 'integer'
                    }
                  }
                },
                signalExternalWorkflowExecutionFailedEventAttributes: {
                  type: 'structure',
                  members: {
                    workflowId: {
                    },
                    runId: {
                    },
                    cause: {
                    },
                    initiatedEventId: {
                      type: 'integer'
                    },
                    decisionTaskCompletedEventId: {
                      type: 'integer'
                    },
                    control: {
                    }
                  }
                },
                externalWorkflowExecutionCancelRequestedEventAttributes: {
                  type: 'structure',
                  members: {
                    workflowExecution: {
                      type: 'structure',
                      members: {
                        workflowId: {
                        },
                        runId: {
                        }
                      }
                    },
                    initiatedEventId: {
                      type: 'integer'
                    }
                  }
                },
                requestCancelExternalWorkflowExecutionInitiatedEventAttributes: {
                  type: 'structure',
                  members: {
                    workflowId: {
                    },
                    runId: {
                    },
                    decisionTaskCompletedEventId: {
                      type: 'integer'
                    },
                    control: {
                    }
                  }
                },
                requestCancelExternalWorkflowExecutionFailedEventAttributes: {
                  type: 'structure',
                  members: {
                    workflowId: {
                    },
                    runId: {
                    },
                    cause: {
                    },
                    initiatedEventId: {
                      type: 'integer'
                    },
                    decisionTaskCompletedEventId: {
                      type: 'integer'
                    },
                    control: {
                    }
                  }
                },
                scheduleActivityTaskFailedEventAttributes: {
                  type: 'structure',
                  members: {
                    activityType: {
                      type: 'structure',
                      members: {
                        name: {
                        },
                        version: {
                        }
                      }
                    },
                    activityId: {
                    },
                    cause: {
                    },
                    decisionTaskCompletedEventId: {
                      type: 'integer'
                    }
                  }
                },
                requestCancelActivityTaskFailedEventAttributes: {
                  type: 'structure',
                  members: {
                    activityId: {
                    },
                    cause: {
                    },
                    decisionTaskCompletedEventId: {
                      type: 'integer'
                    }
                  }
                },
                startTimerFailedEventAttributes: {
                  type: 'structure',
                  members: {
                    timerId: {
                    },
                    cause: {
                    },
                    decisionTaskCompletedEventId: {
                      type: 'integer'
                    }
                  }
                },
                cancelTimerFailedEventAttributes: {
                  type: 'structure',
                  members: {
                    timerId: {
                    },
                    cause: {
                    },
                    decisionTaskCompletedEventId: {
                      type: 'integer'
                    }
                  }
                },
                startChildWorkflowExecutionFailedEventAttributes: {
                  type: 'structure',
                  members: {
                    workflowType: {
                      type: 'structure',
                      members: {
                        name: {
                        },
                        version: {
                        }
                      }
                    },
                    cause: {
                    },
                    workflowId: {
                    },
                    initiatedEventId: {
                      type: 'integer'
                    },
                    decisionTaskCompletedEventId: {
                      type: 'integer'
                    },
                    control: {
                    }
                  }
                }
              }
            }
          },
          nextPageToken: {
          }
        }
      }
    },
    listActivityTypes: {
      name: 'ListActivityTypes',
      input: {
        type: 'structure',
        members: {
          domain: {
            required: true
          },
          name: {
          },
          registrationStatus: {
            required: true
          },
          nextPageToken: {
          },
          maximumPageSize: {
            type: 'integer'
          },
          reverseOrder: {
            type: 'boolean'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          typeInfos: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                activityType: {
                  type: 'structure',
                  members: {
                    name: {
                    },
                    version: {
                    }
                  }
                },
                status: {
                },
                description: {
                },
                creationDate: {
                  type: 'timestamp'
                },
                deprecationDate: {
                  type: 'timestamp'
                }
              }
            }
          },
          nextPageToken: {
          }
        }
      }
    },
    listClosedWorkflowExecutions: {
      name: 'ListClosedWorkflowExecutions',
      input: {
        type: 'structure',
        members: {
          domain: {
            required: true
          },
          startTimeFilter: {
            type: 'structure',
            members: {
              oldestDate: {
                type: 'timestamp',
                required: true
              },
              latestDate: {
                type: 'timestamp'
              }
            }
          },
          closeTimeFilter: {
            type: 'structure',
            members: {
              oldestDate: {
                type: 'timestamp',
                required: true
              },
              latestDate: {
                type: 'timestamp'
              }
            }
          },
          executionFilter: {
            type: 'structure',
            members: {
              workflowId: {
                required: true
              }
            }
          },
          closeStatusFilter: {
            type: 'structure',
            members: {
              status: {
                required: true
              }
            }
          },
          typeFilter: {
            type: 'structure',
            members: {
              name: {
                required: true
              },
              version: {
              }
            }
          },
          tagFilter: {
            type: 'structure',
            members: {
              tag: {
                required: true
              }
            }
          },
          nextPageToken: {
          },
          maximumPageSize: {
            type: 'integer'
          },
          reverseOrder: {
            type: 'boolean'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          executionInfos: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                execution: {
                  type: 'structure',
                  members: {
                    workflowId: {
                    },
                    runId: {
                    }
                  }
                },
                workflowType: {
                  type: 'structure',
                  members: {
                    name: {
                    },
                    version: {
                    }
                  }
                },
                startTimestamp: {
                  type: 'timestamp'
                },
                closeTimestamp: {
                  type: 'timestamp'
                },
                executionStatus: {
                },
                closeStatus: {
                },
                parent: {
                  type: 'structure',
                  members: {
                    workflowId: {
                    },
                    runId: {
                    }
                  }
                },
                tagList: {
                  type: 'list'
                },
                cancelRequested: {
                  type: 'boolean'
                }
              }
            }
          },
          nextPageToken: {
          }
        }
      }
    },
    listDomains: {
      name: 'ListDomains',
      input: {
        type: 'structure',
        members: {
          nextPageToken: {
          },
          registrationStatus: {
            required: true
          },
          maximumPageSize: {
            type: 'integer'
          },
          reverseOrder: {
            type: 'boolean'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          domainInfos: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                name: {
                },
                status: {
                },
                description: {
                }
              }
            }
          },
          nextPageToken: {
          }
        }
      }
    },
    listOpenWorkflowExecutions: {
      name: 'ListOpenWorkflowExecutions',
      input: {
        type: 'structure',
        members: {
          domain: {
            required: true
          },
          startTimeFilter: {
            type: 'structure',
            members: {
              oldestDate: {
                type: 'timestamp',
                required: true
              },
              latestDate: {
                type: 'timestamp'
              }
            },
            required: true
          },
          typeFilter: {
            type: 'structure',
            members: {
              name: {
                required: true
              },
              version: {
              }
            }
          },
          tagFilter: {
            type: 'structure',
            members: {
              tag: {
                required: true
              }
            }
          },
          nextPageToken: {
          },
          maximumPageSize: {
            type: 'integer'
          },
          reverseOrder: {
            type: 'boolean'
          },
          executionFilter: {
            type: 'structure',
            members: {
              workflowId: {
                required: true
              }
            }
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          executionInfos: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                execution: {
                  type: 'structure',
                  members: {
                    workflowId: {
                    },
                    runId: {
                    }
                  }
                },
                workflowType: {
                  type: 'structure',
                  members: {
                    name: {
                    },
                    version: {
                    }
                  }
                },
                startTimestamp: {
                  type: 'timestamp'
                },
                closeTimestamp: {
                  type: 'timestamp'
                },
                executionStatus: {
                },
                closeStatus: {
                },
                parent: {
                  type: 'structure',
                  members: {
                    workflowId: {
                    },
                    runId: {
                    }
                  }
                },
                tagList: {
                  type: 'list'
                },
                cancelRequested: {
                  type: 'boolean'
                }
              }
            }
          },
          nextPageToken: {
          }
        }
      }
    },
    listWorkflowTypes: {
      name: 'ListWorkflowTypes',
      input: {
        type: 'structure',
        members: {
          domain: {
            required: true
          },
          name: {
          },
          registrationStatus: {
            required: true
          },
          nextPageToken: {
          },
          maximumPageSize: {
            type: 'integer'
          },
          reverseOrder: {
            type: 'boolean'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          typeInfos: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                workflowType: {
                  type: 'structure',
                  members: {
                    name: {
                    },
                    version: {
                    }
                  }
                },
                status: {
                },
                description: {
                },
                creationDate: {
                  type: 'timestamp'
                },
                deprecationDate: {
                  type: 'timestamp'
                }
              }
            }
          },
          nextPageToken: {
          }
        }
      }
    },
    pollForActivityTask: {
      name: 'PollForActivityTask',
      input: {
        type: 'structure',
        members: {
          domain: {
            required: true
          },
          taskList: {
            type: 'structure',
            members: {
              name: {
                required: true
              }
            },
            required: true
          },
          identity: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          taskToken: {
          },
          activityId: {
          },
          startedEventId: {
            type: 'integer'
          },
          workflowExecution: {
            type: 'structure',
            members: {
              workflowId: {
              },
              runId: {
              }
            }
          },
          activityType: {
            type: 'structure',
            members: {
              name: {
              },
              version: {
              }
            }
          },
          input: {
          }
        }
      }
    },
    pollForDecisionTask: {
      name: 'PollForDecisionTask',
      input: {
        type: 'structure',
        members: {
          domain: {
            required: true
          },
          taskList: {
            type: 'structure',
            members: {
              name: {
                required: true
              }
            },
            required: true
          },
          identity: {
          },
          nextPageToken: {
          },
          maximumPageSize: {
            type: 'integer'
          },
          reverseOrder: {
            type: 'boolean'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          taskToken: {
          },
          startedEventId: {
            type: 'integer'
          },
          workflowExecution: {
            type: 'structure',
            members: {
              workflowId: {
              },
              runId: {
              }
            }
          },
          workflowType: {
            type: 'structure',
            members: {
              name: {
              },
              version: {
              }
            }
          },
          events: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                eventTimestamp: {
                  type: 'timestamp'
                },
                eventType: {
                },
                eventId: {
                  type: 'integer'
                },
                workflowExecutionStartedEventAttributes: {
                  type: 'structure',
                  members: {
                    input: {
                    },
                    executionStartToCloseTimeout: {
                    },
                    taskStartToCloseTimeout: {
                    },
                    childPolicy: {
                    },
                    taskList: {
                      type: 'structure',
                      members: {
                        name: {
                        }
                      }
                    },
                    workflowType: {
                      type: 'structure',
                      members: {
                        name: {
                        },
                        version: {
                        }
                      }
                    },
                    tagList: {
                      type: 'list'
                    },
                    continuedExecutionRunId: {
                    },
                    parentWorkflowExecution: {
                      type: 'structure',
                      members: {
                        workflowId: {
                        },
                        runId: {
                        }
                      }
                    },
                    parentInitiatedEventId: {
                      type: 'integer'
                    }
                  }
                },
                workflowExecutionCompletedEventAttributes: {
                  type: 'structure',
                  members: {
                    result: {
                    },
                    decisionTaskCompletedEventId: {
                      type: 'integer'
                    }
                  }
                },
                completeWorkflowExecutionFailedEventAttributes: {
                  type: 'structure',
                  members: {
                    cause: {
                    },
                    decisionTaskCompletedEventId: {
                      type: 'integer'
                    }
                  }
                },
                workflowExecutionFailedEventAttributes: {
                  type: 'structure',
                  members: {
                    reason: {
                    },
                    details: {
                    },
                    decisionTaskCompletedEventId: {
                      type: 'integer'
                    }
                  }
                },
                failWorkflowExecutionFailedEventAttributes: {
                  type: 'structure',
                  members: {
                    cause: {
                    },
                    decisionTaskCompletedEventId: {
                      type: 'integer'
                    }
                  }
                },
                workflowExecutionTimedOutEventAttributes: {
                  type: 'structure',
                  members: {
                    timeoutType: {
                    },
                    childPolicy: {
                    }
                  }
                },
                workflowExecutionCanceledEventAttributes: {
                  type: 'structure',
                  members: {
                    details: {
                    },
                    decisionTaskCompletedEventId: {
                      type: 'integer'
                    }
                  }
                },
                cancelWorkflowExecutionFailedEventAttributes: {
                  type: 'structure',
                  members: {
                    cause: {
                    },
                    decisionTaskCompletedEventId: {
                      type: 'integer'
                    }
                  }
                },
                workflowExecutionContinuedAsNewEventAttributes: {
                  type: 'structure',
                  members: {
                    input: {
                    },
                    decisionTaskCompletedEventId: {
                      type: 'integer'
                    },
                    newExecutionRunId: {
                    },
                    executionStartToCloseTimeout: {
                    },
                    taskList: {
                      type: 'structure',
                      members: {
                        name: {
                        }
                      }
                    },
                    taskStartToCloseTimeout: {
                    },
                    childPolicy: {
                    },
                    tagList: {
                      type: 'list'
                    },
                    workflowType: {
                      type: 'structure',
                      members: {
                        name: {
                        },
                        version: {
                        }
                      }
                    }
                  }
                },
                continueAsNewWorkflowExecutionFailedEventAttributes: {
                  type: 'structure',
                  members: {
                    cause: {
                    },
                    decisionTaskCompletedEventId: {
                      type: 'integer'
                    }
                  }
                },
                workflowExecutionTerminatedEventAttributes: {
                  type: 'structure',
                  members: {
                    reason: {
                    },
                    details: {
                    },
                    childPolicy: {
                    },
                    cause: {
                    }
                  }
                },
                workflowExecutionCancelRequestedEventAttributes: {
                  type: 'structure',
                  members: {
                    externalWorkflowExecution: {
                      type: 'structure',
                      members: {
                        workflowId: {
                        },
                        runId: {
                        }
                      }
                    },
                    externalInitiatedEventId: {
                      type: 'integer'
                    },
                    cause: {
                    }
                  }
                },
                decisionTaskScheduledEventAttributes: {
                  type: 'structure',
                  members: {
                    taskList: {
                      type: 'structure',
                      members: {
                        name: {
                        }
                      }
                    },
                    startToCloseTimeout: {
                    }
                  }
                },
                decisionTaskStartedEventAttributes: {
                  type: 'structure',
                  members: {
                    identity: {
                    },
                    scheduledEventId: {
                      type: 'integer'
                    }
                  }
                },
                decisionTaskCompletedEventAttributes: {
                  type: 'structure',
                  members: {
                    executionContext: {
                    },
                    scheduledEventId: {
                      type: 'integer'
                    },
                    startedEventId: {
                      type: 'integer'
                    }
                  }
                },
                decisionTaskTimedOutEventAttributes: {
                  type: 'structure',
                  members: {
                    timeoutType: {
                    },
                    scheduledEventId: {
                      type: 'integer'
                    },
                    startedEventId: {
                      type: 'integer'
                    }
                  }
                },
                activityTaskScheduledEventAttributes: {
                  type: 'structure',
                  members: {
                    activityType: {
                      type: 'structure',
                      members: {
                        name: {
                        },
                        version: {
                        }
                      }
                    },
                    activityId: {
                    },
                    input: {
                    },
                    control: {
                    },
                    scheduleToStartTimeout: {
                    },
                    scheduleToCloseTimeout: {
                    },
                    startToCloseTimeout: {
                    },
                    taskList: {
                      type: 'structure',
                      members: {
                        name: {
                        }
                      }
                    },
                    decisionTaskCompletedEventId: {
                      type: 'integer'
                    },
                    heartbeatTimeout: {
                    }
                  }
                },
                activityTaskStartedEventAttributes: {
                  type: 'structure',
                  members: {
                    identity: {
                    },
                    scheduledEventId: {
                      type: 'integer'
                    }
                  }
                },
                activityTaskCompletedEventAttributes: {
                  type: 'structure',
                  members: {
                    result: {
                    },
                    scheduledEventId: {
                      type: 'integer'
                    },
                    startedEventId: {
                      type: 'integer'
                    }
                  }
                },
                activityTaskFailedEventAttributes: {
                  type: 'structure',
                  members: {
                    reason: {
                    },
                    details: {
                    },
                    scheduledEventId: {
                      type: 'integer'
                    },
                    startedEventId: {
                      type: 'integer'
                    }
                  }
                },
                activityTaskTimedOutEventAttributes: {
                  type: 'structure',
                  members: {
                    timeoutType: {
                    },
                    scheduledEventId: {
                      type: 'integer'
                    },
                    startedEventId: {
                      type: 'integer'
                    },
                    details: {
                    }
                  }
                },
                activityTaskCanceledEventAttributes: {
                  type: 'structure',
                  members: {
                    details: {
                    },
                    scheduledEventId: {
                      type: 'integer'
                    },
                    startedEventId: {
                      type: 'integer'
                    },
                    latestCancelRequestedEventId: {
                      type: 'integer'
                    }
                  }
                },
                activityTaskCancelRequestedEventAttributes: {
                  type: 'structure',
                  members: {
                    decisionTaskCompletedEventId: {
                      type: 'integer'
                    },
                    activityId: {
                    }
                  }
                },
                workflowExecutionSignaledEventAttributes: {
                  type: 'structure',
                  members: {
                    signalName: {
                    },
                    input: {
                    },
                    externalWorkflowExecution: {
                      type: 'structure',
                      members: {
                        workflowId: {
                        },
                        runId: {
                        }
                      }
                    },
                    externalInitiatedEventId: {
                      type: 'integer'
                    }
                  }
                },
                markerRecordedEventAttributes: {
                  type: 'structure',
                  members: {
                    markerName: {
                    },
                    details: {
                    },
                    decisionTaskCompletedEventId: {
                      type: 'integer'
                    }
                  }
                },
                timerStartedEventAttributes: {
                  type: 'structure',
                  members: {
                    timerId: {
                    },
                    control: {
                    },
                    startToFireTimeout: {
                    },
                    decisionTaskCompletedEventId: {
                      type: 'integer'
                    }
                  }
                },
                timerFiredEventAttributes: {
                  type: 'structure',
                  members: {
                    timerId: {
                    },
                    startedEventId: {
                      type: 'integer'
                    }
                  }
                },
                timerCanceledEventAttributes: {
                  type: 'structure',
                  members: {
                    timerId: {
                    },
                    startedEventId: {
                      type: 'integer'
                    },
                    decisionTaskCompletedEventId: {
                      type: 'integer'
                    }
                  }
                },
                startChildWorkflowExecutionInitiatedEventAttributes: {
                  type: 'structure',
                  members: {
                    workflowId: {
                    },
                    workflowType: {
                      type: 'structure',
                      members: {
                        name: {
                        },
                        version: {
                        }
                      }
                    },
                    control: {
                    },
                    input: {
                    },
                    executionStartToCloseTimeout: {
                    },
                    taskList: {
                      type: 'structure',
                      members: {
                        name: {
                        }
                      }
                    },
                    decisionTaskCompletedEventId: {
                      type: 'integer'
                    },
                    childPolicy: {
                    },
                    taskStartToCloseTimeout: {
                    },
                    tagList: {
                      type: 'list'
                    }
                  }
                },
                childWorkflowExecutionStartedEventAttributes: {
                  type: 'structure',
                  members: {
                    workflowExecution: {
                      type: 'structure',
                      members: {
                        workflowId: {
                        },
                        runId: {
                        }
                      }
                    },
                    workflowType: {
                      type: 'structure',
                      members: {
                        name: {
                        },
                        version: {
                        }
                      }
                    },
                    initiatedEventId: {
                      type: 'integer'
                    }
                  }
                },
                childWorkflowExecutionCompletedEventAttributes: {
                  type: 'structure',
                  members: {
                    workflowExecution: {
                      type: 'structure',
                      members: {
                        workflowId: {
                        },
                        runId: {
                        }
                      }
                    },
                    workflowType: {
                      type: 'structure',
                      members: {
                        name: {
                        },
                        version: {
                        }
                      }
                    },
                    result: {
                    },
                    initiatedEventId: {
                      type: 'integer'
                    },
                    startedEventId: {
                      type: 'integer'
                    }
                  }
                },
                childWorkflowExecutionFailedEventAttributes: {
                  type: 'structure',
                  members: {
                    workflowExecution: {
                      type: 'structure',
                      members: {
                        workflowId: {
                        },
                        runId: {
                        }
                      }
                    },
                    workflowType: {
                      type: 'structure',
                      members: {
                        name: {
                        },
                        version: {
                        }
                      }
                    },
                    reason: {
                    },
                    details: {
                    },
                    initiatedEventId: {
                      type: 'integer'
                    },
                    startedEventId: {
                      type: 'integer'
                    }
                  }
                },
                childWorkflowExecutionTimedOutEventAttributes: {
                  type: 'structure',
                  members: {
                    workflowExecution: {
                      type: 'structure',
                      members: {
                        workflowId: {
                        },
                        runId: {
                        }
                      }
                    },
                    workflowType: {
                      type: 'structure',
                      members: {
                        name: {
                        },
                        version: {
                        }
                      }
                    },
                    timeoutType: {
                    },
                    initiatedEventId: {
                      type: 'integer'
                    },
                    startedEventId: {
                      type: 'integer'
                    }
                  }
                },
                childWorkflowExecutionCanceledEventAttributes: {
                  type: 'structure',
                  members: {
                    workflowExecution: {
                      type: 'structure',
                      members: {
                        workflowId: {
                        },
                        runId: {
                        }
                      }
                    },
                    workflowType: {
                      type: 'structure',
                      members: {
                        name: {
                        },
                        version: {
                        }
                      }
                    },
                    details: {
                    },
                    initiatedEventId: {
                      type: 'integer'
                    },
                    startedEventId: {
                      type: 'integer'
                    }
                  }
                },
                childWorkflowExecutionTerminatedEventAttributes: {
                  type: 'structure',
                  members: {
                    workflowExecution: {
                      type: 'structure',
                      members: {
                        workflowId: {
                        },
                        runId: {
                        }
                      }
                    },
                    workflowType: {
                      type: 'structure',
                      members: {
                        name: {
                        },
                        version: {
                        }
                      }
                    },
                    initiatedEventId: {
                      type: 'integer'
                    },
                    startedEventId: {
                      type: 'integer'
                    }
                  }
                },
                signalExternalWorkflowExecutionInitiatedEventAttributes: {
                  type: 'structure',
                  members: {
                    workflowId: {
                    },
                    runId: {
                    },
                    signalName: {
                    },
                    input: {
                    },
                    decisionTaskCompletedEventId: {
                      type: 'integer'
                    },
                    control: {
                    }
                  }
                },
                externalWorkflowExecutionSignaledEventAttributes: {
                  type: 'structure',
                  members: {
                    workflowExecution: {
                      type: 'structure',
                      members: {
                        workflowId: {
                        },
                        runId: {
                        }
                      }
                    },
                    initiatedEventId: {
                      type: 'integer'
                    }
                  }
                },
                signalExternalWorkflowExecutionFailedEventAttributes: {
                  type: 'structure',
                  members: {
                    workflowId: {
                    },
                    runId: {
                    },
                    cause: {
                    },
                    initiatedEventId: {
                      type: 'integer'
                    },
                    decisionTaskCompletedEventId: {
                      type: 'integer'
                    },
                    control: {
                    }
                  }
                },
                externalWorkflowExecutionCancelRequestedEventAttributes: {
                  type: 'structure',
                  members: {
                    workflowExecution: {
                      type: 'structure',
                      members: {
                        workflowId: {
                        },
                        runId: {
                        }
                      }
                    },
                    initiatedEventId: {
                      type: 'integer'
                    }
                  }
                },
                requestCancelExternalWorkflowExecutionInitiatedEventAttributes: {
                  type: 'structure',
                  members: {
                    workflowId: {
                    },
                    runId: {
                    },
                    decisionTaskCompletedEventId: {
                      type: 'integer'
                    },
                    control: {
                    }
                  }
                },
                requestCancelExternalWorkflowExecutionFailedEventAttributes: {
                  type: 'structure',
                  members: {
                    workflowId: {
                    },
                    runId: {
                    },
                    cause: {
                    },
                    initiatedEventId: {
                      type: 'integer'
                    },
                    decisionTaskCompletedEventId: {
                      type: 'integer'
                    },
                    control: {
                    }
                  }
                },
                scheduleActivityTaskFailedEventAttributes: {
                  type: 'structure',
                  members: {
                    activityType: {
                      type: 'structure',
                      members: {
                        name: {
                        },
                        version: {
                        }
                      }
                    },
                    activityId: {
                    },
                    cause: {
                    },
                    decisionTaskCompletedEventId: {
                      type: 'integer'
                    }
                  }
                },
                requestCancelActivityTaskFailedEventAttributes: {
                  type: 'structure',
                  members: {
                    activityId: {
                    },
                    cause: {
                    },
                    decisionTaskCompletedEventId: {
                      type: 'integer'
                    }
                  }
                },
                startTimerFailedEventAttributes: {
                  type: 'structure',
                  members: {
                    timerId: {
                    },
                    cause: {
                    },
                    decisionTaskCompletedEventId: {
                      type: 'integer'
                    }
                  }
                },
                cancelTimerFailedEventAttributes: {
                  type: 'structure',
                  members: {
                    timerId: {
                    },
                    cause: {
                    },
                    decisionTaskCompletedEventId: {
                      type: 'integer'
                    }
                  }
                },
                startChildWorkflowExecutionFailedEventAttributes: {
                  type: 'structure',
                  members: {
                    workflowType: {
                      type: 'structure',
                      members: {
                        name: {
                        },
                        version: {
                        }
                      }
                    },
                    cause: {
                    },
                    workflowId: {
                    },
                    initiatedEventId: {
                      type: 'integer'
                    },
                    decisionTaskCompletedEventId: {
                      type: 'integer'
                    },
                    control: {
                    }
                  }
                }
              }
            }
          },
          nextPageToken: {
          },
          previousStartedEventId: {
            type: 'integer'
          }
        }
      }
    },
    recordActivityTaskHeartbeat: {
      name: 'RecordActivityTaskHeartbeat',
      input: {
        type: 'structure',
        members: {
          taskToken: {
            required: true
          },
          details: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          cancelRequested: {
            type: 'boolean'
          }
        }
      }
    },
    registerActivityType: {
      name: 'RegisterActivityType',
      input: {
        type: 'structure',
        members: {
          domain: {
            required: true
          },
          name: {
            required: true
          },
          version: {
            required: true
          },
          description: {
          },
          defaultTaskStartToCloseTimeout: {
          },
          defaultTaskHeartbeatTimeout: {
          },
          defaultTaskList: {
            type: 'structure',
            members: {
              name: {
                required: true
              }
            }
          },
          defaultTaskScheduleToStartTimeout: {
          },
          defaultTaskScheduleToCloseTimeout: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    registerDomain: {
      name: 'RegisterDomain',
      input: {
        type: 'structure',
        members: {
          name: {
            required: true
          },
          description: {
          },
          workflowExecutionRetentionPeriodInDays: {
            required: true
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    registerWorkflowType: {
      name: 'RegisterWorkflowType',
      input: {
        type: 'structure',
        members: {
          domain: {
            required: true
          },
          name: {
            required: true
          },
          version: {
            required: true
          },
          description: {
          },
          defaultTaskStartToCloseTimeout: {
          },
          defaultExecutionStartToCloseTimeout: {
          },
          defaultTaskList: {
            type: 'structure',
            members: {
              name: {
                required: true
              }
            }
          },
          defaultChildPolicy: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    requestCancelWorkflowExecution: {
      name: 'RequestCancelWorkflowExecution',
      input: {
        type: 'structure',
        members: {
          domain: {
            required: true
          },
          workflowId: {
            required: true
          },
          runId: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    respondActivityTaskCanceled: {
      name: 'RespondActivityTaskCanceled',
      input: {
        type: 'structure',
        members: {
          taskToken: {
            required: true
          },
          details: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    respondActivityTaskCompleted: {
      name: 'RespondActivityTaskCompleted',
      input: {
        type: 'structure',
        members: {
          taskToken: {
            required: true
          },
          result: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    respondActivityTaskFailed: {
      name: 'RespondActivityTaskFailed',
      input: {
        type: 'structure',
        members: {
          taskToken: {
            required: true
          },
          reason: {
          },
          details: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    respondDecisionTaskCompleted: {
      name: 'RespondDecisionTaskCompleted',
      input: {
        type: 'structure',
        members: {
          taskToken: {
            required: true
          },
          decisions: {
            type: 'list',
            members: {
              type: 'structure',
              members: {
                decisionType: {
                  required: true
                },
                scheduleActivityTaskDecisionAttributes: {
                  type: 'structure',
                  members: {
                    activityType: {
                      type: 'structure',
                      members: {
                        name: {
                          required: true
                        },
                        version: {
                          required: true
                        }
                      },
                      required: true
                    },
                    activityId: {
                      required: true
                    },
                    control: {
                    },
                    input: {
                    },
                    scheduleToCloseTimeout: {
                    },
                    taskList: {
                      type: 'structure',
                      members: {
                        name: {
                          required: true
                        }
                      }
                    },
                    scheduleToStartTimeout: {
                    },
                    startToCloseTimeout: {
                    },
                    heartbeatTimeout: {
                    }
                  }
                },
                requestCancelActivityTaskDecisionAttributes: {
                  type: 'structure',
                  members: {
                    activityId: {
                      required: true
                    }
                  }
                },
                completeWorkflowExecutionDecisionAttributes: {
                  type: 'structure',
                  members: {
                    result: {
                    }
                  }
                },
                failWorkflowExecutionDecisionAttributes: {
                  type: 'structure',
                  members: {
                    reason: {
                    },
                    details: {
                    }
                  }
                },
                cancelWorkflowExecutionDecisionAttributes: {
                  type: 'structure',
                  members: {
                    details: {
                    }
                  }
                },
                continueAsNewWorkflowExecutionDecisionAttributes: {
                  type: 'structure',
                  members: {
                    input: {
                    },
                    executionStartToCloseTimeout: {
                    },
                    taskList: {
                      type: 'structure',
                      members: {
                        name: {
                          required: true
                        }
                      }
                    },
                    taskStartToCloseTimeout: {
                    },
                    childPolicy: {
                    },
                    tagList: {
                      type: 'list'
                    },
                    workflowTypeVersion: {
                    }
                  }
                },
                recordMarkerDecisionAttributes: {
                  type: 'structure',
                  members: {
                    markerName: {
                      required: true
                    },
                    details: {
                    }
                  }
                },
                startTimerDecisionAttributes: {
                  type: 'structure',
                  members: {
                    timerId: {
                      required: true
                    },
                    control: {
                    },
                    startToFireTimeout: {
                      required: true
                    }
                  }
                },
                cancelTimerDecisionAttributes: {
                  type: 'structure',
                  members: {
                    timerId: {
                      required: true
                    }
                  }
                },
                signalExternalWorkflowExecutionDecisionAttributes: {
                  type: 'structure',
                  members: {
                    workflowId: {
                      required: true
                    },
                    runId: {
                    },
                    signalName: {
                      required: true
                    },
                    input: {
                    },
                    control: {
                    }
                  }
                },
                requestCancelExternalWorkflowExecutionDecisionAttributes: {
                  type: 'structure',
                  members: {
                    workflowId: {
                      required: true
                    },
                    runId: {
                    },
                    control: {
                    }
                  }
                },
                startChildWorkflowExecutionDecisionAttributes: {
                  type: 'structure',
                  members: {
                    workflowType: {
                      type: 'structure',
                      members: {
                        name: {
                          required: true
                        },
                        version: {
                          required: true
                        }
                      },
                      required: true
                    },
                    workflowId: {
                      required: true
                    },
                    control: {
                    },
                    input: {
                    },
                    executionStartToCloseTimeout: {
                    },
                    taskList: {
                      type: 'structure',
                      members: {
                        name: {
                          required: true
                        }
                      }
                    },
                    taskStartToCloseTimeout: {
                    },
                    childPolicy: {
                    },
                    tagList: {
                      type: 'list'
                    }
                  }
                }
              }
            }
          },
          executionContext: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    signalWorkflowExecution: {
      name: 'SignalWorkflowExecution',
      input: {
        type: 'structure',
        members: {
          domain: {
            required: true
          },
          workflowId: {
            required: true
          },
          runId: {
          },
          signalName: {
            required: true
          },
          input: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    },
    startWorkflowExecution: {
      name: 'StartWorkflowExecution',
      input: {
        type: 'structure',
        members: {
          domain: {
            required: true
          },
          workflowId: {
            required: true
          },
          workflowType: {
            type: 'structure',
            members: {
              name: {
                required: true
              },
              version: {
                required: true
              }
            },
            required: true
          },
          taskList: {
            type: 'structure',
            members: {
              name: {
                required: true
              }
            }
          },
          input: {
          },
          executionStartToCloseTimeout: {
          },
          tagList: {
            type: 'list'
          },
          taskStartToCloseTimeout: {
          },
          childPolicy: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          runId: {
          }
        }
      }
    },
    terminateWorkflowExecution: {
      name: 'TerminateWorkflowExecution',
      input: {
        type: 'structure',
        members: {
          domain: {
            required: true
          },
          workflowId: {
            required: true
          },
          runId: {
          },
          reason: {
          },
          details: {
          },
          childPolicy: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
        }
      }
    }
  }
};

},{}],70:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

module.exports = {
  format: 'query',
  apiVersion: '2011-06-15',
  endpointPrefix: 'sts',
  globalEndpoint: 'sts.amazonaws.com',
  resultWrapped: true,
  serviceAbbreviation: 'AWS STS',
  serviceFullName: 'AWS Security Token Service',
  signatureVersion: 'v4',
  timestampFormat: 'iso8601',
  operations: {
    assumeRole: {
      name: 'AssumeRole',
      input: {
        type: 'structure',
        members: {
          RoleArn: {
            required: true
          },
          RoleSessionName: {
            required: true
          },
          Policy: {
          },
          DurationSeconds: {
            type: 'integer'
          },
          ExternalId: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Credentials: {
            type: 'structure',
            members: {
              AccessKeyId: {
              },
              SecretAccessKey: {
              },
              SessionToken: {
              },
              Expiration: {
                type: 'timestamp'
              }
            }
          },
          AssumedRoleUser: {
            type: 'structure',
            members: {
              AssumedRoleId: {
              },
              Arn: {
              }
            }
          },
          PackedPolicySize: {
            type: 'integer'
          }
        }
      }
    },
    getFederationToken: {
      name: 'GetFederationToken',
      input: {
        type: 'structure',
        members: {
          Name: {
            required: true
          },
          Policy: {
          },
          DurationSeconds: {
            type: 'integer'
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Credentials: {
            type: 'structure',
            members: {
              AccessKeyId: {
              },
              SecretAccessKey: {
              },
              SessionToken: {
              },
              Expiration: {
                type: 'timestamp'
              }
            }
          },
          FederatedUser: {
            type: 'structure',
            members: {
              FederatedUserId: {
              },
              Arn: {
              }
            }
          },
          PackedPolicySize: {
            type: 'integer'
          }
        }
      }
    },
    getSessionToken: {
      name: 'GetSessionToken',
      input: {
        type: 'structure',
        members: {
          DurationSeconds: {
            type: 'integer'
          },
          SerialNumber: {
          },
          TokenCode: {
          }
        }
      },
      output: {
        type: 'structure',
        members: {
          Credentials: {
            type: 'structure',
            members: {
              AccessKeyId: {
              },
              SecretAccessKey: {
              },
              SessionToken: {
              },
              Expiration: {
                type: 'timestamp'
              }
            }
          }
        }
      }
    }
  }
};

},{}],71:[function(require,module,exports){// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            if (ev.source === window && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

},{}],32:[function(require,module,exports){(function(process){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('./core');
var cryptoLib = require('crypto');
var Buffer = require('buffer').Buffer;

/**
 * A set of utility methods for use with the AWS SDK.
 *
 * @!attribute abort
 *   Return this value from an iterator function ({each} or {arrayEach})
 *   to break out of the iteration.
 *   @example Breaking out of an iterator function
 *     AWS.util.each({a: 1, b: 2, c: 3}, function(key, value) {
 *       if (key == 'b') return AWS.util.abort;
 *     });
 *   @see each
 *   @see arrayEach
 * @api private
 */
AWS.util = {

  engine: function enc() {
    return process.platform + '/' + process.version;
  },

  userAgent: function userAgent() {
    return 'aws-sdk-nodejs/' + AWS.VERSION + ' ' + AWS.util.engine();
  },

  uriEscape: function uriEscape(string) {
    /*jshint undef:false */
    var output = encodeURIComponent(string);
    output = output.replace(/[^A-Za-z0-9_.~\-%]+/g, escape);

    // AWS percent-encodes some extra non-standard characters in a URI
    output = output.replace(/[*]/g, function(ch) {
      return '%' + ch.charCodeAt(0).toString(16).toUpperCase();
    });

    return output;
  },

  uriEscapePath: function uriEscapePath(string) {
    var parts = [];
    AWS.util.arrayEach(string.split('/'), function (part) {
      parts.push(AWS.util.uriEscape(part));
    });
    return parts.join('/');
  },

  urlParse: function urlParse(url) {
    return require('url').parse(url);
  },

  readFileSync: function readFileSync(path) {
    if (typeof window !== 'undefined') return null;
    return require('fs').readFileSync(path, 'utf-8');
  },

  base64: {

    encode: function encode64(string) {
      return new Buffer(string).toString('base64');
    },

    decode: function decode64(string) {
      return new Buffer(string, 'base64').toString();
    }

  },

  buffer: {
    /**
     * Concatenates a list of Buffer objects.
     */
    concat: function(buffers) {
      var length = 0,
          offset = 0,
          buffer = null, i;

      for (i = 0; i < buffers.length; i++) {
        length += buffers[i].length;
      }

      buffer = new Buffer(length);

      for (i = 0; i < buffers.length; i++) {
        buffers[i].copy(buffer, offset);
        offset += buffers[i].length;
      }

      return buffer;
    }
  },

  string: {
    byteLength: function byteLength(string) {
      if (string === null || string === undefined) return 0;
      if (typeof string === 'string') string = new Buffer(string);

      if (string.length !== undefined) {
        return string.length;
      } else if (string.path !== undefined) {
        return require('fs').lstatSync(string.path).size;
      } else {
        throw AWS.util.error(new Error(), {
          message: 'Cannot determine length of ' + string, object: string
        });
      }
    }
  },

  /**
   * Date and time utility functions.
   */
  date: {

    /**
     * @return [Date] the current JavaScript date object. Since all
     *   AWS services rely on this date object, you can override
     *   this function to provide a special time value to AWS service
     *   requests.
     */
    getDate: function getDate() { return new Date(); },

    /**
     * @return [String] the date in ISO-8601 format
     */
    iso8601: function iso8601(date) {
      if (date === undefined) { date = AWS.util.date.getDate(); }
      return date.toISOString();
    },

    /**
     * @return [String] the date in RFC 822 format
     */
    rfc822: function rfc822(date) {
      if (date === undefined) { date = AWS.util.date.getDate(); }
      return date.toUTCString();
    },

    /**
     * @return [Integer] the UNIX timestamp value for the current time
     */
    unixTimestamp: function unixTimestamp(date) {
      if (date === undefined) { date = AWS.util.date.getDate(); }
      return date.getTime() / 1000;
    }

  },

  crypto: {
    crc32Table: [
     0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419,
     0x706AF48F, 0xE963A535, 0x9E6495A3, 0x0EDB8832, 0x79DCB8A4,
     0xE0D5E91E, 0x97D2D988, 0x09B64C2B, 0x7EB17CBD, 0xE7B82D07,
     0x90BF1D91, 0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE,
     0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7, 0x136C9856,
     0x646BA8C0, 0xFD62F97A, 0x8A65C9EC, 0x14015C4F, 0x63066CD9,
     0xFA0F3D63, 0x8D080DF5, 0x3B6E20C8, 0x4C69105E, 0xD56041E4,
     0xA2677172, 0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B,
     0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940, 0x32D86CE3,
     0x45DF5C75, 0xDCD60DCF, 0xABD13D59, 0x26D930AC, 0x51DE003A,
     0xC8D75180, 0xBFD06116, 0x21B4F4B5, 0x56B3C423, 0xCFBA9599,
     0xB8BDA50F, 0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924,
     0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D, 0x76DC4190,
     0x01DB7106, 0x98D220BC, 0xEFD5102A, 0x71B18589, 0x06B6B51F,
     0x9FBFE4A5, 0xE8B8D433, 0x7807C9A2, 0x0F00F934, 0x9609A88E,
     0xE10E9818, 0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01,
     0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E, 0x6C0695ED,
     0x1B01A57B, 0x8208F4C1, 0xF50FC457, 0x65B0D9C6, 0x12B7E950,
     0x8BBEB8EA, 0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3,
     0xFBD44C65, 0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2,
     0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB, 0x4369E96A,
     0x346ED9FC, 0xAD678846, 0xDA60B8D0, 0x44042D73, 0x33031DE5,
     0xAA0A4C5F, 0xDD0D7CC9, 0x5005713C, 0x270241AA, 0xBE0B1010,
     0xC90C2086, 0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F,
     0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17,
     0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD, 0xEDB88320, 0x9ABFB3B6,
     0x03B6E20C, 0x74B1D29A, 0xEAD54739, 0x9DD277AF, 0x04DB2615,
     0x73DC1683, 0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8,
     0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1, 0xF00F9344,
     0x8708A3D2, 0x1E01F268, 0x6906C2FE, 0xF762575D, 0x806567CB,
     0x196C3671, 0x6E6B06E7, 0xFED41B76, 0x89D32BE0, 0x10DA7A5A,
     0x67DD4ACC, 0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5,
     0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1,
     0xA6BC5767, 0x3FB506DD, 0x48B2364B, 0xD80D2BDA, 0xAF0A1B4C,
     0x36034AF6, 0x41047A60, 0xDF60EFC3, 0xA867DF55, 0x316E8EEF,
     0x4669BE79, 0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236,
     0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F, 0xC5BA3BBE,
     0xB2BD0B28, 0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7, 0xB5D0CF31,
     0x2CD99E8B, 0x5BDEAE1D, 0x9B64C2B0, 0xEC63F226, 0x756AA39C,
     0x026D930A, 0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713,
     0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38, 0x92D28E9B,
     0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21, 0x86D3D2D4, 0xF1D4E242,
     0x68DDB3F8, 0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1,
     0x18B74777, 0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C,
     0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45, 0xA00AE278,
     0xD70DD2EE, 0x4E048354, 0x3903B3C2, 0xA7672661, 0xD06016F7,
     0x4969474D, 0x3E6E77DB, 0xAED16A4A, 0xD9D65ADC, 0x40DF0B66,
     0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9,
     0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605,
     0xCDD70693, 0x54DE5729, 0x23D967BF, 0xB3667A2E, 0xC4614AB8,
     0x5D681B02, 0x2A6F2B94, 0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B,
     0x2D02EF8D],

    crc32: function crc32(data) {
      /*jshint bitwise:false*/
      var tbl = AWS.util.crypto.crc32Table;
      var crc = 0 ^ -1;

      if (typeof data === 'string') {
        data = new Buffer(data);
      }

      for (var i = 0; i < data.length; i++) {
        var code = data.readUInt8(i);
        crc = (crc>>>8) ^ tbl[(crc^code)&0xFF];
      }
      return (crc ^ -1) >>> 0;
    },

    hmac: function hmac(key, string, digest, fn) {
      if (!digest) digest = 'binary';
      if (!fn) fn = 'sha256';
      return cryptoLib.createHmac(fn, key).update(string).digest(digest);
    },

    md5: function md5(data, digest) {
      if (!digest) { digest = 'binary'; }
      if (typeof data === 'string') data = new Buffer(data);
      return AWS.util.crypto.createHash('md5').update(data).digest(digest);
    },

    sha256: function sha256(string, digest) {
      if (!digest) { digest = 'binary'; }
      if (typeof string === 'string') string = new Buffer(string);
      return AWS.util.crypto.createHash('sha256').update(string).digest(digest);
    },

    toHex: function toHex(data) {
      var out = [];
      for (var i = 0; i < data.length; i++) {
        out.push(('0' + data.charCodeAt(i).toString(16)).substr(-2, 2));
      }
      return out.join('');
    },

    createHash: function createHash(algorithm) {
      return cryptoLib.createHash(algorithm);
    }

  },

  /** @!ignore */

  /* Abort constant */
  abort: {},

  each: function each(object, iterFunction) {
    for (var key in object) {
      if (object.hasOwnProperty(key)) {
        var ret = iterFunction.call(this, key, object[key]);
        if (ret === AWS.util.abort) break;
      }
    }
  },

  arrayEach: function arrayEach(array, iterFunction) {
    for (var idx in array) {
      if (array.hasOwnProperty(idx)) {
        var ret = iterFunction.call(this, array[idx], parseInt(idx, 10));
        if (ret === AWS.util.abort) break;
      }
    }
  },

  update: function update(obj1, obj2) {
    AWS.util.each(obj2, function iterator(key, item) {
      obj1[key] = item;
    });
    return obj1;
  },

  merge: function merge(obj1, obj2) {
    return AWS.util.update(AWS.util.copy(obj1), obj2);
  },

  copy: function copy(object) {
    if (object === null || object === undefined) return object;
    var dupe = {};
    /*jshint forin:false */
    for (var key in object) {
      dupe[key] = object[key];
    }
    return dupe;
  },

  isEmpty: function isEmpty(obj) {
    for (var prop in obj) {
      if (obj.hasOwnProperty(prop)) {
        return false;
      }
    }
    return true;
  },

  isType: function isType(obj, type) {
    // handle cross-"frame" objects
    if (typeof type === 'function') type = type.name;
    return Object.prototype.toString.call(obj) === '[object ' + type + ']';
  },

  error: function error(err, options) {
    err.message = err.message || null;

    if (typeof options === 'string') {
      err.message = options;
    } else {
      AWS.util.update(err, options);
    }

    err.name = err.code || 'Error';
    return err;
  },

  /**
   * @api private
   */
  inherit: function inherit(klass, features) {
    var newObject = null;
    if (features === undefined) {
      features = klass;
      klass = Object;
      newObject = {};
    } else {
      /*jshint newcap:false camelcase:false */
      var ctor = function __ctor_wrapper__() {};
      ctor.prototype = klass.prototype;
      newObject = new ctor();
    }

    // constructor not supplied, create pass-through ctor
    if (features.constructor === Object) {
      features.constructor = function() {
        klass.apply(this, arguments);
      };
    }

    features.constructor.prototype = newObject;
    AWS.util.update(features.constructor.prototype, features);
    features.constructor.__super__ = klass;
    return features.constructor;
  },

  /**
   * @api private
   */
  mixin: function mixin() {
    var klass = arguments[0];
    for (var i = 1; i < arguments.length; i++) {
      /*jshint forin:false*/
      for (var prop in arguments[i].prototype) {
        var fn = arguments[i].prototype[prop];
        if (prop != 'constructor') {
          klass.prototype[prop] = fn;
        }
      }
    }
    return klass;
  }

};

module.exports = AWS.util;

})(require("__browserify_process"))
},{"crypto":72,"buffer":73,"url":74,"fs":75,"./core":2,"__browserify_process":71}],33:[function(require,module,exports){(function(process){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('./core');
require('./event_listeners');
require('./event_emitter');
var inherit = AWS.util.inherit;

/**
 * The main configuration class used by all service objects to set
 * the region, credentials, and other options for requests.
 *
 * By default, credentials and region settings are left unconfigured.
 * This should be configured by the application before using any
 * AWS service APIs.
 *
 * In order to set global configuration options, properties should
 * be assigned to the global {AWS.config} object.
 *
 * @see AWS.config
 *
 * @!attribute credentials
 *   @return [AWS.Credentials] the AWS credentials to sign requests with.
 *
 * @!attribute region
 *   @example Set the global region setting to us-west-2
 *     AWS.config.update({region: 'us-west-2'});
 *   @return [AWS.Credentials] The region to send service requests to.
 *   @see http://docs.amazonwebservices.com/general/latest/gr/rande.html
 *     A list of available endpoints for each AWS service
 *
 * @!attribute maxRetries
 *   @return [Integer] the maximum amount of retries to perform for a
 *     service request. By default this value is calculated by the specific
 *     service object that the request is being made to.
 *
 * @!attribute paramValidation
 *   @return [Boolean] whether input parameters should be validated against
 *     the operation description before sending the request. Defaults to true.
 *
 * @!attribute computeChecksums
 *   @return [Boolean] whether to compute checksums for payload bodies when
 *     the service accepts it (currently supported in S3 only).
 *
 * @!attribute sslEnabled
 *   @return [Boolean] whether SSL is enabled for requests
 *
 * @!attribute s3ForcePathStyle
 *   @return [Boolean] whether to force path style URLs for S3 objects
 */
AWS.Config = inherit({

  /**
   * Creates a new configuration object. This is the object that passes
   * option data along to service requests, including credentials, security,
   * region information, and some service specific settings.
   *
   * @example Creating a new configuration object with credentials and region
   *   var config = new AWS.Config({
   *     accessKeyId: 'AKID', secretAccessKey: 'SECRET', region: 'us-west-2'
   *   });
   * @option options accessKeyId [String] your AWS access key ID.
   * @option options secretAccessKey [String] your AWS secret access key.
   * @option options sessionToken [AWS.Credentials] the optional AWS
   *   session token to sign requests with.
   * @option options credentials [AWS.Credentials] the AWS credentials
   *   to sign requests with. You can either specify this object, or
   *   specify the accessKeyId and secretAccessKey options directly.
   * @option options region [String] the region to send service requests to.
   *   See {region} for more information.
   * @option options maxRetries [Integer] the maximum amount of retries to
   *   attempt with a request. See {maxRetries} for more information.
   * @option options sslEnabled [Boolean] whether to enable SSL for
   *   requests.
   * @option options paramValidation [Boolean] whether parameter validation
   *   is on.
   * @option options computeChecksums [Boolean] whether to compute checksums
   *   for payload bodies when the service accepts it (currently supported
   *   in S3 only)
   * @option options s3ForcePathStyle [Boolean] whether to force path
   *   style URLs for S3 objects.
   */
  constructor: function Config(options) {
    if (options === undefined) options = {};
    options = this.extractCredentials(options);

    AWS.util.each.call(this, this.keys, function (key, value) {
      this.set(key, options[key], value);
    });
  },

  /**
   * Updates the current configuration object with new options.
   *
   * @example Update maxRetries property of a configuration object
   *   config.update({maxRetries: 10});
   * @param [Object] options a map of option keys and values.
   * @see constructor
   */
  update: function update(options) {
    options = this.extractCredentials(options);
    AWS.util.each.call(this, options, function (key, value) {
      if (this.keys.hasOwnProperty(key)) this[key] = value;
    });
  },

  /**
   * Loads configuration data from a JSON file into this config object.
   * @note Loading configuration will reset all existing configuration
   *   on the object.
   * @param path [String] the path to load configuration from
   * @return [AWS.Config] the same configuration object
   */
  loadFromPath: function loadFromPath(path) {
    this.clear();

    var options = JSON.parse(AWS.util.readFileSync(path));
    var fileSystemCreds = new AWS.FileSystemCredentials(path, this);
    var chain = new AWS.CredentialProviderChain();
    chain.providers.unshift(fileSystemCreds);
    options.credentials = chain.resolve();

    this.constructor(options);

    return this;
  },

  /**
   * Clears configuration data on this object
   *
   * @api private
   */
  clear: function clear() {
    /*jshint forin:false */
    AWS.util.each.call(this, this.keys, function (key) {
      delete this[key];
    });

    // reset credential provider
    this.set('credentials', undefined);
  },

  /**
   * Sets a property on the configuration object, allowing for a
   * default value
   * @api private
   */
  set: function set(property, value, defaultValue) {
    if (value === undefined) {
      if (defaultValue === undefined) {
        defaultValue = this.keys[property];
      }
      if (typeof defaultValue === 'function') {
        this[property] = defaultValue.call(this);
      } else {
        this[property] = defaultValue;
      }
    } else {
      this[property] = value;
    }
  },

  /**
   * All of the keys with their default values.
   *
   * @constant
   * @api private
   */
  keys: {
    credentials: function () {
      return new AWS.CredentialProviderChain().resolve();
    },
    region: function() {
      return process.env.AWS_REGION || process.env.AMAZON_REGION;
    },
    maxRetries: undefined,
    paramValidation: true,
    sslEnabled: true,
    s3ForcePathStyle: false,
    computeChecksums: true,
    dynamoDbCrc32: true
  },

  /**
   * Extracts accessKeyId, secretAccessKey and sessionToken
   * from a configuration hash.
   *
   * @api private
   */
  extractCredentials: function extractCredentials(options) {
    if (options.accessKeyId && options.secretAccessKey) {
      options = AWS.util.copy(options);
      options.credentials = new AWS.Credentials(options);
    }
    return options;
  }
});

/**
 * Represents your AWS security credentials, specifically the
 * {accessKeyId}, {secretAccessKey}, and optional {sessionToken}.
 * Creating a `Credentials` object allows you to pass around your
 * security information to configuration and service objects.
 *
 * Note that this class typically does not need to be constructed manually,
 * as the {AWS.Config} and {AWS.Client} classes both accept simple
 * options hashes with the three keys. These structures will be converted
 * into Credentials objects automatically.
 *
 * ## Expiring and Refreshing Credentials
 *
 * Occasionally credentials can expire in the middle of a long-running
 * application. In this case, the SDK will automatically attempt to
 * refresh the credentials from the storage location if the Credentials
 * class implements the {refresh} method.
 *
 * If you are implementing a credential storage location, you
 * will want to create a subclass of the `Credentials` class and
 * override the {refresh} method. This method allows credentials to be
 * retrieved from the backing store, be it a file system, database, or
 * some network storage. The method should reset the credential attributes
 * on the object.
 *
 * @!attribute accessKeyId
 *   @return [String] the AWS access key ID
 * @!attribute secretAccessKey
 *   @return [String] the AWS secret access key
 * @!attribute sessionToken
 *   @return [String] an optional AWS session token
 */
AWS.Credentials = inherit({

  /**
   * A credentials object can be created using positional arguments or an options
   * hash.
   *
   * @overload AWS.Credentials(accessKeyId, secretAccessKey, sessionToken=null)
   *   Creates a Credentials object with a given set of credential information
   *   as positional arguments.
   *   @param accessKeyId [String] the AWS access key ID
   *   @param secretAccessKey [String] the AWS secret access key
   *   @param sessionToken [String] the optional AWS session token
   *   @example Create a credentials object with AWS credentials
   *     var creds = new AWS.Credentials('akid', 'secret', 'session');
   * @overload AWS.Credentials(options)
   *   Creates a Credentials object with a given set of credential information
   *   as an options hash.
   *   @option options accessKeyId [String] the AWS access key ID
   *   @option options secretAccessKey [String] the AWS secret access key
   *   @option options sessionToken [String] the optional AWS session token
   *   @example Create a credentials object with AWS credentials
   *     var creds = new AWS.Credentials({
   *       accessKeyId: 'akid', secretAccessKey: 'secret', sessionToken: 'session'
   *     });
   */
  constructor: function Credentials() {
    if (arguments.length == 1 && typeof arguments[0] === 'object') {
      var creds = arguments[0].credentials || arguments[0];
      this.accessKeyId = creds.accessKeyId;
      this.secretAccessKey = creds.secretAccessKey;
      this.sessionToken = creds.sessionToken;
    } else {
      this.accessKeyId = arguments[0];
      this.secretAccessKey = arguments[1];
      this.sessionToken = arguments[2];
    }
  },

  /**
   * Refreshes the credentials.
   *
   * @note Subclasses should override this class to reset the
   *   {accessKeyId}, {secretAccessKey} and optional {sessionToken}
   *   on the credentials object.
   */
  refresh: function refresh() { }

});

/**
 * Represents credentials from a JSON file on disk.
 * If the credentials expire, the SDK can {refresh} the credentials
 * from the file.
 *
 * The format of the file should be similar to the options passed to
 * {AWS.Config}:
 *
 * ```js
 * {accessKeyId: 'akid', secretAccessKey: 'secret', sessionToken: 'optional'}
 * ```
 *
 * @example Loading credentials from disk
 *   var creds = new AWS.FileSystemCredentials('./configuration.json');
 *   creds.accessKeyId == 'AKID'
 *
 * @!attribute filename
 *   @readonly
 *   @return [String] the path to the JSON file on disk containing the
 *     credentials.
 */
AWS.FileSystemCredentials = inherit(AWS.Credentials, {

  /**
   * @overload AWS.FileSystemCredentials(filename, initialCredentials=null)
   *   Creates a new FileSystemCredentials object from a filename
   *
   *   @param filename [String] the path on disk to the JSON file to load.
   *   @param initialCredentials [String] default credentials to load
   *     if not specified in the file.
   */
  constructor: function FileSystemCredentials(filename, initialCredentials) {
    this.filename = filename;
    AWS.Credentials.call(this, initialCredentials);
    if (!this.accessKeyId) this.refresh();
  },

  /**
   * Refreshes the credentials from the {filename} on disk.
   */
  refresh: function refresh() {
    AWS.Credentials.call(this, JSON.parse(AWS.util.readFileSync(this.filename)));
  }

});

/**
 * Represents credentials from the environment.
 *
 * By default, this class will look for the matching environment variables
 * prefixed by a given {envPrefix}. The un-prefixed environment variable names
 * for each credential value is listed below:
 *
 * ```js
 * accessKeyId: ACCESS_KEY_ID
 * secretAccessKey: SECRET_ACCESS_KEY
 * sessionToken: SESSION_TOKEN
 * ```
 *
 * With the default prefix of 'AWS', the environment variables would be:
 *
 *     AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_SESSION_TOKEN
 *
 * @!attribute envPrefix
 *   @readonly
 *   @return [String] the prefix for the environment variable names excluding
 *     the separating underscore ('_').
 */
AWS.EnvironmentCredentials = inherit(AWS.Credentials, {

  /**
   * Creates a new EnvironmentCredentials class with a given variable
   * prefix {envPrefix}. For example, to load credentials using the 'AWS'
   * prefix:
   *
   * ```js
   * var creds = new AWS.EnvironmentCredentials('AWS');
   * creds.accessKeyId == 'AKID' // from AWS_ACCESS_KEY_ID env var
   * ```
   *
   * @param envPrefix [String] the prefix to use (e.g., 'AWS') for environment
   *   variables. Do not include the separating underscore.
   */
  constructor: function EnvironmentCredentials(envPrefix) {
    this.envPrefix = envPrefix;
    this.refresh();
  },

  /**
   * Refreshes credentials from the environment using the prefixed
   * environment variables.
   */
  refresh: function refresh() {
    if (process === undefined) return;

    var keys = ['ACCESS_KEY_ID', 'SECRET_ACCESS_KEY', 'SESSION_TOKEN'];
    var values = [];

    /*jshint forin:false*/
    for (var i in keys) {
      var prefix = '';
      if (this.envPrefix) prefix = this.envPrefix + '_';
      values[i] = process.env[prefix + keys[i]];
    }

    AWS.Credentials.apply(this, values);
  }

});

/**
 * Creates a credential provider chain that searches for AWS credentials
 * in a list of credential providers specified by the {providers} property.
 *
 * By default, the chain will use the {defaultProviders} to resolve credentials.
 * These providers will look in the environment using the
 * {AWS.EnvironmentCredentials} class with the 'AWS' and 'AMAZON' prefixes.
 *
 * ## Setting Providers
 *
 * Each provider in the {providers} list should be a function that returns
 * a {AWS.Credentials} object, or a hardcoded credentials object. The function
 * form allows for delayed execution of the credential construction.
 *
 * ## Resolving Credentials from a Chain
 *
 * Call {resolve} to return the first valid credential object that can be
 * loaded by the provider chain.
 *
 * For example, to resolve a chain with a custom provider that checks a file
 * on disk after the set of {defaultProviders}:
 *
 * ```js
 * var diskProvider = new AWS.FileSystemCredentials('./creds.json');
 * var chain = new AWS.CredentialProviderChain();
 * chain.providers.push(diskProvider);
 * chain.resolve();
 * ```
 *
 * The above code will return the `diskProvider` object if the
 * file contains credentials and the `defaultProviders` do not contain
 * any credential settings.
 *
 * @!attribute providers
 *   @return [Array<AWS.Credentials, Function>]
 *     a list of credentials objects or functions that return credentials
 *     objects. If the provider is a function, the function will be
 *     executed lazily when the provider needs to be checked for valid
 *     credentials. By default, this object will be set to the
 *     {defaultProviders}.
 *   @see defaultProviders
 */
AWS.CredentialProviderChain = inherit({

  /**
   * Creates a new CredentialProviderChain with a default set of providers
   * specified by {defaultProviders}.
   */
  constructor: function CredentialProviderChain() {
    this.providers = AWS.CredentialProviderChain.defaultProviders.slice(0);
  },

  /**
   * Resolves the provider chain by searching for the first set of
   * credentials in {providers}.
   *
   * @return [AWS.Credentials] the first set of credentials discovered
   *   in the chain of {providers}.
   * @return [null] if no credentials are found.
   */
  resolve: function resolve() {
    var finalCreds;
    AWS.util.arrayEach(this.providers, function (provider) {
      var creds;
      if (typeof provider === 'function') {
        creds = provider.call();
      } else {
        creds = provider;
      }

      if (creds.accessKeyId) {
        finalCreds = creds;
        return AWS.util.abort;
      }
    });
    return finalCreds ? finalCreds : new AWS.Credentials();
  }

});

/**
 * The default set of providers used by a vanilla CredentialProviderChain.
 */
AWS.CredentialProviderChain.defaultProviders = [
  function () { return new AWS.EnvironmentCredentials('AWS'); },
  function () { return new AWS.EnvironmentCredentials('AMAZON'); }
];

/**
 * @return [AWS.Config] The global configuration object singleton instance
 * @readonly
 * @see AWS.Config
 */
AWS.config = new AWS.Config();

})(require("__browserify_process"))
},{"./core":2,"./event_listeners":36,"./event_emitter":35,"__browserify_process":71}],34:[function(require,module,exports){(function(__dirname){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('./core');
var Stream = require('stream').Stream;
var inherit = AWS.util.inherit;

/**
 * The endpoint that a service will talk to, for example,
 * `'https://ec2.ap-southeast-1.amazonaws.com'`. If
 * you need to override an endpoint for a service, you can
 * set the endpoint on a service by passing the endpoint
 * object with the `endpoint` option key:
 *
 * ```js
 * var ep = new AWS.Endpoint('awsproxy.example.com');
 * var s3 = new AWS.S3({endpoint: ep});
 * s3.client.endpoint.hostname == 'awsproxy.example.com'
 * ```
 *
 * Note that if you do not specify a protocol, the protocol will
 * be selected based on your current {AWS.config} configuration.
 *
 * @!attribute protocol
 *   @return [String] the protocol (http or https) of the endpoint
 *     URL
 * @!attribute hostname
 *   @return [String] the host portion of the endpoint, e.g.,
 *     example.com
 * @!attribute host
 *   @return [String] the host portion of the endpoint including
 *     the port, e.g., example.com:80
 * @!attribute port
 *   @return [Integer] the port of the endpoint
 * @!attribute href
 *   @return [String] the full URL of the endpoint
 */
AWS.Endpoint = inherit({

  /**
   * @overload Endpoint(endpoint)
   *   Constructs a new endpoint given an endpoint URL. If the
   *   URL omits a protocol (http or https), the default protocol
   *   set in the global {AWS.config} will be used.
   *   @param endpoint [String] the URL to construct an endpoint from
   */
  constructor: function Endpoint(endpoint, config) {
    if (!endpoint.match(/^http/)) {
      var useSSL = config && config.sslEnabled !== undefined ?
        config.sslEnabled : AWS.config.sslEnabled;
      endpoint = (useSSL ? 'https' : 'http') + '://' + endpoint;
    }

    AWS.util.update(this, AWS.util.urlParse(endpoint));

    // Ensure the port property is set as an integer
    if (this.port) {
      this.port = parseInt(this.port, 10);
    } else {
      this.port = this.protocol === 'https:' ? 443 : 80;
    }
  }

});

/**
 * The low level HTTP request object, encapsulating all HTTP header
 * and body data sent by a service request.
 *
 * @!attribute method
 *   @return [String] the HTTP method of the request
 * @!attribute path
 *   @return [String] the path portion of the URI, e.g.,
 *     "/list/?start=5&num=10"
 * @!attribute headers
 *   @return [map<String,String>]
 *     a map of header keys and their respective values
 * @!attribute body
 *   @return [String] the request body payload
 * @!attribute endpoint
 *   @return [AWS.Endpoint] the endpoint for the request
 * @!attribute region
 *   @api private
 *   @return [String] the region, for signing purposes only.
 */
AWS.HttpRequest = inherit({

  /**
   * @api private
   */
  constructor: function HttpRequest(endpoint, region) {
    this.method = 'POST';
    this.path = '/';
    this.headers = {};
    this.headers['User-Agent'] = AWS.util.userAgent();
    this.body = '';
    this.endpoint = AWS.util.copy(endpoint);
    this.region = region;
  },

  /**
   * @return [String] the part of the {path} excluding the
   *   query string
   */
  pathname: function pathname() {
    return this.path.split('?', 1)[0];
  },

  /**
   * @return [String] the query string portion of the {path}
   */
  search: function search() {
    return this.path.split('?', 2)[1] || '';
  }

});

/**
 * The low level HTTP response object, encapsulating all HTTP header
 * and body data returned from the request.
 *
 * @!attribute statusCode
 *   @return [Integer] the HTTP status code of the response (e.g., 200, 404)
 * @!attribute headers
 *   @return [map<String,String>]
 *      a map of response header keys and their respective values
 * @!attribute body
 *   @return [String] the response body payload
 */
AWS.HttpResponse = inherit({

  /**
   * @api private
   */
  constructor: function HttpResponse() {
    this.statusCode = undefined;
    this.headers = {};
    this.body = undefined;
  }
});

/**
 * @api private
 */
AWS.NodeHttpClient = inherit({
  handleRequest: function handleRequest(request, response) {
    var options = {
      host: request.httpRequest.endpoint.hostname,
      port: request.httpRequest.endpoint.port,
      method: request.httpRequest.method,
      headers: request.httpRequest.headers,
      path: request.httpRequest.path
    };
    var useSSL = request.httpRequest.endpoint.protocol === 'https:';
    var client = useSSL ? require('https') : require('http');

    if (useSSL) {
      if (!AWS.NodeHttpClient.sslAgent) {
        // cache certificate bundle
        var bundleLocation = __dirname + '/../ca-bundle.crt';
        AWS.NodeHttpClient.certBundle = AWS.util.readFileSync(bundleLocation);

        // cache sslAgent
        AWS.NodeHttpClient.sslAgent = new client.Agent({
          rejectUnauthorized: true,
          cert: AWS.NodeHttpClient.certBundle
        });
      }

      options.agent = AWS.NodeHttpClient.sslAgent;
    }

    var stream = this.setupEvents(client, options, request, response);
    if (request.httpRequest.body instanceof Stream) {
      request.httpRequest.body.pipe(stream, {end: false});
    } else if (request.httpRequest.body) {
      stream.write(request.httpRequest.body);
    }
    stream.end();
  },

  setupEvents: function setupEvents(client, options, request, response) {
    var stream = client.request(options, function onResponse(httpResponse) {
      request.emitEvent('httpHeaders', response, httpResponse.statusCode,
                        httpResponse.headers, response);

      httpResponse.on('data', function onData(data) {
        request.emitEvent('httpData', response, data, response);
      });

      httpResponse.on('end', function onEnd() {
        request.emitEvents(response, 'httpDone');
      });
    });

    stream.on('error', function (err) {
      request.emitEvent('httpError', response, AWS.util.error(err,
        {code: 'NetworkingError', retryable: true}), response);
    });

    return stream;
  }
});

/**
 * @api private
 */
AWS.HttpClient = AWS.NodeHttpClient;

/**
 * @api private
 */
AWS.HttpClient.getInstance = function getInstance() {
  /*jshint newcap:false */
  if (this.singleton === undefined) {
    this.singleton = new this();
  }
  return this.singleton;
};

})("/")
},{"stream":76,"https":77,"http":78,"./core":2}],35:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('./core');
var EventEmitter = require('events').EventEmitter;

/**
 * @!method on(eventName, callback)
 *   Registers an event listener callback for the event given by `eventName`.
 *   Parameters passed to the callback function depend on the individual event
 *   being triggered. See the event documentation for those parameters.
 *
 *   @param eventName [String] the event name to register the listener for
 *   @param callback [Function] the listener callback function
 *   @return [AWS.EventEmitter] the same object for chaining
 */
AWS.EventEmitter = AWS.util.inherit(EventEmitter, {
  /**
   * Adds or copies a set of listeners from another list of
   * listeners or EventEmitter object.
   *
   * @param listeners [map<String,Array<Function>>, EventEmitter]
   *   a list of events and callbacks, or an event emitter object
   *   containing listeners to add to this emitter object.
   * @return [AWS.EventEmitter] the emitter object, for chaining.
   * @example Adding listeners from a map of listeners
   *   emitter.addListeners({
   *     event1: [function() { ... }, function() { ... }],
   *     event2: [function() { ... }]
   *   });
   *   emitter.emit('event1'); // emitter has event1
   *   emitter.emit('event2'); // emitter has event2
   * @example Adding listeners from another emitter object
   *   var emitter1 = new AWS.EventEmitter();
   *   emitter1.on('event1', function() { ... });
   *   emitter1.on('event2', function() { ... });
   *   var emitter2 = new AWS.EventEmitter();
   *   emitter2.addListeners(emitter1);
   *   emitter2.emit('event1'); // emitter2 has event1
   *   emitter2.emit('event2'); // emitter2 has event2
   */
  addListeners: function addListeners(listeners) {
    var self = this;

    // extract listeners if parameter is an EventEmitter object
    if (listeners._events) listeners = listeners._events;

    AWS.util.each(listeners, function(event, callbacks) {
      if (typeof callbacks === 'function') callbacks = [callbacks];
      AWS.util.arrayEach(callbacks, function(callback) {
        self.on(event, callback);
      });
    });

    return self;
  },

  /**
   * Registers an event with {on} and saves the callback handle function
   * as a property on the emitter object using a given `name`.
   *
   * @param name [String] the property name to set on this object containing
   *   the callback function handle so that the listener can be removed in
   *   the future.
   * @param (see on)
   * @return (see on)
   * @example Adding a named listener DATA_CALLBACK
   *   var listener = function() { doSomething(); };
   *   emitter.addNamedListener('DATA_CALLBACK', 'data', listener);
   *
   *   // the following prints: true
   *   console.log(emitter.DATA_CALLBACK == listener);
   */
  addNamedListener: function addNamedListener(name, eventName, callback) {
    this[name] = callback;
    this.addListener(eventName, callback);
    return this;
  },

  /**
   * Helper method to add a set of named listeners using
   * {addNamedListener}. The callback contains a parameter
   * with a handle to the `addNamedListener` method.
   *
   * @callback callback function(add)
   *   The callback function is called immediately in order to provide
   *   the `add` function to the block. This simplifies the addition of
   *   a large group of named listeners.
   *   @param add [Function] the {addNamedListener} function to call
   *     when registering listeners.
   * @example Adding a set of named listeners
   *   emitter.addNamedListeners(function(add) {
   *     add('DATA_CALLBACK', 'data', function() { ... });
   *     add('OTHER', 'otherEvent', function() { ... });
   *     add('LAST', 'lastEvent', function() { ... });
   *   });
   *
   *   // these properties are now set:
   *   emitter.DATA_CALLBACK;
   *   emitter.OTHER;
   *   emitter.LAST;
   */
  addNamedListeners: function addNamedListeners(callback) {
    var self = this;
    callback(function() {
      self.addNamedListener.apply(self, arguments);
    });
    return this;
  }
});

},{"events":79,"./core":2}],36:[function(require,module,exports){(function(){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('./core');
var Buffer = require('buffer').Buffer;
require('./event_emitter');
require('./service_interface/json');
require('./service_interface/query');
require('./service_interface/rest');
require('./service_interface/rest_json');
require('./service_interface/rest_xml');

/**
 * The namespace used to register global event listeners for request building
 * and sending.
 */
AWS.EventListeners = {
  /**
   * @!attribute VALIDATE_CREDENTIALS
   *   A request listener that validates whether the request is being
   *   sent with credentials.
   *   Handles the {AWS.Request~validate 'validate' Request event}
   *   @example Sending a request without validating credentials
   *     var listener = AWS.EventListeners.Core.VALIDATE_CREDENTIALS;
   *     request.removeListener('validate', listener);
   *   @readonly
   *   @return [Function]
   * @!attribute VALIDATE_REGION
   *   A request listener that validates whether the region is set
   *   for a request.
   *   Handles the {AWS.Request~validate 'validate' Request event}
   *   @example Sending a request without validating region configuration
   *     var listener = AWS.EventListeners.Core.VALIDATE_REGION;
   *     request.removeListener('validate', listener);
   *   @readonly
   *   @return [Function]
   * @!attribute VALIDATE_PARAMETERS
   *   A request listener that validates input parameters in a request.
   *   Handles the {AWS.Request~validate 'validate' Request event}
   *   @example Sending a request without validating parameters
   *     var listener = AWS.EventListeners.Core.VALIDATE_PARAMETERS;
   *     request.removeListener('validate', listener);
   *   @example Disable parameter validation globally
   *     AWS.EventListeners.Core.removeListener('validate',
   *       AWS.EventListeners.Core.VALIDATE_REGION);
   *   @readonly
   *   @return [Function]
   * @!attribute SEND
   *   A request listener that initiates the HTTP connection for a
   *   request being sent. Handles the {AWS.Request~send 'send' Request event}
   *   @example Replacing the HTTP handler
   *     var listener = AWS.EventListeners.Core.SEND;
   *     request.removeListener('send', listener);
   *     request.on('send', function(response) {
   *       customHandler.send(response);
   *     });
   *   @return [Function]
   *   @readonly
   * @!attribute HTTP_DATA
   *   A request listener that reads data from the HTTP connection in order
   *   to build the response data.
   *   Handles the {AWS.Request~httpData 'httpData' Request event}.
   *   Remove this handler if you are overriding the 'httpData' event and
   *   do not want extra data processing and buffering overhead.
   *   @example Disabling default data processing
   *     var listener = AWS.EventListeners.Core.HTTP_DATA;
   *     request.removeListener('httpData', listener);
   *   @return [Function]
   *   @readonly
   */
  Core: {} /* doc hack */
};

AWS.EventListeners = {
  Core: new AWS.EventEmitter().addNamedListeners(function(add) {
    add('VALIDATE_CREDENTIALS', 'validate', function VALIDATE_CREDENTIALS(req) {
      if (!req.client.config.credentials.accessKeyId ||
          !req.client.config.credentials.secretAccessKey) {
        throw AWS.util.error(new Error(),
          {code: 'SigningError', message: 'Missing credentials in config'});
      }
    });

    add('VALIDATE_REGION', 'validate', function VALIDATE_REGION(req) {
      if (!req.client.config.region) {
        throw AWS.util.error(new Error(),
          {code: 'SigningError', message: 'Missing region in config'});
      }
    });

    add('VALIDATE_PARAMETERS', 'validate', function VALIDATE_PARAMETERS(req) {
      var rules = req.client.api.operations[req.operation].input;
      new AWS.ParamValidator().validate(rules, req.params);
    });

    add('SET_CONTENT_LENGTH', 'afterBuild', function SET_CONTENT_LENGTH(req) {
      if (req.httpRequest.headers['Content-Length'] === undefined) {
        var length = AWS.util.string.byteLength(req.httpRequest.body);
        req.httpRequest.headers['Content-Length'] = length;
      }
    });

    add('SIGN', 'sign', function SIGN(req) {
      var date = AWS.util.date.getDate();
      var sigVersion = req.client.api.signatureVersion;
      var credentials = AWS.util.copy(req.client.config.credentials);
      var SignerClass = AWS.Signers.RequestSigner.getVersion(sigVersion);
      var signer = new SignerClass(req.httpRequest,
        req.client.api.signingName || req.client.api.endpointPrefix);

      // clear old authorization headers
      delete req.httpRequest.headers['Authorization'];
      delete req.httpRequest.headers['X-Amz-Date'];

      // add new authorization
      signer.addAuthorization(credentials, date);
    });

    add('SETUP_ERROR', 'extractError', function SETUP_ERROR(resp) {
      if (this.client.successfulResponse(resp, this)) {
        // throwing null will stop the error extraction chain
        // but will not set an error for data extraction
        throw null;
      }

      resp.error = AWS.util.error(new Error(),
        {code: 'UnknownError', message: 'An unknown error occurred.'});
      resp.data = null;
    });

    add('SETUP_DATA', 'extractData', function SETUP_DATA(resp) {
      resp.data = {};
      resp.error = null;
    });

    add('SEND', 'send', function SEND(resp) {
      AWS.HttpClient.getInstance().handleRequest(this, resp);
    });

    add('HTTP_HEADERS', 'httpHeaders',
        function HTTP_HEADERS(statusCode, headers, resp) {
      resp.httpResponse.statusCode = statusCode;
      resp.httpResponse.headers = headers;
      resp.httpResponse.body = new Buffer('');
      resp.httpResponse.buffers = [];
    });

    add('HTTP_DATA', 'httpData', function HTTP_DATA(chunk, resp) {
      resp.httpResponse.buffers.push(chunk);
    });

    add('HTTP_DONE', 'httpDone', function HTTP_DONE(resp) {
      // convert buffers array into single buffer
      if (resp.httpResponse.buffers.length > 0) {
        var body = resp.httpResponse.buffers.join('');
        resp.httpResponse.body = body;
      }
      delete resp.httpResponse.buffers;

      this.completeRequest(resp);
    });

    add('HTTP_ERROR', 'httpError', function HTTP_ERROR(error, resp) {
      resp.error = error;
      this.completeRequest(resp);
    });

    add('FINALIZE_ERROR', 'retry', function FINALIZE_ERROR(resp) {
      resp.error.statusCode = resp.httpResponse.statusCode;
      if (resp.error.retryable === undefined) {
        resp.error.retryable = this.client.retryableError(resp.error, this);
      }
    });

    add('REDIRECT', 'retry', function REDIRECT(resp) {
      if (resp.error && resp.error.statusCode == 307) {
        this.httpRequest.endpoint =
          new AWS.Endpoint(resp.httpResponse.headers['location']);
        resp.error.retryable = true;
      }
    });

    add('RETRY_CHECK', 'retry', function RETRY_CHECK(resp) {
      if (resp.error) {
        if (!resp.error.retryable)
          throw resp.error;
        if (resp.retryCount >= this.client.numRetries())
          throw resp.error;

        resp.retryCount++;
      }
    });

    add('RETRY_SIGN', 'retry', function RETRY_SIGN(resp) {
      this.emitEvents(resp, 'sign');
    });

    add('RETRY_DELAY_SEND', 'retry', function RETRY_DELAY_SEND(resp) {
      var delay = 0;
      if (resp.error) {
        delay = this.client.retryDelays()[resp.retryCount-1] || 0;
      }

      resp.error = null;
      resp.data = null;

      setTimeout(function() { resp.request.emitEvents(resp, 'send'); }, delay);
    });
  }),

  Json: new AWS.EventEmitter().addNamedListeners(function(add) {
    var svc = AWS.ServiceInterface.Json;
    add('BUILD', 'build', svc.buildRequest);
    add('EXTRACT_DATA', 'extractData', svc.extractData);
    add('EXTRACT_ERROR', 'extractError', svc.extractError);
  }),

  Rest: new AWS.EventEmitter().addNamedListeners(function(add) {
    var svc = AWS.ServiceInterface.Rest;
    add('BUILD', 'build', svc.buildRequest);
    add('EXTRACT_DATA', 'extractData', svc.extractData);
    add('EXTRACT_ERROR', 'extractError', svc.extractError);
  }),

  RestJson: new AWS.EventEmitter().addNamedListeners(function(add) {
    var svc = AWS.ServiceInterface.RestJson;
    add('BUILD', 'build', svc.buildRequest);
    add('EXTRACT_DATA', 'extractData', svc.extractData);
    add('EXTRACT_ERROR', 'extractError', svc.extractError);
  }),

  RestXml: new AWS.EventEmitter().addNamedListeners(function(add) {
    var svc = AWS.ServiceInterface.RestXml;
    add('BUILD', 'build', svc.buildRequest);
    add('EXTRACT_DATA', 'extractData', svc.extractData);
    add('EXTRACT_ERROR', 'extractError', svc.extractError);
  }),

  Query: new AWS.EventEmitter().addNamedListeners(function(add) {
    var svc = AWS.ServiceInterface.Query;
    add('BUILD', 'build', svc.buildRequest);
    add('EXTRACT_DATA', 'extractData', svc.extractData);
    add('EXTRACT_ERROR', 'extractError', svc.extractError);
  })
};

})()
},{"buffer":73,"./core":2,"./event_emitter":35,"./service_interface/json":80,"./service_interface/query":81,"./service_interface/rest":82,"./service_interface/rest_json":83,"./service_interface/rest_xml":84}],37:[function(require,module,exports){(function(process){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('./core');
var inherit = AWS.util.inherit;
var Stream = require('stream').Stream;

/**
 * ## Asynchronous Requests
 *
 * All requests made through the SDK are asynchronous and use a
 * callback interface. Each service method that kicks off a request
 * returns an `AWS.Request` object that you can use to register
 * callbacks.
 *
 * For example, the following service method returns the request
 * object as "request", which can be used to register callbacks:
 *
 * ```js
 * // request is an AWS.Request object
 * var request = ec2.client.describeInstances();
 *
 * // register callbacks on request to retrieve response data
 * request.on('success', function(response) {
 *   console.log(response.data);
 * });
 * ```
 *
 * When a request is ready to be sent, the {send} method should
 * be called:
 *
 * ```js
 * request.send();
 * ```
 *
 * ## Removing Default Listeners for Events
 *
 * Request objects are built with default listeners for the various events,
 * depending on the service type. In some cases, you may want to remove
 * some built-in listeners to customize behaviour. Doing this requires
 * access to the built-in listener functions, which are exposed through
 * the {AWS.EventListeners.Core} namespace. For instance, you may
 * want to customize the HTTP handler used when sending a request. In this
 * case, you can remove the built-in listener associated with the 'send'
 * event, the {AWS.EventListeners.Core.SEND} listener and add your own.
 *
 * ## Multiple Callbacks and Chaining
 *
 * You can register multiple callbacks on any request object. The
 * callbacks can be registered for different events, or all for the
 * same event. In addition, you can chain callback registration, for
 * example:
 *
 * ```js
 * request.
 *   on('success', function(response) {
 *     console.log("Success!");
 *   }).
 *   on('error', function(response) {
 *     console.log("Error!");
 *   }).
 *   on('complete', function(response) {
 *     console.log("Always!");
 *   }).
 *   send();
 * ```
 *
 * The above example will print either "Success! Always!", or "Error! Always!",
 * depending on whether the request succeeded or not.
 *
 * @!attribute httpRequest
 *   @readonly
 *   @!group HTTP Properties
 *   @return [AWS.HttpRequest] the raw HTTP request object
 *     containing request headers and body information
 *     sent by the client.
 *
 * @!group Request Building Events
 *
 * @!event validate(request)
 *   Triggered when a request is being validated. Listeners
 *   should throw an error if the request should not be sent.
 *   @param request [Request] the request object being sent
 *   @see AWS.EventListeners.Core.VALIDATE_CREDENTIALS
 *   @see AWS.EventListeners.Core.VALIDATE_REGION
 *
 * @!event build(request)
 *   Triggered when the request payload is being built. Listeners
 *   should fill the necessary information to send the request
 *   over HTTP.
 *   @param (see AWS.Request~validate)
 *
 * @!event sign(request)
 *   Triggered when the request is being signed. Listeners should
 *   add the correct authentication headers and/or adjust the body,
 *   depending on the authentication mechanism being used.
 *   @param (see AWS.Request~validate)
 *
 * @!group Request Sending Events
 *
 * @!event send(response)
 *   Triggered when the request is ready to be sent. Listeners
 *   should call the underlying transport layer to initiate
 *   the sending of the request.
 *   @param response [Response] the response object
 *   @context [Request] the request object that was sent
 *   @see AWS.EventListeners.Core.SEND
 *
 * @!event retry(response)
 *   Triggered when a request failed and might need to be retried.
 *   Listeners are responsible for checking to see if the request
 *   is retryable, and if so, re-signing and re-sending the request.
 *   Information about the failure is set in the `response.error`
 *   property.
 *
 *   If a listener decides that a request should not be retried,
 *   that listener should `throw` an error to cancel the event chain.
 *   Unsetting `response.error` will have no effect.
 *
 *   @param (see AWS.Request~send)
 *   @context (see AWS.Request~send)
 *
 * @!group Data Parsing Events
 *
 * @!event extractError(response)
 *   Triggered on all non-2xx requests so that listeners can extract
 *   error details from the response body. Listeners to this event
 *   should set the `response.error` property.
 *   @param (see AWS.Request~send)
 *   @context (see AWS.Request~send)
 *
 * @!event extractData(response)
 *   Triggered in successful requests to allow listeners to
 *   de-serialize the response body into `response.data`.
 *   @param (see AWS.Request~send)
 *   @context (see AWS.Request~send)
 *
 * @!group Completion Events
 *
 * @!event success(response)
 *   Triggered when the request completed successfully.
 *   `response.data` will contain the response data and
 *   `response.error` will be null.
 *   @param (see AWS.Request~send)
 *   @context (see AWS.Request~send)
 *
 * @!event error(error, response)
 *   Triggered when an error occurs at any point during the
 *   request. `response.error` will contain details about the error
 *   that occurred. `response.data` will be null.
 *   @param error [Error] the error object containing details about
 *     the error that occurred.
 *   @param (see AWS.Request~send)
 *   @context (see AWS.Request~send)
 *
 * @!event complete(response)
 *   Triggered whenever a request cycle completes. `response.error`
 *   should be checked, since the request may have failed.
 *   @param (see AWS.Request~send)
 *   @context (see AWS.Request~send)
 *
 * @!group HTTP Events
 *
 * @!event httpHeaders(statusCode, headers, response)
 *   Triggered when headers are sent by the remote server
 *   @param statusCode [Integer] the HTTP response code
 *   @param headers [map<String,String>] the response headers
 *   @param (see AWS.Request~send)
 *   @context (see AWS.Request~send)
 *
 * @!event httpData(chunk, response)
 *   Triggered when data is sent by the remote server
 *   @param chunk [Buffer] the buffer data containing the next data chunk
 *     from the server
 *   @param (see AWS.Request~send)
 *   @context (see AWS.Request~send)
 *   @see AWS.EventListeners.Core.HTTP_DATA
 *
 * @!event httpError(error, response)
 *   Triggered when the HTTP request failed
 *   @param error [Error] the error object that was thrown
 *   @param (see AWS.Request~send)
 *   @context (see AWS.Request~send)
 *
 * @!event httpDone(response)
 *   Triggered when the server is finished sending data
 *   @param (see AWS.Request~send)
 *   @context (see AWS.Request~send)
 *
 * @see AWS.Response
 */
AWS.Request = inherit({

  /**
   * Creates a request for an operation on a given client with
   * a set of input parameters.
   *
   * @param client [AWS.Client] the low-level client to perform
   *   the operation on
   * @param operation [String] the operation to perform on the
   *   client
   * @param params [Object] parameters to send to the operation.
   *   See the operation's documentation for the format of the
   *   parameters.
   */
  constructor: function Request(client, operation, params) {
    var endpoint = client.endpoint;
    var region = client.config.region;

    this.client = client;
    this.operation = operation;
    this.params = params || {};
    this.httpRequest = new AWS.HttpRequest(endpoint, region);
  },

  /**
   * @!group Sending a Request
   */

  /**
   * @overload send()
   *   Sends the request object.
   *
   *   @example Sending a request
   *     request = s3.client.putObject({Bucket: 'bucket', Key: 'key'});
   *     request.on('complete', function(req, resp) { ... }); // register a callback
   *     request.send();
   */
  send: function send(response) {
    response = response || new AWS.Response(this);
    this.emitEvents(response, 'validate', 'build', 'afterBuild', 'sign', 'send');
    if (response.error) this.completeRequest(response);
    return response;
  },

  /**
   * Converts the request object into a readable stream that
   * can be read from or piped into a writable stream.
   *
   * @note The data read from a readable stream contains only
   *   the raw HTTP body contents.
   * @example Manually reading from a stream
   *   request.createReadStream().on('data', function(data) {
   *     console.log("Got data:", data.toString());
   *   });
   * @example Piping a request body into a file
   *   var out = fs.createWriteStream('/path/to/outfile.jpg');
   *   s3.client.getObject(params).createReadStream().pipe(out);
   * @return [Stream] the readable stream object that can be piped
   *   or read from (by registering 'data' event listeners).
   */
  createReadStream: function createReadStream() {
    var req = this;
    var stream = new Stream();

    stream.readable = true;
    stream.on('newListener', function(event) {
      if (event === 'data') {
        process.nextTick(function() { req.send(); });
      }
    });

    this.on('httpHeaders', function(statusCode) {
      if (statusCode < 300) {
        // Remove httpData, httpError listeners, add streaming listeners
        req.removeListener('httpData', AWS.EventListeners.Core.HTTP_DATA);
        req.removeListener('httpError', AWS.EventListeners.Core.HTTP_ERROR);

        req.on('httpData', function(data) {
          stream.emit('data', data);
        });

        req.on('httpDone', function() {
          stream.emit('end');
          stream.readable = false;
        });

        req.on('httpError', function(error, resp) {
          resp.error = error;
          resp.error.retryable = false;
          this.completeRequest(resp);
        });
      }
    });

    this.on('error', function(err) {
      stream.emit('error', err);
    });

    return stream;
  },

  /**
   * @api private
   */
  completeRequest: function completeRequest(response) {
    this.emitEvents(response, 'extractError', 'extractData');

    if (response.error) {
      this.emitEventsAlways(response, 'retry');
      if (!response.error) return;
      if (this.listeners('error').length > 0) {
        this.emitEvent('error', response);
      }
    } else {
      this.emitEvents(response, 'success');
    }
    this.emitEventsAlways(response, 'complete');
  },

  /**
   * @api private
   */
  emitEventsAlways: function emitEventsAlways() {
    var response = arguments[0];
    for (var i = 1; i < arguments.length; i++) {
      var eventName = arguments[i];
      if (this.listeners(eventName).length > 0) {
        this.emitEvent(eventName, response);
      }
    }
  },

  /**
   * @api private
   */
  emitEvents: function emitEvents() {
    var response = arguments[0];
    if (response.error) return;
    for (var i = 1; i < arguments.length; i++) {
      var eventName = arguments[i];
      if (response.error) return AWS.util.abort;
      if (this.listeners(eventName).length > 0) {
        this.emitEvent(eventName, response);
      }
    }
  },

  /**
   * @api private
   */
  emitEvent: function emitEvent(eventName, response) {
    try {
      var args;
      if (arguments.length > 2) {
        // TODO: accept any amount of arguments
        args = [eventName, arguments[2], arguments[3], arguments[4], arguments[5]];
      } else {
        args = this.eventParameters(eventName, response);
      }
      this.emit.apply(this, args);
    } catch (err) {
      response.error = err;
    }
  },

  /**
   * @api private
   */
  eventParameters: function eventParameters(eventName, response) {
    /*jshint maxcomplexity:8*/
    switch (eventName) {
      case 'validate': case 'sign':
      case 'build': case 'afterBuild':
        return [eventName, this];
      case 'error':
        return [eventName, response.error, response];
      default:
        return [eventName, response];
    }
  }
});

AWS.util.mixin(AWS.Request, AWS.EventEmitter);

/**
 * This class encapsulates the the response information
 * from a service request operation sent through {AWS.Request}.
 * The response object has two main properties for getting information
 * back from a request:
 *
 * ## The `data` property
 *
 * The `response.data` property contains the serialized object data
 * retrieved from the service request. For instance, for an
 * Amazon DynamoDB `listTables` method call, the response data might
 * look like:
 *
 * ```
 * > resp.data
 * { TableNames:
 *    [ 'table1', 'table2', ... ] }
 * ```
 *
 * The `data` property can be null if an error occurs (see below).
 *
 * ## The `error` property
 *
 * In the event of a service error (or transfer error), the
 * `response.error` property will be filled with the given
 * error data in the form:
 *
 * ```
 * { code: 'SHORT_UNIQUE_ERROR_CODE',
 *   message: 'Some human readable error message' }
 * ```
 *
 * In the case of an error, the `data` property will be `null`.
 * Note that if you handle events that can be in a failure state,
 * you should always check whether `response.error` is set
 * before attempting to access the `response.data` property.
 *
 * @!attribute data
 *   @readonly
 *   @!group Data Properties
 *   @note Inside of a {AWS.Request~httpData} event, this
 *     property contains a single raw packet instead of the
 *     full de-serialized service response.
 *   @return [Object] the de-serialized response data
 *     from the service.
 *
 * @!attribute error
 *   An structure containing information about a service
 *   or networking error.
 *   @readonly
 *   @!group Data Properties
 *   @note This attribute is only filled if a service or
 *     networking error occurs.
 *   @return [Object]
 *     * code [String] a unique short code representing the
 *       error that was emitted.
 *     * message [String] a longer human readable error message
 *     * retryable [Boolean] whether the error message is
 *       retryable.
 *
 * @!attribute client
 *   @readonly
 *   @!group Operation Properties
 *   @return [AWS.Client] The low-level service client object
 *     that initiated the request.
 *
 * @!attribute operation
 *   @readonly
 *   @!group Operation Properties
 *   @return [String] the name of the operation executed on
 *     the service.
 *
 * @!attribute params
 *   @readonly
 *   @!group Operation Properties
 *   @return [Object] the parameters sent in the request to
 *     the service.
 *
 * @!attribute retryCount
 *   @readonly
 *   @!group Operation Properties
 *   @return [Integer] the number of retries that have were
 *     attempted before the request was completed.
 *
 * @!attribute httpResponse
 *   @readonly
 *   @!group HTTP Properties
 *   @return [AWS.HttpResponse] the raw HTTP response object
 *     containing the response headers and body information
 *     from the server.
 *
 * @see AWS.Request
 */
AWS.Response = inherit({

  /**
   * @api private
   */
  constructor: function Response(request) {
    this.request = request;
    this.data = null;
    this.error = null;
    this.retryCount = 0;
    this.httpResponse = new AWS.HttpResponse();
  }

});

})(require("__browserify_process"))
},{"stream":76,"./core":2,"__browserify_process":71}],38:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('./core');
require('./event_listeners');
var inherit = AWS.util.inherit;

/**
 * @api private
 */
AWS.Client = inherit({

  constructor: function Client(config) {
    var defaultConfig = new AWS.Config(AWS.config);
    if (config === undefined) {
      config = defaultConfig;
    } else {
      config = AWS.util.merge(defaultConfig, config);
    }
    this.config = config;
    this.setEndpoint(this.config.endpoint);
  },

  api: {},

  defaultRetryCount: 3,

  makeRequest: function makeRequest(operation, params, callback) {
    if (typeof params === 'function') {
      callback = params;
      params = {};
    }

    var request =  new AWS.Request(this, operation, params);
    this.addAllRequestListeners(request);

    if (callback) {
      request.on('complete', function (resp) {
        callback.call(resp, resp.error, resp.data);
      });
      request.send();
    }

    return request;
  },

  addAllRequestListeners: function addAllRequestListeners(request) {
    var list = [AWS.events, AWS.EventListeners.Core,
                this.serviceInterface()];
    for (var i = 0; i < list.length; i++) {
      if (list[i]) request.addListeners(list[i]);
    }

    // disable parameter validation
    if (!this.config.paramValidation) {
      request.removeListener('validate',
        AWS.EventListeners.Core.VALIDATE_PARAMETERS);
    }

    this.setupRequestListeners(request);
  },

  setupRequestListeners: function setupRequestListeners() {
  },

  serviceInterface: function serviceInterface() {
    /*jshint maxcomplexity:8*/
    switch (this.api.format) {
      case 'query': return AWS.EventListeners.Query;
      case 'json': return AWS.EventListeners.Json;
      case 'rest-json': return AWS.EventListeners.RestJson;
      case 'rest-xml': return AWS.EventListeners.RestXml;
    }
    if (this.api.format) {
      throw new Error('Invalid service `format\' ' +
        this.api.format + ' in API config');
    }
  },

  successfulResponse: function successfulResponse(resp) {
    return resp.httpResponse.statusCode < 300;
  },

  /**
   * How many times a failed request should be retried before giving up.
   * the defaultRetryCount can be overriden by client classes.
   */
  numRetries: function numRetries() {
    if (this.config.maxRetries !== undefined) {
      return this.config.maxRetries;
    } else {
      return this.defaultRetryCount;
    }
  },

  retryDelays: function retryDelays() {
    var retryCount = this.numRetries();
    var delays = [];
    for (var i = 0; i < retryCount; ++i) {
      delays[i] = Math.pow(2, i) * 30;
    }
    return delays;
  },

  retryableError: function retryableError(error) {
    if (this.networkingError(error)) return true;
    if (this.expiredCredentialsError(error)) return true;
    if (this.throttledError(error)) return true;
    if (error.statusCode >= 500) return true;
    return false;
  },

  networkingError: function networkingError(error) {
    return error.code == 'NetworkingError';
  },

  expiredCredentialsError: function expiredCredentialsError(error) {
    // TODO : this only handles *one* of the expired credential codes
    return (error.code === 'ExpiredTokenException');
  },

  throttledError: function throttledError(error) {
    // this logic varies between clients
    return (error.code == 'ProvisionedThroughputExceededException');
  },

  setEndpoint: function setEndpoint(endpoint) {
    if (endpoint) {
      this.endpoint = new AWS.Endpoint(endpoint, this.config);
    } else if (this.api.globalEndpoint) {
      this.endpoint = new AWS.Endpoint(this.api.globalEndpoint, this.config);
    } else {
      var host = this.api.endpointPrefix + '.' + this.config.region + '.amazonaws.com';
      this.endpoint = new AWS.Endpoint(host, this.config);
    }
  }

});

AWS.util.update(AWS.Client, {

  /**
   * Adds one method for each operation described in the api configuration
   */
  defineMethods: function defineMethods(client) {
    AWS.util.each(client.prototype.api.operations, function iterator(method) {
      client.prototype[method] = function (params, callback) {
        return this.makeRequest(method, params, callback);
      };
    });
  },

  defineClient: function defineClient(apiConfig, features) {
    apiConfig = apiConfig || {};
    if (typeof apiConfig === 'string') {
      apiConfig = require(apiConfig);
    }
    var client = AWS.util.inherit(AWS.Client, features || {});
    client.prototype.api = apiConfig;
    AWS.Client.defineMethods(client);
    return client;
  }
});

module.exports = AWS.Client;

},{"./core":2,"./event_listeners":36}],39:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('./core');
var inherit = AWS.util.inherit;

/**
 * @api private
 */
AWS.Service = inherit({
  constructor: function Service(config) {
    this.client = new this.constructor.Client(config);
  }
});

/**
 * @api private
 */
AWS.Service.defineService = function defineService(apiConfig, features) {
  features = features || {};
  var svc = inherit(AWS.Service, features.Service || {});
  svc.Client = AWS.Client.defineClient(apiConfig, features.Client);
  return svc;
};

},{"./core":2}],40:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('../core');
var inherit = AWS.util.inherit;

/**
 * @api private
 */
AWS.Signers.RequestSigner = inherit({
  constructor: function RequestSigner(request) {
    this.request = request;
  }
});

AWS.Signers.RequestSigner.getVersion = function getVersion(version) {
  /*jshint maxcomplexity:8*/
  switch (version) {
    case 'v2': return AWS.Signers.V2;
    case 'v3': return AWS.Signers.V3;
    case 'v4': return AWS.Signers.V4;
    case 's3': return AWS.Signers.S3;
    case 'v3https': return AWS.Signers.V3Https;
    case 'cloudfront': return AWS.Signers.CloudFront;
  }
  throw new Error('Unknown signing version ' + version);
};

require('./v2');
require('./v3');
require('./v3https');
require('./v4');
require('./s3');
require('./cloudfront');

},{"../core":2,"./v2":85,"./v3":86,"./v3https":87,"./v4":88,"./s3":89,"./cloudfront":90}],41:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('./core');
var Stream = require('stream').Stream;
var Buffer = require('buffer').Buffer;

/**
 * @api private
 */
AWS.ParamValidator = AWS.util.inherit({
  validate: function validate(rules, params, context) {
    var cRules = (rules || {}).members || {};
    var payload = rules ? rules.xml : null;
    if (payload) {
      cRules = AWS.util.merge(cRules, (cRules[payload] || {}).members || {});
      delete cRules[payload];
    }

    return this.validateStructure(cRules, params || {}, context || 'params');
  },

  validateStructure: function validateStructure(rules, params, context) {
    /*jshint maxcomplexity:12*/
    this.validateType(context, params, ['object'], 'structure');

    /*jshint forin:false*/
    for (var paramName in rules) {
      if (!rules.hasOwnProperty(paramName)) continue;
      if (rules[paramName].required && params[paramName] === undefined) {
        this.fail('MissingRequiredParameter',
          'Missing required key \'' + paramName + '\' in ' + context);
      }
    }

    // validate hash members
    for (paramName in params) {
      var paramValue = params[paramName],
          paramRules = rules[paramName];

      if (paramRules !== undefined) {
        var memberContext = [context, paramName].join('.');
        this.validateMember(paramRules, paramValue, memberContext);
      } else {
        this.fail('UnexpectedParameter',
          'Unexpected key \'' + paramName + '\' found in ' + context);
      }
    }

    return true;
  },

  validateMember: function validateMember(rules, param, context) {
    var memberRules = rules.members || {};
    switch(rules.type) {
      case 'structure':
        return this.validateStructure(memberRules, param, context);
      case 'list':
        return this.validateList(memberRules, param, context);
      case 'map':
        return this.validateMap(memberRules, param, context);
      default:
        return this.validateScalar(rules, param, context);
    }
  },

  validateList: function validateList(rules, params, context) {
    this.validateType(context, params, [Array]);

    // validate array members
    for (var i = 0; i < params.length; i++) {
      this.validateMember(rules, params[i], context + '[' + i + ']');
    }
  },

  validateMap: function validateMap(rules, params, context) {
    this.validateType(context, params, ['object'], 'map');

    /*jshint forin:false*/
    for (var param in params) {
      if (!params.hasOwnProperty(param)) continue;
      this.validateMember(rules, params[param],
                          context + '[\'' +  param + '\']');
    }
  },

  validateScalar: function validateScalar(rules, value, context) {
    /*jshint maxcomplexity:12*/
    switch (rules.type) {
      case null:
      case undefined:
      case 'string':
        return this.validateType(context, value, ['string']);
      case 'base64':
      case 'binary':
        return this.validateType(context, value, ['string', Buffer, Stream]);
      case 'integer':
      case 'float':
        return this.validateType(context, value, ['number']);
      case 'boolean':
        return this.validateType(context, value, ['boolean']);
      case 'timestamp':
        return this.validateType(context, value, [Date,
          /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?Z$/],
          'Date object or ISO-8601 string');
      default:
        return this.fail('UnkownType', 'Unhandled type ' +
                         rules.type + ' for ' + context);
    }
  },

  fail: function fail(code, message) {
    throw AWS.util.error(new Error(message), {code: code});
  },

  validateType: function validateType(context, value, acceptedTypes, type) {
    /*jshint maxcomplexity:12*/
    var foundInvalidType = false;
    for (var i = 0; i < acceptedTypes.length; i++) {
      if (typeof acceptedTypes[i] === 'string') {
        if (typeof value === acceptedTypes[i]) return;
      } else if (acceptedTypes[i] instanceof RegExp) {
        if ((value || '').match(acceptedTypes[i])) return;
      } else {
        if (value instanceof acceptedTypes[i]) return;
        if (AWS.util.isType(value, acceptedTypes[i].name)) return;
        if (!type && !foundInvalidType) acceptedTypes = acceptedTypes.slice();
        acceptedTypes[i] = acceptedTypes[i].name;
      }
      foundInvalidType = true;
    }

    var acceptedType = type;
    if (!acceptedType) {
      /*jshint regexp:false*/
      acceptedType = acceptedTypes.join(', ').replace(/,([^,]+)$/, ', or$1');
    }

    var vowel = acceptedType.match(/^[aeiou]/i) ? 'n' : '';
    this.fail('InvalidParameterType', 'Expected ' + context + ' to be a' +
              vowel + ' ' + acceptedType);
  }
});

},{"stream":76,"buffer":73,"./core":2}],74:[function(require,module,exports){var punycode = { encode : function (s) { return s } };

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

function arrayIndexOf(array, subject) {
    for (var i = 0, j = array.length; i < j; i++) {
        if(array[i] == subject) return i;
    }
    return -1;
}

var objectKeys = Object.keys || function objectKeys(object) {
    if (object !== Object(object)) throw new TypeError('Invalid object');
    var keys = [];
    for (var key in object) if (object.hasOwnProperty(key)) keys[keys.length] = key;
    return keys;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]+$/,
    // RFC 2396: characters reserved for delimiting URLs.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],
    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '~', '[', ']', '`'].concat(delims),
    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''],
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#']
      .concat(unwise).concat(autoEscape),
    nonAuthChars = ['/', '@', '?', '#'].concat(delims),
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[a-zA-Z0-9][a-z0-9A-Z_-]{0,62}$/,
    hostnamePartStart = /^([a-zA-Z0-9][a-z0-9A-Z_-]{0,62})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always have a path component.
    pathedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = require('querystring');

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && typeof(url) === 'object' && url.href) return url;

  if (typeof url !== 'string') {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  var out = {},
      rest = url;

  // cut off any delimiters.
  // This is to support parse stuff like "<http://foo.com>"
  for (var i = 0, l = rest.length; i < l; i++) {
    if (arrayIndexOf(delims, rest.charAt(i)) === -1) break;
  }
  if (i !== 0) rest = rest.substr(i);


  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    out.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      out.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {
    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    // don't enforce full RFC correctness, just be unstupid about it.

    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the first @ sign, unless some non-auth character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    var atSign = arrayIndexOf(rest, '@');
    if (atSign !== -1) {
      // there *may be* an auth
      var hasAuth = true;
      for (var i = 0, l = nonAuthChars.length; i < l; i++) {
        var index = arrayIndexOf(rest, nonAuthChars[i]);
        if (index !== -1 && index < atSign) {
          // not a valid auth.  Something like http://foo.com/bar@baz/
          hasAuth = false;
          break;
        }
      }
      if (hasAuth) {
        // pluck off the auth portion.
        out.auth = rest.substr(0, atSign);
        rest = rest.substr(atSign + 1);
      }
    }

    var firstNonHost = -1;
    for (var i = 0, l = nonHostChars.length; i < l; i++) {
      var index = arrayIndexOf(rest, nonHostChars[i]);
      if (index !== -1 &&
          (firstNonHost < 0 || index < firstNonHost)) firstNonHost = index;
    }

    if (firstNonHost !== -1) {
      out.host = rest.substr(0, firstNonHost);
      rest = rest.substr(firstNonHost);
    } else {
      out.host = rest;
      rest = '';
    }

    // pull out port.
    var p = parseHost(out.host);
    var keys = objectKeys(p);
    for (var i = 0, l = keys.length; i < l; i++) {
      var key = keys[i];
      out[key] = p[key];
    }

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    out.hostname = out.hostname || '';

    // validate a little.
    if (out.hostname.length > hostnameMaxLen) {
      out.hostname = '';
    } else {
      var hostparts = out.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            out.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    // hostnames are always lower case.
    out.hostname = out.hostname.toLowerCase();

    // IDNA Support: Returns a puny coded representation of "domain".
    // It only converts the part of the domain name that
    // has non ASCII characters. I.e. it dosent matter if
    // you call it with a domain that already is in ASCII.
    var domainArray = out.hostname.split('.');
    var newOut = [];
    for (var i = 0; i < domainArray.length; ++i) {
      var s = domainArray[i];
      newOut.push(s.match(/[^A-Za-z0-9_-]/) ?
          'xn--' + punycode.encode(s) : s);
    }
    out.hostname = newOut.join('.');

    out.host = (out.hostname || '') +
        ((out.port) ? ':' + out.port : '');
    out.href += out.host;
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }

    // Now make sure that delims never appear in a url.
    var chop = rest.length;
    for (var i = 0, l = delims.length; i < l; i++) {
      var c = arrayIndexOf(rest, delims[i]);
      if (c !== -1) {
        chop = Math.min(c, chop);
      }
    }
    rest = rest.substr(0, chop);
  }


  // chop off from the tail first.
  var hash = arrayIndexOf(rest, '#');
  if (hash !== -1) {
    // got a fragment string.
    out.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = arrayIndexOf(rest, '?');
  if (qm !== -1) {
    out.search = rest.substr(qm);
    out.query = rest.substr(qm + 1);
    if (parseQueryString) {
      out.query = querystring.parse(out.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    out.search = '';
    out.query = {};
  }
  if (rest) out.pathname = rest;
  if (slashedProtocol[proto] &&
      out.hostname && !out.pathname) {
    out.pathname = '/';
  }

  //to support http.request
  if (out.pathname || out.search) {
    out.path = (out.pathname ? out.pathname : '') +
               (out.search ? out.search : '');
  }

  // finally, reconstruct the href based on what has been validated.
  out.href = urlFormat(out);
  return out;
}

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (typeof(obj) === 'string') obj = urlParse(obj);

  var auth = obj.auth || '';
  if (auth) {
    auth = auth.split('@').join('%40');
    for (var i = 0, l = nonAuthChars.length; i < l; i++) {
      var nAC = nonAuthChars[i];
      auth = auth.split(nAC).join(encodeURIComponent(nAC));
    }
    auth += '@';
  }

  var protocol = obj.protocol || '',
      host = (obj.host !== undefined) ? auth + obj.host :
          obj.hostname !== undefined ? (
              auth + obj.hostname +
              (obj.port ? ':' + obj.port : '')
          ) :
          false,
      pathname = obj.pathname || '',
      query = obj.query &&
              ((typeof obj.query === 'object' &&
                objectKeys(obj.query).length) ?
                 querystring.stringify(obj.query) :
                 '') || '',
      search = obj.search || (query && ('?' + query)) || '',
      hash = obj.hash || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (obj.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  return protocol + host + pathname + search + hash;
}

function urlResolve(source, relative) {
  return urlFormat(urlResolveObject(source, relative));
}

function urlResolveObject(source, relative) {
  if (!source) return relative;

  source = urlParse(urlFormat(source), false, true);
  relative = urlParse(urlFormat(relative), false, true);

  // hash is always overridden, no matter what.
  source.hash = relative.hash;

  if (relative.href === '') {
    source.href = urlFormat(source);
    return source;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    relative.protocol = source.protocol;
    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[relative.protocol] &&
        relative.hostname && !relative.pathname) {
      relative.path = relative.pathname = '/';
    }
    relative.href = urlFormat(relative);
    return relative;
  }

  if (relative.protocol && relative.protocol !== source.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      relative.href = urlFormat(relative);
      return relative;
    }
    source.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      relative.pathname = relPath.join('/');
    }
    source.pathname = relative.pathname;
    source.search = relative.search;
    source.query = relative.query;
    source.host = relative.host || '';
    source.auth = relative.auth;
    source.hostname = relative.hostname || relative.host;
    source.port = relative.port;
    //to support http.request
    if (source.pathname !== undefined || source.search !== undefined) {
      source.path = (source.pathname ? source.pathname : '') +
                    (source.search ? source.search : '');
    }
    source.slashes = source.slashes || relative.slashes;
    source.href = urlFormat(source);
    return source;
  }

  var isSourceAbs = (source.pathname && source.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host !== undefined ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (source.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = source.pathname && source.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = source.protocol &&
          !slashedProtocol[source.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // source.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {

    delete source.hostname;
    delete source.port;
    if (source.host) {
      if (srcPath[0] === '') srcPath[0] = source.host;
      else srcPath.unshift(source.host);
    }
    delete source.host;
    if (relative.protocol) {
      delete relative.hostname;
      delete relative.port;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      delete relative.host;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    source.host = (relative.host || relative.host === '') ?
                      relative.host : source.host;
    source.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : source.hostname;
    source.search = relative.search;
    source.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    source.search = relative.search;
    source.query = relative.query;
  } else if ('search' in relative) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      source.hostname = source.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especialy happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = source.host && arrayIndexOf(source.host, '@') > 0 ?
                       source.host.split('@') : false;
      if (authInHost) {
        source.auth = authInHost.shift();
        source.host = source.hostname = authInHost.shift();
      }
    }
    source.search = relative.search;
    source.query = relative.query;
    //to support http.request
    if (source.pathname !== undefined || source.search !== undefined) {
      source.path = (source.pathname ? source.pathname : '') +
                    (source.search ? source.search : '');
    }
    source.href = urlFormat(source);
    return source;
  }
  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    delete source.pathname;
    //to support http.request
    if (!source.search) {
      source.path = '/' + source.search;
    } else {
      delete source.path;
    }
    source.href = urlFormat(source);
    return source;
  }
  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (source.host || relative.host) && (last === '.' || last === '..') ||
      last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last == '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    source.hostname = source.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especialy happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = source.host && arrayIndexOf(source.host, '@') > 0 ?
                     source.host.split('@') : false;
    if (authInHost) {
      source.auth = authInHost.shift();
      source.host = source.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (source.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  source.pathname = srcPath.join('/');
  //to support request.http
  if (source.pathname !== undefined || source.search !== undefined) {
    source.path = (source.pathname ? source.pathname : '') +
                  (source.search ? source.search : '');
  }
  source.auth = relative.auth || source.auth;
  source.slashes = source.slashes || relative.slashes;
  source.href = urlFormat(source);
  return source;
}

function parseHost(host) {
  var out = {};
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    out.port = port.substr(1);
    host = host.substr(0, host.length - port.length);
  }
  if (host) out.hostname = host;
  return out;
}

},{"querystring":91}],75:[function(require,module,exports){// nothing to see here... no file methods for the browser

},{}],76:[function(require,module,exports){var events = require('events');
var util = require('util');

function Stream() {
  events.EventEmitter.call(this);
}
util.inherits(Stream, events.EventEmitter);
module.exports = Stream;
// Backwards-compat with node 0.4.x
Stream.Stream = Stream;

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once, and
  // only when all sources have ended.
  if (!dest._isStdio && (!options || options.end !== false)) {
    dest._pipeCount = dest._pipeCount || 0;
    dest._pipeCount++;

    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest._pipeCount--;

    // remove the listeners
    cleanup();

    if (dest._pipeCount > 0) {
      // waiting for other incoming streams to end.
      return;
    }

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest._pipeCount--;

    // remove the listeners
    cleanup();

    if (dest._pipeCount > 0) {
      // waiting for other incoming streams to end.
      return;
    }

    dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (this.listeners('error').length === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('end', cleanup);
    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('end', cleanup);
  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":79,"util":92}],77:[function(require,module,exports){var http = require('http');

var https = module.exports;

for (var key in http) {
    if (http.hasOwnProperty(key)) https[key] = http[key];
};

https.request = function (params, cb) {
    if (!params) params = {};
    params.scheme = 'https';
    return http.request.call(this, params, cb);
}
},{"http":78}],79:[function(require,module,exports){(function(process){if (!process.EventEmitter) process.EventEmitter = function () {};

var EventEmitter = exports.EventEmitter = process.EventEmitter;
var isArray = typeof Array.isArray === 'function'
    ? Array.isArray
    : function (xs) {
        return Object.prototype.toString.call(xs) === '[object Array]'
    }
;
function indexOf (xs, x) {
    if (xs.indexOf) return xs.indexOf(x);
    for (var i = 0; i < xs.length; i++) {
        if (x === xs[i]) return i;
    }
    return -1;
}

// By default EventEmitters will print a warning if more than
// 10 listeners are added to it. This is a useful default which
// helps finding memory leaks.
//
// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
var defaultMaxListeners = 10;
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!this._events) this._events = {};
  this._events.maxListeners = n;
};


EventEmitter.prototype.emit = function(type) {
  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events || !this._events.error ||
        (isArray(this._events.error) && !this._events.error.length))
    {
      if (arguments[1] instanceof Error) {
        throw arguments[1]; // Unhandled 'error' event
      } else {
        throw new Error("Uncaught, unspecified 'error' event.");
      }
      return false;
    }
  }

  if (!this._events) return false;
  var handler = this._events[type];
  if (!handler) return false;

  if (typeof handler == 'function') {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        var args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
    return true;

  } else if (isArray(handler)) {
    var args = Array.prototype.slice.call(arguments, 1);

    var listeners = handler.slice();
    for (var i = 0, l = listeners.length; i < l; i++) {
      listeners[i].apply(this, args);
    }
    return true;

  } else {
    return false;
  }
};

// EventEmitter is defined in src/node_events.cc
// EventEmitter.prototype.emit() is also defined there.
EventEmitter.prototype.addListener = function(type, listener) {
  if ('function' !== typeof listener) {
    throw new Error('addListener only takes instances of Function');
  }

  if (!this._events) this._events = {};

  // To avoid recursion in the case that type == "newListeners"! Before
  // adding it to the listeners, first emit "newListeners".
  this.emit('newListener', type, listener);

  if (!this._events[type]) {
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  } else if (isArray(this._events[type])) {

    // Check for listener leak
    if (!this._events[type].warned) {
      var m;
      if (this._events.maxListeners !== undefined) {
        m = this._events.maxListeners;
      } else {
        m = defaultMaxListeners;
      }

      if (m && m > 0 && this._events[type].length > m) {
        this._events[type].warned = true;
        console.error('(node) warning: possible EventEmitter memory ' +
                      'leak detected. %d listeners added. ' +
                      'Use emitter.setMaxListeners() to increase limit.',
                      this._events[type].length);
        console.trace();
      }
    }

    // If we've already got an array, just append.
    this._events[type].push(listener);
  } else {
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  var self = this;
  self.on(type, function g() {
    self.removeListener(type, g);
    listener.apply(this, arguments);
  });

  return this;
};

EventEmitter.prototype.removeListener = function(type, listener) {
  if ('function' !== typeof listener) {
    throw new Error('removeListener only takes instances of Function');
  }

  // does not use listeners(), so no side effect of creating _events[type]
  if (!this._events || !this._events[type]) return this;

  var list = this._events[type];

  if (isArray(list)) {
    var i = indexOf(list, listener);
    if (i < 0) return this;
    list.splice(i, 1);
    if (list.length == 0)
      delete this._events[type];
  } else if (this._events[type] === listener) {
    delete this._events[type];
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  if (arguments.length === 0) {
    this._events = {};
    return this;
  }

  // does not use listeners(), so no side effect of creating _events[type]
  if (type && this._events && this._events[type]) this._events[type] = null;
  return this;
};

EventEmitter.prototype.listeners = function(type) {
  if (!this._events) this._events = {};
  if (!this._events[type]) this._events[type] = [];
  if (!isArray(this._events[type])) {
    this._events[type] = [this._events[type]];
  }
  return this._events[type];
};

})(require("__browserify_process"))
},{"__browserify_process":71}],72:[function(require,module,exports){var sha = require('./sha')
var rng = require('./rng')
var md5 = require('./md5')
var CryptoJS = require('./hmac-sha256')
var Buffer = require('buffer').Buffer
window.CryptoJS = CryptoJS;

function hex_sha256(text) {
  return CryptoJS.SHA256(text).toString(CryptoJS.enc.Hex);
}

function bin_sha256(text) {
  return CryptoJS.SHA256(text).toString(CryptoJS.enc.Latin1);
}

function str2words(input)
{
  var buf = new Buffer(input);
  var words = [];
  for (var i = 0; i < buf.length / 4; i += 4) {
    words.push(buf.readUInt32LE(i));
  }
  return words;
}


var algorithms = {
  sha1: {
    hex: sha.hex_sha1,
    base64: sha.b64_sha1,
    binary: sha.b64_sha1,
    ascii: sha.str_sha1
  },
  sha256: {
    hex: hex_sha256,
    binary: bin_sha256
  },
  md5: {
    hex: md5.hex_md5,
    base64: md5.b64_md5,
    binary: md5.bin_md5,
    ascii: md5.any_md5
  }
}

var hmacAlgorithms = {
  sha1: {
    hex: [CryptoJS.enc.Hex, CryptoJS.HmacSHA1],
    base64: [CryptoJS.enc.Base64, CryptoJS.HmacSHA1],
    binary: [CryptoJS.enc.Latin1, CryptoJS.HmacSHA1],
  },
  sha256: {
    hex: [CryptoJS.enc.Hex, CryptoJS.HmacSHA256],
    base64: [CryptoJS.enc.Base64, CryptoJS.HmacSHA256],
    binary: [CryptoJS.enc.Latin1, CryptoJS.HmacSHA256],
  },
  md5: {
    hex: [CryptoJS.enc.Hex, CryptoJS.HmacMD5],
    base64: [CryptoJS.enc.Base64, CryptoJS.HmacMD5],
    binary: [CryptoJS.enc.Latin1, CryptoJS.HmacMD5],
  }
}

function error () {
  var m = [].slice.call(arguments).join(' ')
  throw new Error([
    m,
    'we accept pull requests',
    'http://github.com/dominictarr/crypto-browserify'
    ].join('\n'))
}

exports.createHash = function (alg) {
  alg = alg || 'sha1'
  if(!algorithms[alg])
    error('algorithm:', alg, 'is not yet supported')
  var s = ''
  var _alg = algorithms[alg]
  return {
    update: function (data) {
      s += data
      return this
    },
    digest: function (enc) {
      enc = enc || 'binary'
      var fn
      if(!(fn = _alg[enc]))
        error('encoding:', enc , 'is not yet supported for algorithm', alg)
      var r = fn(s)
      s = null //not meant to use the hash after you've called digest.
      return r
    }
  }
}

exports.createHmac = function createHmac(algorithm, key) {
  algorithm = algorithm || 'sha256';
  if(!hmacAlgorithms[algorithm])
    error('algorithm:', algorithm, 'is not yet supported');
  var _alg = hmacAlgorithms[algorithm];

  var s = '';
  hmac = {
    update: function hmacUpdate(data, encoding) {
      s += data;
      return hmac;
    },
    digest: function hmacDigest(encoding) {
      encoding = encoding || 'binary';
      var encoder = _alg[encoding][0];
      if (!encoder)
        error('encoding:', encoding, 'is not yet supported for algorithm', algorithm);

      var fn = _alg[encoding][1];
      var finalHash = fn(s, key);

      if (encoding === 'binary') {
        return finalHash;
      } else {
        return finalHash.toString(encoder);
      }
    }
  };
  return hmac;
}


exports.randomBytes = function(size, callback) {
  if (callback && callback.call) {
    try {
      callback.call(this, undefined, rng(size));
    } catch (err) { callback(err); }
  } else {
    return rng(size);
  }
}

// the least I can do is make error messages for the rest of the node.js/crypto api.
;['createCredentials'
, 'createCypher'
, 'createCypheriv'
, 'createDecipher'
, 'createDecipheriv'
, 'createSign'
, 'createVerify'
, 'createDeffieHellman'
, 'pbkdf2'].forEach(function (name) {
  exports[name] = function () {
    error('sorry,', name, 'is not implemented yet')
  }
})

},{"buffer":73,"./sha":93,"./rng":94,"./md5":95,"./hmac-sha256":96}],78:[function(require,module,exports){var http = module.exports;
var EventEmitter = require('events').EventEmitter;
var Request = require('./lib/request');

http.request = function (params, cb) {
    if (!params) params = {};
    if (!params.host) params.host = window.location.host.split(':')[0];
    if (!params.port) params.port = window.location.port;
    
    var req = new Request(new xhrHttp, params);
    if (cb) req.on('response', cb);
    return req;
};

http.get = function (params, cb) {
    params.method = 'GET';
    var req = http.request(params, cb);
    req.end();
    return req;
};

http.Agent = function () {};
http.Agent.defaultMaxSockets = 4;

var xhrHttp = (function () {
    if (typeof window === 'undefined') {
        throw new Error('no window object present');
    }
    else if (window.XMLHttpRequest) {
        return window.XMLHttpRequest;
    }
    else if (window.ActiveXObject) {
        var axs = [
            'Msxml2.XMLHTTP.6.0',
            'Msxml2.XMLHTTP.3.0',
            'Microsoft.XMLHTTP'
        ];
        for (var i = 0; i < axs.length; i++) {
            try {
                var ax = new(window.ActiveXObject)(axs[i]);
                return function () {
                    if (ax) {
                        var ax_ = ax;
                        ax = null;
                        return ax_;
                    }
                    else {
                        return new(window.ActiveXObject)(axs[i]);
                    }
                };
            }
            catch (e) {}
        }
        throw new Error('ajax not supported in this browser')
    }
    else {
        throw new Error('ajax not supported in this browser');
    }
})();

},{"events":79,"./lib/request":97}],98:[function(require,module,exports){// UTILITY
var util = require('util');
var Buffer = require("buffer").Buffer;
var pSlice = Array.prototype.slice;

function objectKeys(object) {
  if (Object.keys) return Object.keys(object);
  var result = [];
  for (var name in object) {
    if (Object.prototype.hasOwnProperty.call(object, name)) {
      result.push(name);
    }
  }
  return result;
}

// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.message = options.message;
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  var stackStartFunction = options.stackStartFunction || fail;

  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  }
};
util.inherits(assert.AssertionError, Error);

function replacer(key, value) {
  if (value === undefined) {
    return '' + value;
  }
  if (typeof value === 'number' && (isNaN(value) || !isFinite(value))) {
    return value.toString();
  }
  if (typeof value === 'function' || value instanceof RegExp) {
    return value.toString();
  }
  return value;
}

function truncate(s, n) {
  if (typeof s == 'string') {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}

assert.AssertionError.prototype.toString = function() {
  if (this.message) {
    return [this.name + ':', this.message].join(' ');
  } else {
    return [
      this.name + ':',
      truncate(JSON.stringify(this.actual, replacer), 128),
      this.operator,
      truncate(JSON.stringify(this.expected, replacer), 128)
    ].join(' ');
  }
};

// assert.AssertionError instanceof Error

assert.AssertionError.__proto__ = Error.prototype;

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!!!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

function _deepEqual(actual, expected) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (Buffer.isBuffer(actual) && Buffer.isBuffer(expected)) {
    if (actual.length != expected.length) return false;

    for (var i = 0; i < actual.length; i++) {
      if (actual[i] !== expected[i]) return false;
    }

    return true;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (actual instanceof Date && expected instanceof Date) {
    return actual.getTime() === expected.getTime();

  // 7.3. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (typeof actual != 'object' && typeof expected != 'object') {
    return actual == expected;

  // 7.4. For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected);
  }
}

function isUndefinedOrNull(value) {
  return value === null || value === undefined;
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b) {
  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  //~~~I've managed to break Object.keys through screwy arguments passing.
  //   Converting to array solves the problem.
  if (isArguments(a)) {
    if (!isArguments(b)) {
      return false;
    }
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b);
  }
  try {
    var ka = objectKeys(a),
        kb = objectKeys(b),
        key, i;
  } catch (e) {//happens when one is a string literal and the other isn't
    return false;
  }
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key])) return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (expected instanceof RegExp) {
    return expected.test(actual);
  } else if (actual instanceof expected) {
    return true;
  } else if (expected.call({}, actual) === true) {
    return true;
  }

  return false;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (typeof expected === 'string') {
    message = expected;
    expected = null;
  }

  try {
    block();
  } catch (e) {
    actual = e;
  }

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail('Missing expected exception' + message);
  }

  if (!shouldThrow && expectedException(actual, expected)) {
    fail('Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws.apply(this, [true].concat(pSlice.call(arguments)));
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
  _throws.apply(this, [false].concat(pSlice.call(arguments)));
};

assert.ifError = function(err) { if (err) {throw err;}};

},{"util":92,"buffer":73}],91:[function(require,module,exports){var isArray = typeof Array.isArray === 'function'
    ? Array.isArray
    : function (xs) {
        return Object.prototype.toString.call(xs) === '[object Array]'
    };

var objectKeys = Object.keys || function objectKeys(object) {
    if (object !== Object(object)) throw new TypeError('Invalid object');
    var keys = [];
    for (var key in object) if (object.hasOwnProperty(key)) keys[keys.length] = key;
    return keys;
}


/*!
 * querystring
 * Copyright(c) 2010 TJ Holowaychuk <tj@vision-media.ca>
 * MIT Licensed
 */

/**
 * Library version.
 */

exports.version = '0.3.1';

/**
 * Object#toString() ref for stringify().
 */

var toString = Object.prototype.toString;

/**
 * Cache non-integer test regexp.
 */

var notint = /[^0-9]/;

/**
 * Parse the given query `str`, returning an object.
 *
 * @param {String} str
 * @return {Object}
 * @api public
 */

exports.parse = function(str){
  if (null == str || '' == str) return {};

  function promote(parent, key) {
    if (parent[key].length == 0) return parent[key] = {};
    var t = {};
    for (var i in parent[key]) t[i] = parent[key][i];
    parent[key] = t;
    return t;
  }

  return String(str)
    .split('&')
    .reduce(function(ret, pair){
      try{ 
        pair = decodeURIComponent(pair.replace(/\+/g, ' '));
      } catch(e) {
        // ignore
      }

      var eql = pair.indexOf('=')
        , brace = lastBraceInKey(pair)
        , key = pair.substr(0, brace || eql)
        , val = pair.substr(brace || eql, pair.length)
        , val = val.substr(val.indexOf('=') + 1, val.length)
        , parent = ret;

      // ?foo
      if ('' == key) key = pair, val = '';

      // nested
      if (~key.indexOf(']')) {
        var parts = key.split('[')
          , len = parts.length
          , last = len - 1;

        function parse(parts, parent, key) {
          var part = parts.shift();

          // end
          if (!part) {
            if (isArray(parent[key])) {
              parent[key].push(val);
            } else if ('object' == typeof parent[key]) {
              parent[key] = val;
            } else if ('undefined' == typeof parent[key]) {
              parent[key] = val;
            } else {
              parent[key] = [parent[key], val];
            }
          // array
          } else {
            obj = parent[key] = parent[key] || [];
            if (']' == part) {
              if (isArray(obj)) {
                if ('' != val) obj.push(val);
              } else if ('object' == typeof obj) {
                obj[objectKeys(obj).length] = val;
              } else {
                obj = parent[key] = [parent[key], val];
              }
            // prop
            } else if (~part.indexOf(']')) {
              part = part.substr(0, part.length - 1);
              if(notint.test(part) && isArray(obj)) obj = promote(parent, key);
              parse(parts, obj, part);
            // key
            } else {
              if(notint.test(part) && isArray(obj)) obj = promote(parent, key);
              parse(parts, obj, part);
            }
          }
        }

        parse(parts, parent, 'base');
      // optimize
      } else {
        if (notint.test(key) && isArray(parent.base)) {
          var t = {};
          for(var k in parent.base) t[k] = parent.base[k];
          parent.base = t;
        }
        set(parent.base, key, val);
      }

      return ret;
    }, {base: {}}).base;
};

/**
 * Turn the given `obj` into a query string
 *
 * @param {Object} obj
 * @return {String}
 * @api public
 */

var stringify = exports.stringify = function(obj, prefix) {
  if (isArray(obj)) {
    return stringifyArray(obj, prefix);
  } else if ('[object Object]' == toString.call(obj)) {
    return stringifyObject(obj, prefix);
  } else if ('string' == typeof obj) {
    return stringifyString(obj, prefix);
  } else {
    return prefix;
  }
};

/**
 * Stringify the given `str`.
 *
 * @param {String} str
 * @param {String} prefix
 * @return {String}
 * @api private
 */

function stringifyString(str, prefix) {
  if (!prefix) throw new TypeError('stringify expects an object');
  return prefix + '=' + encodeURIComponent(str);
}

/**
 * Stringify the given `arr`.
 *
 * @param {Array} arr
 * @param {String} prefix
 * @return {String}
 * @api private
 */

function stringifyArray(arr, prefix) {
  var ret = [];
  if (!prefix) throw new TypeError('stringify expects an object');
  for (var i = 0; i < arr.length; i++) {
    ret.push(stringify(arr[i], prefix + '[]'));
  }
  return ret.join('&');
}

/**
 * Stringify the given `obj`.
 *
 * @param {Object} obj
 * @param {String} prefix
 * @return {String}
 * @api private
 */

function stringifyObject(obj, prefix) {
  var ret = []
    , keys = objectKeys(obj)
    , key;
  for (var i = 0, len = keys.length; i < len; ++i) {
    key = keys[i];
    ret.push(stringify(obj[key], prefix
      ? prefix + '[' + encodeURIComponent(key) + ']'
      : encodeURIComponent(key)));
  }
  return ret.join('&');
}

/**
 * Set `obj`'s `key` to `val` respecting
 * the weird and wonderful syntax of a qs,
 * where "foo=bar&foo=baz" becomes an array.
 *
 * @param {Object} obj
 * @param {String} key
 * @param {String} val
 * @api private
 */

function set(obj, key, val) {
  var v = obj[key];
  if (undefined === v) {
    obj[key] = val;
  } else if (isArray(v)) {
    v.push(val);
  } else {
    obj[key] = [v, val];
  }
}

/**
 * Locate last brace in `str` within the key.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function lastBraceInKey(str) {
  var len = str.length
    , brace
    , c;
  for (var i = 0; i < len; ++i) {
    c = str[i];
    if (']' == c) brace = false;
    if ('[' == c) brace = true;
    if ('=' == c && !brace) return i;
  }
}

},{}],92:[function(require,module,exports){var events = require('events');

exports.isArray = isArray;
exports.isDate = function(obj){return Object.prototype.toString.call(obj) === '[object Date]'};
exports.isRegExp = function(obj){return Object.prototype.toString.call(obj) === '[object RegExp]'};


exports.print = function () {};
exports.puts = function () {};
exports.debug = function() {};

exports.inspect = function(obj, showHidden, depth, colors) {
  var seen = [];

  var stylize = function(str, styleType) {
    // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
    var styles =
        { 'bold' : [1, 22],
          'italic' : [3, 23],
          'underline' : [4, 24],
          'inverse' : [7, 27],
          'white' : [37, 39],
          'grey' : [90, 39],
          'black' : [30, 39],
          'blue' : [34, 39],
          'cyan' : [36, 39],
          'green' : [32, 39],
          'magenta' : [35, 39],
          'red' : [31, 39],
          'yellow' : [33, 39] };

    var style =
        { 'special': 'cyan',
          'number': 'blue',
          'boolean': 'yellow',
          'undefined': 'grey',
          'null': 'bold',
          'string': 'green',
          'date': 'magenta',
          // "name": intentionally not styling
          'regexp': 'red' }[styleType];

    if (style) {
      return '\033[' + styles[style][0] + 'm' + str +
             '\033[' + styles[style][1] + 'm';
    } else {
      return str;
    }
  };
  if (! colors) {
    stylize = function(str, styleType) { return str; };
  }

  function format(value, recurseTimes) {
    // Provide a hook for user-specified inspect functions.
    // Check that value is an object with an inspect function on it
    if (value && typeof value.inspect === 'function' &&
        // Filter out the util module, it's inspect function is special
        value !== exports &&
        // Also filter out any prototype objects using the circular check.
        !(value.constructor && value.constructor.prototype === value)) {
      return value.inspect(recurseTimes);
    }

    // Primitive types cannot have properties
    switch (typeof value) {
      case 'undefined':
        return stylize('undefined', 'undefined');

      case 'string':
        var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                                 .replace(/'/g, "\\'")
                                                 .replace(/\\"/g, '"') + '\'';
        return stylize(simple, 'string');

      case 'number':
        return stylize('' + value, 'number');

      case 'boolean':
        return stylize('' + value, 'boolean');
    }
    // For some reason typeof null is "object", so special case here.
    if (value === null) {
      return stylize('null', 'null');
    }

    // Look up the keys of the object.
    var visible_keys = Object_keys(value);
    var keys = showHidden ? Object_getOwnPropertyNames(value) : visible_keys;

    // Functions without properties can be shortcutted.
    if (typeof value === 'function' && keys.length === 0) {
      if (isRegExp(value)) {
        return stylize('' + value, 'regexp');
      } else {
        var name = value.name ? ': ' + value.name : '';
        return stylize('[Function' + name + ']', 'special');
      }
    }

    // Dates without properties can be shortcutted
    if (isDate(value) && keys.length === 0) {
      return stylize(value.toUTCString(), 'date');
    }

    var base, type, braces;
    // Determine the object type
    if (isArray(value)) {
      type = 'Array';
      braces = ['[', ']'];
    } else {
      type = 'Object';
      braces = ['{', '}'];
    }

    // Make functions say that they are functions
    if (typeof value === 'function') {
      var n = value.name ? ': ' + value.name : '';
      base = (isRegExp(value)) ? ' ' + value : ' [Function' + n + ']';
    } else {
      base = '';
    }

    // Make dates with properties first say the date
    if (isDate(value)) {
      base = ' ' + value.toUTCString();
    }

    if (keys.length === 0) {
      return braces[0] + base + braces[1];
    }

    if (recurseTimes < 0) {
      if (isRegExp(value)) {
        return stylize('' + value, 'regexp');
      } else {
        return stylize('[Object]', 'special');
      }
    }

    seen.push(value);

    var output = keys.map(function(key) {
      var name, str;
      if (value.__lookupGetter__) {
        if (value.__lookupGetter__(key)) {
          if (value.__lookupSetter__(key)) {
            str = stylize('[Getter/Setter]', 'special');
          } else {
            str = stylize('[Getter]', 'special');
          }
        } else {
          if (value.__lookupSetter__(key)) {
            str = stylize('[Setter]', 'special');
          }
        }
      }
      if (visible_keys.indexOf(key) < 0) {
        name = '[' + key + ']';
      }
      if (!str) {
        if (seen.indexOf(value[key]) < 0) {
          if (recurseTimes === null) {
            str = format(value[key]);
          } else {
            str = format(value[key], recurseTimes - 1);
          }
          if (str.indexOf('\n') > -1) {
            if (isArray(value)) {
              str = str.split('\n').map(function(line) {
                return '  ' + line;
              }).join('\n').substr(2);
            } else {
              str = '\n' + str.split('\n').map(function(line) {
                return '   ' + line;
              }).join('\n');
            }
          }
        } else {
          str = stylize('[Circular]', 'special');
        }
      }
      if (typeof name === 'undefined') {
        if (type === 'Array' && key.match(/^\d+$/)) {
          return str;
        }
        name = JSON.stringify('' + key);
        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
          name = name.substr(1, name.length - 2);
          name = stylize(name, 'name');
        } else {
          name = name.replace(/'/g, "\\'")
                     .replace(/\\"/g, '"')
                     .replace(/(^"|"$)/g, "'");
          name = stylize(name, 'string');
        }
      }

      return name + ': ' + str;
    });

    seen.pop();

    var numLinesEst = 0;
    var length = output.reduce(function(prev, cur) {
      numLinesEst++;
      if (cur.indexOf('\n') >= 0) numLinesEst++;
      return prev + cur.length + 1;
    }, 0);

    if (length > 50) {
      output = braces[0] +
               (base === '' ? '' : base + '\n ') +
               ' ' +
               output.join(',\n  ') +
               ' ' +
               braces[1];

    } else {
      output = braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
    }

    return output;
  }
  return format(obj, (typeof depth === 'undefined' ? 2 : depth));
};


function isArray(ar) {
  return ar instanceof Array ||
         Array.isArray(ar) ||
         (ar && ar !== Object.prototype && isArray(ar.__proto__));
}


function isRegExp(re) {
  return re instanceof RegExp ||
    (typeof re === 'object' && Object.prototype.toString.call(re) === '[object RegExp]');
}


function isDate(d) {
  if (d instanceof Date) return true;
  if (typeof d !== 'object') return false;
  var properties = Date.prototype && Object_getOwnPropertyNames(Date.prototype);
  var proto = d.__proto__ && Object_getOwnPropertyNames(d.__proto__);
  return JSON.stringify(proto) === JSON.stringify(properties);
}

function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}

var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}

exports.log = function (msg) {};

exports.pump = null;

var Object_keys = Object.keys || function (obj) {
    var res = [];
    for (var key in obj) res.push(key);
    return res;
};

var Object_getOwnPropertyNames = Object.getOwnPropertyNames || function (obj) {
    var res = [];
    for (var key in obj) {
        if (Object.hasOwnProperty.call(obj, key)) res.push(key);
    }
    return res;
};

var Object_create = Object.create || function (prototype, properties) {
    // from es5-shim
    var object;
    if (prototype === null) {
        object = { '__proto__' : null };
    }
    else {
        if (typeof prototype !== 'object') {
            throw new TypeError(
                'typeof prototype[' + (typeof prototype) + '] != \'object\''
            );
        }
        var Type = function () {};
        Type.prototype = prototype;
        object = new Type();
        object.__proto__ = prototype;
    }
    if (typeof properties !== 'undefined' && Object.defineProperties) {
        Object.defineProperties(object, properties);
    }
    return object;
};

exports.inherits = function(ctor, superCtor) {
  ctor.super_ = superCtor;
  ctor.prototype = Object_create(superCtor.prototype, {
    constructor: {
      value: ctor,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
};

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (typeof f !== 'string') {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(exports.inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j': return JSON.stringify(args[i++]);
      default:
        return x;
    }
  });
  for(var x = args[i]; i < len; x = args[++i]){
    if (x === null || typeof x !== 'object') {
      str += ' ' + x;
    } else {
      str += ' ' + exports.inspect(x);
    }
  }
  return str;
};

},{"events":79}],80:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('../core');

/**
 * @api private
 */
AWS.ServiceInterface.Json = {
  buildRequest: function buildRequest(req) {
    var httpRequest = req.httpRequest;
    var api = req.client.api;
    var target = api.targetPrefix + '.' + api.operations[req.operation].name;
    var version = api.jsonVersion || '1.0';

    httpRequest.body = JSON.stringify(req.params || {});
    httpRequest.headers['Content-Type'] = 'application/x-amz-json-' + version;
    httpRequest.headers['X-Amz-Target'] = target;
  },

  extractError: function extractError(resp) {
    var error = {};
    var httpResponse = resp.httpResponse;

    if (httpResponse.body.length > 0) {
      var e = JSON.parse(httpResponse.body.toString());
      if (e.__type || e.code) {
        error.code = (e.__type || e.code).split('#').pop();
      } else {
        error.code = 'UnknownError';
      }
      if (error.code === 'RequestEntityTooLarge') {
        error.message = 'Request body must be less than 1 MB';
      } else {
        error.message = (e.message || e.Message || null);
      }
    } else {
      error.code = httpResponse.statusCode;
      error.message = null;
    }

    resp.error = AWS.util.error(new Error(), error);
  },

  extractData: function extractData(resp) {
    resp.data = JSON.parse(resp.httpResponse.body.toString() || '{}');
  }
};

},{"../core":2}],81:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('../core');
var inherit = AWS.util.inherit;

require('../xml/parser');

/**
 * @api private
 */
AWS.ServiceInterface.Query = {
  buildRequest: function buildRequest(req) {
    var operation = req.client.api.operations[req.operation];
    var httpRequest = req.httpRequest;
    httpRequest.headers['Content-Type'] =
      'application/x-www-form-urlencoded; charset=utf-8';
    httpRequest.params = new AWS.QueryParamList();
    httpRequest.params.add('Version', req.client.api.apiVersion);
    httpRequest.params.add('Action', operation.name);

    // convert the request parameters into a list of query params,
    // e.g. Deeply.NestedParam.0.Name=value
    var rules = operation.input;
    if (rules) rules = rules.members;
    var builder = new AWS.QueryParamSerializer(rules);
    builder.serialize(req.params, function(name, value) {
      httpRequest.params.add(name, value);
    });
    httpRequest.body = httpRequest.params.toString();
  },

  extractError: function extractError(resp) {
    var data, body = resp.httpResponse.body.toString();
    if (body.match('<UnknownOperationException')) {
      data = {
        Code: 'UnknownOperation',
        Message: 'Unknown operation ' + resp.request.operation
      };
    } else {
      data = new AWS.XML.Parser({}).parse(body);
    }

    if (data.Errors) data = data.Errors;
    if (data.Error) data = data.Error;
    if (data.Code) {
      resp.error = AWS.util.error(new Error(), {
        code: data.Code,
        message: data.Message
      });
    } else {
      resp.error = AWS.util.error(new Error(), {
        code: resp.httpResponse.statusCode,
        message: null
      });
    }
  },

  extractData: function extractData(resp) {
    var req = resp.request;
    var operation = req.client.api.operations[req.operation];
    var wrapperKey = operation.name + 'Result';
    var rules = operation.output || {};

    if (req.client.api.resultWrapped) {
      var tmp = {
        type: 'structure',
        members: {}
      };
      tmp.members[wrapperKey] = rules;
      rules = tmp;
    }

    var parser = new AWS.XML.Parser(rules);
    var data = parser.parse(resp.httpResponse.body.toString());

    if (req.client.api.resultWrapped) {
      if (data[wrapperKey]) {
        AWS.util.update(data, data[wrapperKey]);
        delete data[wrapperKey];
      }
    }

    AWS.util.each((operation.output || {}).members || {}, function (memberName, memberRules) {
      if (memberRules.wrapper && data[memberName]) {
        AWS.util.update(data, data[memberName]);
        delete data[memberName];
      }
    });

    resp.data = data;
  }
};

/**
 * @api private
 */
AWS.QueryParamList = inherit({

  constructor: function QueryParamList() {
    this.params = [];
  },

  add: function add(name, value) {
    this.params.push(new AWS.QueryParam(name, value));
  },

  sortedParams: function sortedParams() {
    return this.params.sort(function (p1, p2) {
      return p1.name < p2.name ? -1 : 1;
    });
  },

  toString: function toString() {
    var params = [];
    AWS.util.arrayEach(this.sortedParams(), function (param) {
      params.push(param.toString());
    });
    return params.join('&');
  },

  getValue: function getValue(name) {
    for (var i = 0; i < this.params.length; i++) {
      if (this.params[i].name === name)
        return this.params[i].value;
    }
    return null;
  }

});

/**
 * @api private
 */
AWS.QueryParam = inherit({

  constructor: function QueryParam(name, value) {
    this.name = name;
    this.value = value;
  },

  encode: function encode(string) {
    return AWS.util.uriEscape(string);
  },

  toString: function toString() {
    return this.value !== undefined && this.value !== null ?
      this.encode(this.name) + '=' + this.encode(this.value) :
      this.encode(this.name);
  }

});

/**
 * @api private
 */
AWS.QueryParamSerializer = inherit({

  constructor: function QueryParamSerializer(rules) {
    this.rules = rules;
  },

  serialize: function serialize(params, fn) {
    this.serializeStructure('', params, this.rules, fn);
  },

  serializeStructure: function serializeStructure(prefix, struct, rules, fn) {
    var that = this;
    AWS.util.each(struct, function (name, member) {
      var n = rules[name].name || name;
      var memberName = prefix ? prefix + '.' + n : n;
      that.serializeMember(memberName, member, rules[name], fn);
    });
  },

  serializeMap: function serialzeMap(name, map, rules, fn) {
    var i = 1;
    var that = this;
    AWS.util.each(map, function (key, value) {
      var position = '.' + (i++) + '.';
      var keyName = position + (rules.keys.name || 'key');
      var valueName = position + (rules.members.name || 'value');
      that.serializeMember(name + keyName, key, rules.keys, fn);
      that.serializeMember(name + valueName, value, rules.members, fn);
    });
  },

  serializeList: function serializeList(name, list, rules, fn) {
    var that = this;
    var memberRules = rules.members || {};
    AWS.util.arrayEach(list, function (v, n) {
      var suffix = '.' + (n + 1);
      if (rules.flattened) {
        if (memberRules.name) {
          var parts = name.split('.');
          parts.pop();
          parts.push(memberRules.name);
          name = parts.join('.');
        }
      } else {
        suffix = '.member' + suffix;
      }
      that.serializeMember(name + suffix, v, memberRules, fn);
    });
  },

  serializeMember: function serializeMember(name, value, rules, fn) {
    if (rules.type === 'structure')
      this.serializeStructure(name, value, rules.members, fn);
    else if (rules.type === 'list')
      this.serializeList(name, value, rules, fn);
    else if (rules.type === 'map')
      this.serializeMap(name, value, rules, fn);
    else
      fn.call(this, name, String(value));
  }

});

},{"../core":2,"../xml/parser":99}],82:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('../core');

/**
 * @api private
 */
AWS.ServiceInterface.Rest = {
  buildRequest: function buildRequest(req) {
    AWS.ServiceInterface.Rest.populateMethod(req);
    AWS.ServiceInterface.Rest.populateURI(req);
    AWS.ServiceInterface.Rest.populateHeaders(req);
  },

  extractError: function extractError() {
  },

  extractData: function extractData(resp) {
    var req = resp.request;
    var data = {};
    var r = resp.httpResponse;
    var operation = req.client.api.operations[req.operation];
    var rules = (operation.output || {}).members || {};

    // normalize headers names to lower-cased keys for matching
    var headers = {};
    AWS.util.each(r.headers, function (k, v) {
      headers[k.toLowerCase()] = v;
    });

    AWS.util.each(rules, function (name, rule) {
      if (rule.location === 'header') {
        var header = (rule.name || name).toLowerCase();
        if (rule.type == 'map') {
          data[name] = {};
          AWS.util.each(r.headers, function (k, v) {
            var result = k.match(new RegExp('^' + rule.name + '(.+)', 'i'));
            if (result !== null) {
              data[name][result[1]] = v;
            }
          });
        }
        if (headers[header] !== undefined) {
          data[name] = headers[header];
        }
      }
      if (rule.location === 'status') {
        data[name] = parseInt(r.statusCode, 10);
      }
    });

    resp.data = data;
  },

  populateMethod: function populateMethod(req) {
    req.httpRequest.method = req.client.api.operations[req.operation].http.method;
  },

  populateURI: function populateURI(req) {
    var operation = req.client.api.operations[req.operation];
    var uri = operation.http.uri;
    var pathPattern = uri.split(/\?/)[0];
    var rules = (operation.input || {}).members || {};

    var escapePathParam = req.client.escapePathParam ||
      AWS.ServiceInterface.Rest.escapePathParam;
    var escapeQuerystringParam = req.client.escapeQuerystringParam ||
      AWS.ServiceInterface.Rest.escapeQuerystringParam;

    AWS.util.each.call(this, rules, function (name, rule) {
      if (rule.location == 'uri' && req.params[name]) {
        // if the value is being inserted into the path portion of the
        // URI, then we need to use a different (potentially) escaping
        // pattern, this is especially true for S3 path params like Key.
        var value = pathPattern.match('{' + name + '}') ?
          escapePathParam(req.params[name]) :
          escapeQuerystringParam(req.params[name]);

        uri = uri.replace('{' + name + '}', value);
      }
    });

    var path = uri.split('?')[0];
    var querystring = uri.split('?')[1];

    if (querystring) {
      var parts = [];
      AWS.util.arrayEach(querystring.split('&'), function (part) {
        if (!part.match('{\\w+}')) parts.push(part);
      });
      uri = (parts.length > 0 ? path + '?' + parts.join('&') : path);
    } else {
      uri = path;
    }

    req.httpRequest.path = uri;
  },

  escapePathParam: function escapePathParam(value) {
    return AWS.util.uriEscape(String(value));
  },

  escapeQuerystringParam: function escapeQuerystringParam(value) {
    return AWS.util.uriEscape(String(value));
  },

  populateHeaders: function populateHeaders(req) {
    var operation = req.client.api.operations[req.operation];
    var rules = (operation.input || {}).members || {};

    AWS.util.each.call(this, rules, function (name, rule) {
      if (rule.location === 'header' && req.params[name]) {
        if (rule.type === 'map') {
          AWS.util.each(req.params[name], function (key, value) {
            req.httpRequest.headers[rule.name + key] = value;
          });
        } else {
          req.httpRequest.headers[rule.name || name] = req.params[name];
        }
      }
    });

  }
};

},{"../core":2}],83:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('../core');
require('./rest');
require('./json');

/**
 * @api private
 */
AWS.ServiceInterface.RestJson = {
  buildRequest: function buildRequest(req) {
    AWS.ServiceInterface.Rest.buildRequest(req);
    AWS.ServiceInterface.RestJson.populateBody(req);
  },

  extractError: function extractError(resp) {
    AWS.ServiceInterface.Json.extractError(resp);
  },

  extractData: function extractData(resp) {
    AWS.ServiceInterface.Rest.extractData(resp);

    var req = resp.request;
    var rules = req.client.api.operations[req.operation].output || {};
    if (rules.payload && rules.members[rules.payload]) {
      if (rules.members[rules.payload].streaming) {
        resp.data[rules.payload] = resp.httpResponse.body;
      } else {
        resp.data[rules.payload] = resp.httpResponse.body.toString();
      }
    } else {
      var data = resp.data;
      AWS.ServiceInterface.Json.extractData(resp);
      resp.data = AWS.util.merge(data, resp.data);
    }

    // extract request id
    resp.data.RequestId = resp.httpResponse.headers['x-amz-request-id'] ||
                          resp.httpResponse.headers['x-amzn-requestid'];
  },

  populateBody: function populateBody(req) {
    var rules = req.client.api.operations[req.operation].input || {};
    if (rules.payload) {
      req.httpRequest.body = req.params[rules.payload];
    } else {
      var params = req.params[rules.root] || req.params || {};
      req.httpRequest.body = JSON.stringify(params);
    }
  }
};

},{"../core":2,"./rest":82,"./json":80}],84:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('../core');
require('../xml/builder');
require('./rest');

/**
 * @api private
 */
AWS.ServiceInterface.RestXml = {
  buildRequest: function buildRequest(req) {
    AWS.ServiceInterface.Rest.buildRequest(req);
    AWS.ServiceInterface.RestXml.populateBody(req);
  },

  extractError: function extractError(resp) {
    AWS.ServiceInterface.Rest.extractError(resp);

    var data = new AWS.XML.Parser({}).parse(resp.httpResponse.body.toString());
    if (data.Errors) data = data.Errors;
    if (data.Error) data = data.Error;
    if (data.Code) {
      resp.error = AWS.util.error(new Error(), {
        code: data.Code,
        message: data.Message
      });
    } else {
      resp.error = AWS.util.error(new Error(), {
        code: resp.httpResponse.statusCode,
        message: null
      });
    }
  },

  extractData: function extractData(resp) {
    AWS.ServiceInterface.Rest.extractData(resp);

    var req = resp.request;
    var httpResponse = resp.httpResponse;
    var operation = req.client.api.operations[req.operation];
    var rules = operation.output.members;

    var output = operation.output;
    var payload = output.payload;

    if (payload) {
      if (rules[payload].streaming) {
        resp.data[payload] = httpResponse.body;
      } else {
        resp.data[payload] = httpResponse.body.toString();
      }
    } else if (httpResponse.body.length > 0) {
      var parser = new AWS.XML.Parser(operation.output || {});
      AWS.util.update(resp.data, parser.parse(httpResponse.body.toString()));
    }

    // extract request id
    resp.data.RequestId = httpResponse.headers['x-amz-request-id'] ||
                          httpResponse.headers['x-amzn-requestid'];
  },

  populateBody: function populateBody(req) {
    /*jshint maxcomplexity:10*/
    var input = req.client.api.operations[req.operation].input;

    // non-XML (single param) payload
    if (input.payload) {
      if (req.params[input.payload]) {
        req.httpRequest.body = req.params[input.payload];
      }
      return;
    }

    var rules = input.members;

    if (input.xml === undefined) {
      input.xml = null;
      AWS.util.each(rules, function(name, rule) {
        if (!rule.location) {
          input.xml = name;
          return AWS.util.abort;
        }
      });
    }

    if (input.xml) {
      if (rules[input.xml]) {
        rules = rules[input.xml].members;
      }
      // do not populate the body with XML if none of the XML
      // params are present
      AWS.util.each(rules, function (key) {
        if (req.params[key]) {
          var builder = new AWS.XML.Builder(input.xml, rules, req.client.api);
          req.httpRequest.body = builder.toXML(req.params);
          return AWS.util.abort;
        }
      });
    }

  }
};

},{"../core":2,"../xml/builder":100,"./rest":82}],85:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('../core');
var inherit = AWS.util.inherit;

/**
 * @api private
 */
AWS.Signers.V2 = inherit(AWS.Signers.RequestSigner, {
  addAuthorization: function addAuthorization(credentials, date) {

    if (!date) date = AWS.util.date.getDate();

    var r = this.request;

    r.params.add('Timestamp', AWS.util.date.iso8601(date));
    r.params.add('SignatureVersion', '2');
    r.params.add('SignatureMethod', 'HmacSHA256');
    r.params.add('AWSAccessKeyId', credentials.accessKeyId);

    if (credentials.sessionToken)
      r.params.add('SecurityToken', credentials.sessionToken);

    r.params.add('Signature', this.signature(credentials));

    r.body = r.params.toString();
    r.headers['Content-Length'] = r.body.length;
  },

  signature: function signature(credentials) {
    return AWS.util.crypto.hmac(credentials.secretAccessKey, this.stringToSign(), 'base64');
  },

  stringToSign: function stringToSign() {
    var parts = [];
    parts.push(this.request.method);
    parts.push(this.request.endpoint.host.toLowerCase());
    parts.push(this.request.pathname());
    parts.push(this.request.params.toString());
    return parts.join('\n');
  }

});

module.exports = AWS.Signers.V2;

},{"../core":2}],86:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('../core');
var inherit = AWS.util.inherit;

/**
 * @api private
 */
AWS.Signers.V3 = inherit(AWS.Signers.RequestSigner, {
  addAuthorization: function addAuthorization(credentials, date) {

    var datetime = AWS.util.date.rfc822(date);

    this.request.headers['X-Amz-Date'] = datetime;
    this.request.headers['Host'] = this.request.endpoint.hostname;

    if (credentials.sessionToken) {
      this.request.headers['X-Amz-Security-Token'] = credentials.sessionToken;
    }

    this.request.headers['X-Amzn-Authorization'] =
      this.authorization(credentials, datetime);

  },

  authorization: function authorization(credentials) {
    return 'AWS3 ' +
      'AWSAccessKeyId=' + credentials.accessKeyId + ',' +
      'Algorithm=HmacSHA256,' +
      'SignedHeaders=' + this.signedHeaders() + ',' +
      'Signature=' + this.signature(credentials);
  },

  signedHeaders: function signedHeaders() {
    var headers = [];
    AWS.util.arrayEach(this.headersToSign(), function iterator(h) {
      headers.push(h.toLowerCase());
    });
    return headers.sort().join(';');
  },

  canonicalHeaders: function canonicalHeaders() {
    var headers = this.request.headers;
    var parts = [];
    AWS.util.arrayEach(this.headersToSign(), function iterator(h) {
      parts.push(h.toLowerCase().trim() + ':' + String(headers[h]).trim());
    });
    return parts.sort().join('\n') + '\n';
  },

  headersToSign: function headersToSign() {
    var headers = [];
    AWS.util.each(this.request.headers, function iterator(k) {
      if (k === 'Host' || k === 'Content-Encoding' || k.match(/^X-Amz/i)) {
        headers.push(k);
      }
    });
    return headers;
  },

  signature: function signature(credentials) {
    return AWS.util.crypto.hmac(credentials.secretAccessKey, this.stringToSign(), 'base64');
  },

  stringToSign: function stringToSign() {
    var parts = [];
    parts.push(this.request.method);
    parts.push('/');
    parts.push('');
    parts.push(this.canonicalHeaders());
    parts.push(this.request.body);
    return AWS.util.crypto.sha256(parts.join('\n'));
  }

});

module.exports = AWS.Signers.V3;

},{"../core":2}],87:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('../core');
var inherit = AWS.util.inherit;

require('./v3');

/**
 * @api private
 */
AWS.Signers.V3Https = inherit(AWS.Signers.V3, {
  authorization: function authorization(credentials) {
    return 'AWS3-HTTPS ' +
      'AWSAccessKeyId=' + credentials.accessKeyId + ',' +
      'Algorithm=HmacSHA256,' +
      'Signature=' + this.signature(credentials);
  },

  stringToSign: function stringToSign() {
    return this.request.headers['X-Amz-Date'];
  }
});

module.exports = AWS.Signers.V3Https;

},{"../core":2,"./v3":86}],88:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('../core');
var Buffer = require('buffer').Buffer;
var inherit = AWS.util.inherit;

/**
 * @api private
 */
AWS.Signers.V4 = inherit(AWS.Signers.RequestSigner, {
  constructor: function V4(request, serviceName) {
    AWS.Signers.RequestSigner.call(this, request);
    this.serviceName = serviceName;
  },

  addAuthorization: function addAuthorization(credentials, date) {
    var datetime = AWS.util.date.iso8601(date).replace(/[:\-]|\.\d{3}/g, '');
    this.addHeaders(credentials, datetime);
    this.request.headers['Authorization'] =
      this.authorization(credentials, datetime);
  },

  addHeaders: function addHeaders(credentials, datetime) {
    this.request.headers['Host'] = this.request.endpoint.hostname;
    this.request.headers['X-Amz-Date'] = datetime;
    if (credentials.sessionToken) {
      this.request.headers['X-Amz-Security-Token'] = credentials.sessionToken;
    }
  },

  authorization: function authorization(credentials, datetime) {
    var parts = [];
    var credString = this.credentialString(datetime);
    parts.push('AWS4-HMAC-SHA256 Credential=' +
      credentials.accessKeyId + '/' + credString);
    parts.push('SignedHeaders=' + this.signedHeaders());
    parts.push('Signature=' + this.signature(credentials, datetime));
    return parts.join(', ');
  },

  signature: function signature(credentials, datetime) {
    var kSecret = credentials.secretAccessKey;
    var kDate = AWS.util.crypto.hmac('AWS4' + kSecret, datetime.substr(0, 8));
    var kRegion = AWS.util.crypto.hmac(kDate, this.request.region);
    var kService = AWS.util.crypto.hmac(kRegion, this.serviceName);
    var kCredentials = AWS.util.crypto.hmac(kService, 'aws4_request');
    return AWS.util.crypto.hmac(kCredentials, this.stringToSign(datetime), 'hex');
  },

  stringToSign: function stringToSign(datetime) {
    var parts = [];
    parts.push('AWS4-HMAC-SHA256');
    parts.push(datetime);
    parts.push(this.credentialString(datetime));
    parts.push(this.hexEncodedHash(this.canonicalString()));
    return parts.join('\n');
  },

  canonicalString: function canonicalString() {
    var parts = [];
    parts.push(this.request.method);
    parts.push(this.request.pathname());
    parts.push(this.request.search());
    parts.push(this.canonicalHeaders() + '\n');
    parts.push(this.signedHeaders());
    parts.push(this.hexEncodedHash(this.request.body));
    return parts.join('\n');
  },

  canonicalHeaders: function canonicalHeaders() {
    var headers = [];
    AWS.util.each.call(this, this.request.headers, function (key, item) {
      headers.push([key, item]);
    });
    headers.sort(function (a, b) {
      return a[0].toLowerCase() < b[0].toLowerCase() ? -1 : 1;
    });
    var parts = [];
    AWS.util.arrayEach.call(this, headers, function (item) {
      if (item[0] !== 'Authorization' && item[0] !== 'User-Agent' && item[0] !== 'Content-Type') {
        parts.push(item[0].toLowerCase() + ':' +
          this.canonicalHeaderValues(item[1].toString()));
      }
    });
    return parts.join('\n');
  },

  canonicalHeaderValues: function canonicalHeaderValues(values) {
    return values.replace(/\s+/g, ' ').replace(/^\s+|\s+$/g, '');
  },

  signedHeaders: function signedHeaders() {
    var keys = [];
    AWS.util.each.call(this, this.request.headers, function (key) {
      key = key.toLowerCase();
      if (key !== 'authorization' && key !== 'user-agent' && key !== 'content-type') keys.push(key);
    });
    return keys.sort().join(';');
  },

  credentialString: function credentialString(datetime) {
    var parts = [];
    parts.push(datetime.substr(0, 8));
    parts.push(this.request.region);
    parts.push(this.serviceName);
    parts.push('aws4_request');
    return parts.join('/');
  },

  hexEncodedHash: function hash(string) {
    return AWS.util.crypto.sha256(string, 'hex');
  }

});

module.exports = AWS.Signers.V4;

},{"buffer":73,"../core":2}],89:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('../core');
var inherit = AWS.util.inherit;

/**
 * @api private
 */
AWS.Signers.S3 = inherit(AWS.Signers.RequestSigner, {
  /**
   * When building the stringToSign, these sub resource params should be
   * part of the canonical resource string with their NON-decoded values
   */
  subResources: {
    'acl': 1,
    'lifecycle': 1,
    'delete': 1,
    'location': 1,
    'logging': 1,
    'notification': 1,
    'partNumber': 1,
    'policy': 1,
    'requestPayment': 1,
    'torrent': 1,
    'uploadId': 1,
    'uploads': 1,
    'versionId': 1,
    'versioning': 1,
    'versions': 1,
    'website': 1
  },

  // when building the stringToSign, these querystring params should be
  // part of the canonical resource string with their NON-encoded values
  responseHeaders: {
    'response-content-type': 1,
    'response-content-language': 1,
    'response-expires': 1,
    'response-cache-control': 1,
    'response-content-disposition': 1,
    'response-content-encoding': 1
  },

  addAuthorization: function addAuthorization(credentials, date) {
    this.request.headers['X-Amz-Date'] = AWS.util.date.rfc822(date);

    if (credentials.sessionToken)
      this.request.headers['X-Amz-Security-Token'] = credentials.sessionToken;

    var signature = this.sign(credentials.secretAccessKey, this.stringToSign());
    var auth = 'AWS ' + credentials.accessKeyId + ':' + signature;

    this.request.headers['Authorization'] = auth;
  },

  stringToSign: function stringToSign() {
    var r = this.request;

    var parts = [];
    parts.push(r.method);
    parts.push(r.headers['Content-MD5'] || '');
    parts.push(r.headers['Content-Type'] || '');
    parts.push(''); // This is the "Date" header, but we use X-Amz-Date.
                    // The S3 signing mechanism requires us to pass an empty
                    // string for this Date header regardless.
    var headers = this.canonicalizedAmzHeaders();
    if (headers) parts.push(headers);
    parts.push(this.canonicalizedResource());

    return parts.join('\n');

  },

  canonicalizedAmzHeaders: function canonicalizedAmzHeaders() {

    var amzHeaders = [];

    AWS.util.each(this.request.headers, function (name) {
      if (name.match(/^x-amz-/i))
        amzHeaders.push(name);
    });

    amzHeaders.sort(function (a, b) {
      return a.toLowerCase() < b.toLowerCase() ? -1 : 1;
    });

    var parts = [];
    AWS.util.arrayEach.call(this, amzHeaders, function (name) {
      parts.push(name.toLowerCase() + ':' + String(this.request.headers[name]));
    });

    return parts.join('\n');

  },

  canonicalizedResource: function canonicalizedResource() {

    var r = this.request;

    var parts = r.path.split('?');
    var path = parts[0];
    var querystring = parts[1];

    var resource = '';

    if (r.virtualHostedBucket)
      resource += '/' + r.virtualHostedBucket;

    resource += path;

    if (querystring) {

      // collect a list of sub resources and query params that need to be signed
      var resources = [];

      AWS.util.arrayEach.call(this, querystring.split('&'), function (param) {
        var name = param.split('=')[0];
        var value = param.split('=')[1];
        /*jshint undef:false */
        if (this.subResources[name] || this.responseHeaders[name]) {
          var resource = { name: name };
          if (value !== undefined) {
            if (this.subResources[name]) {
              resource.value = value;
            } else {
              resource.value = unescape(value);
            }
          }
          resources.push(resource);
        }
      });

      resources.sort(function (a, b) { return a.name < b.name ? -1 : 1; });

      if (resources.length) {

        querystring = [];
        AWS.util.arrayEach(resources, function (resource) {
          if (resource.value === undefined)
            querystring.push(resource.name);
          else
            querystring.push(resource.name + '=' + resource.value);
        });

        resource += '?' + querystring.join('&');
      }

    }

    return resource;

  },

  sign: function sign(secret, string) {
    return AWS.util.crypto.hmac(secret, string, 'base64', 'sha1');
  }
});

module.exports = AWS.Signers.S3;

},{"../core":2}],90:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('../core');
require('./v3');
var inherit = AWS.util.inherit;

/**
 * @api private
 */
AWS.Signers.CloudFront = inherit(AWS.Signers.S3, {
  /**
   * The canonical string for CloudFront is simply the Date header
   */
  stringToSign: function stringToSign() {
    return this.request.headers['X-Amz-Date'];
  }
});

module.exports = AWS.Signers.CloudFront;

},{"../core":2,"./v3":86}],101:[function(require,module,exports){exports.readIEEE754 = function(buffer, offset, isBE, mLen, nBytes) {
  var e, m,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      nBits = -7,
      i = isBE ? 0 : (nBytes - 1),
      d = isBE ? 1 : -1,
      s = buffer[offset + i];

  i += d;

  e = s & ((1 << (-nBits)) - 1);
  s >>= (-nBits);
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);

  m = e & ((1 << (-nBits)) - 1);
  e >>= (-nBits);
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity);
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

exports.writeIEEE754 = function(buffer, value, offset, isBE, mLen, nBytes) {
  var e, m, c,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),
      i = isBE ? (nBytes - 1) : 0,
      d = isBE ? -1 : 1,
      s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);

  e = (e << mLen) | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);

  buffer[offset + i - d] |= s * 128;
};

},{}],93:[function(require,module,exports){/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

exports.hex_sha1 = hex_sha1;
exports.b64_sha1 = b64_sha1;
exports.str_sha1 = str_sha1;
exports.hex_hmac_sha1 = hex_hmac_sha1;
exports.b64_hmac_sha1 = b64_hmac_sha1;
exports.str_hmac_sha1 = str_hmac_sha1;

/*
 * Configurable variables. You may need to tweak these to be compatible with
 * the server-side, but the defaults work in most cases.
 */
var hexcase = 0;  /* hex output format. 0 - lowercase; 1 - uppercase        */
var b64pad  = ""; /* base-64 pad character. "=" for strict RFC compliance   */
var chrsz   = 8;  /* bits per input character. 8 - ASCII; 16 - Unicode      */

/*
 * These are the functions you'll usually want to call
 * They take string arguments and return either hex or base-64 encoded strings
 */
function hex_sha1(s){return binb2hex(core_sha1(str2binb(s),s.length * chrsz));}
function b64_sha1(s){return binb2b64(core_sha1(str2binb(s),s.length * chrsz));}
function str_sha1(s){return binb2str(core_sha1(str2binb(s),s.length * chrsz));}
function hex_hmac_sha1(key, data){ return binb2hex(core_hmac_sha1(key, data));}
function b64_hmac_sha1(key, data){ return binb2b64(core_hmac_sha1(key, data));}
function str_hmac_sha1(key, data){ return binb2str(core_hmac_sha1(key, data));}

/*
 * Perform a simple self-test to see if the VM is working
 */
function sha1_vm_test()
{
  return hex_sha1("abc") == "a9993e364706816aba3e25717850c26c9cd0d89d";
}

/*
 * Calculate the SHA-1 of an array of big-endian words, and a bit length
 */
function core_sha1(x, len)
{
  /* append padding */
  x[len >> 5] |= 0x80 << (24 - len % 32);
  x[((len + 64 >> 9) << 4) + 15] = len;

  var w = Array(80);
  var a =  1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d =  271733878;
  var e = -1009589776;

  for(var i = 0; i < x.length; i += 16)
  {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;
    var olde = e;

    for(var j = 0; j < 80; j++)
    {
      if(j < 16) w[j] = x[i + j];
      else w[j] = rol(w[j-3] ^ w[j-8] ^ w[j-14] ^ w[j-16], 1);
      var t = safe_add(safe_add(rol(a, 5), sha1_ft(j, b, c, d)),
                       safe_add(safe_add(e, w[j]), sha1_kt(j)));
      e = d;
      d = c;
      c = rol(b, 30);
      b = a;
      a = t;
    }

    a = safe_add(a, olda);
    b = safe_add(b, oldb);
    c = safe_add(c, oldc);
    d = safe_add(d, oldd);
    e = safe_add(e, olde);
  }
  return Array(a, b, c, d, e);

}

/*
 * Perform the appropriate triplet combination function for the current
 * iteration
 */
function sha1_ft(t, b, c, d)
{
  if(t < 20) return (b & c) | ((~b) & d);
  if(t < 40) return b ^ c ^ d;
  if(t < 60) return (b & c) | (b & d) | (c & d);
  return b ^ c ^ d;
}

/*
 * Determine the appropriate additive constant for the current iteration
 */
function sha1_kt(t)
{
  return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :
         (t < 60) ? -1894007588 : -899497514;
}

/*
 * Calculate the HMAC-SHA1 of a key and some data
 */
function core_hmac_sha1(key, data)
{
  var bkey = str2binb(key);
  if(bkey.length > 16) bkey = core_sha1(bkey, key.length * chrsz);

  var ipad = Array(16), opad = Array(16);
  for(var i = 0; i < 16; i++)
  {
    ipad[i] = bkey[i] ^ 0x36363636;
    opad[i] = bkey[i] ^ 0x5C5C5C5C;
  }

  var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * chrsz);
  return core_sha1(opad.concat(hash), 512 + 160);
}

/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */
function safe_add(x, y)
{
  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return (msw << 16) | (lsw & 0xFFFF);
}

/*
 * Bitwise rotate a 32-bit number to the left.
 */
function rol(num, cnt)
{
  return (num << cnt) | (num >>> (32 - cnt));
}

/*
 * Convert an 8-bit or 16-bit string to an array of big-endian words
 * In 8-bit function, characters >255 have their hi-byte silently ignored.
 */
function str2binb(str)
{
  var bin = Array();
  var mask = (1 << chrsz) - 1;
  for(var i = 0; i < str.length * chrsz; i += chrsz)
    bin[i>>5] |= (str.charCodeAt(i / chrsz) & mask) << (32 - chrsz - i%32);
  return bin;
}

/*
 * Convert an array of big-endian words to a string
 */
function binb2str(bin)
{
  var str = "";
  var mask = (1 << chrsz) - 1;
  for(var i = 0; i < bin.length * 32; i += chrsz)
    str += String.fromCharCode((bin[i>>5] >>> (32 - chrsz - i%32)) & mask);
  return str;
}

/*
 * Convert an array of big-endian words to a hex string.
 */
function binb2hex(binarray)
{
  var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
  var str = "";
  for(var i = 0; i < binarray.length * 4; i++)
  {
    str += hex_tab.charAt((binarray[i>>2] >> ((3 - i%4)*8+4)) & 0xF) +
           hex_tab.charAt((binarray[i>>2] >> ((3 - i%4)*8  )) & 0xF);
  }
  return str;
}

/*
 * Convert an array of big-endian words to a base-64 string
 */
function binb2b64(binarray)
{
  var tab = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  var str = "";
  for(var i = 0; i < binarray.length * 4; i += 3)
  {
    var triplet = (((binarray[i   >> 2] >> 8 * (3 -  i   %4)) & 0xFF) << 16)
                | (((binarray[i+1 >> 2] >> 8 * (3 - (i+1)%4)) & 0xFF) << 8 )
                |  ((binarray[i+2 >> 2] >> 8 * (3 - (i+2)%4)) & 0xFF);
    for(var j = 0; j < 4; j++)
    {
      if(i * 8 + j * 6 > binarray.length * 32) str += b64pad;
      else str += tab.charAt((triplet >> 6*(3-j)) & 0x3F);
    }
  }
  return str;
}


},{}],94:[function(require,module,exports){// Original code adapted from Robert Kieffer.
// details at https://github.com/broofa/node-uuid
(function() {
  var _global = this;

  var mathRNG, whatwgRNG;

  // NOTE: Math.random() does not guarantee "cryptographic quality"
  mathRNG = function(size) {
    var bytes = new Array(size);
    var r;

    for (var i = 0, r; i < size; i++) {
      if ((i & 0x03) == 0) r = Math.random() * 0x100000000;
      bytes[i] = r >>> ((i & 0x03) << 3) & 0xff;
    }

    return bytes;
  }

  // currently only available in webkit-based browsers.
  if (_global.crypto && crypto.getRandomValues) {
    var _rnds = new Uint32Array(4);
    whatwgRNG = function(size) {
      var bytes = new Array(size);
      crypto.getRandomValues(_rnds);

      for (var c = 0 ; c < size; c++) {
        bytes[c] = _rnds[c >> 2] >>> ((c & 0x03) * 8) & 0xff;
      }
      return bytes;
    }
  }

  module.exports = whatwgRNG || mathRNG;

}())
},{}],95:[function(require,module,exports){/*
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */

/*
 * Configurable variables. You may need to tweak these to be compatible with
 * the server-side, but the defaults work in most cases.
 */
var hexcase = 0;   /* hex output format. 0 - lowercase; 1 - uppercase        */
var b64pad  = "";  /* base-64 pad character. "=" for strict RFC compliance   */

/*
 * These are the functions you'll usually want to call
 * They take string arguments and return either hex or base-64 encoded strings
 */
function hex_md5(s)    { return rstr2hex(rstr_md5(str2rstr_utf8(s))); }
function b64_md5(s)    { return rstr2b64(rstr_md5(str2rstr_utf8(s))); }
function bin_md5(s)    { return rstr2binl(rstr_md5(str2rstr_utf8(s))); }
function any_md5(s, e) { return rstr2any(rstr_md5(str2rstr_utf8(s)), e); }
function hex_hmac_md5(k, d)
  { return rstr2hex(rstr_hmac_md5(str2rstr_utf8(k), str2rstr_utf8(d))); }
function b64_hmac_md5(k, d)
  { return rstr2b64(rstr_hmac_md5(str2rstr_utf8(k), str2rstr_utf8(d))); }
function any_hmac_md5(k, d, e)
  { return rstr2any(rstr_hmac_md5(str2rstr_utf8(k), str2rstr_utf8(d)), e); }

/*
 * Perform a simple self-test to see if the VM is working
 */
function md5_vm_test()
{
  return hex_md5("abc").toLowerCase() == "900150983cd24fb0d6963f7d28e17f72";
}

/*
 * Calculate the MD5 of a raw string
 */
function rstr_md5(s)
{
  return binl2rstr(binl_md5(rstr2binl(s), s.length * 8));
}

/*
 * Calculate the HMAC-MD5, of a key and some data (raw strings)
 */
function rstr_hmac_md5(key, data)
{
  var bkey = rstr2binl(key);
  if(bkey.length > 16) bkey = binl_md5(bkey, key.length * 8);

  var ipad = Array(16), opad = Array(16);
  for(var i = 0; i < 16; i++)
  {
    ipad[i] = bkey[i] ^ 0x36363636;
    opad[i] = bkey[i] ^ 0x5C5C5C5C;
  }

  var hash = binl_md5(ipad.concat(rstr2binl(data)), 512 + data.length * 8);
  return binl2rstr(binl_md5(opad.concat(hash), 512 + 128));
}

/*
 * Convert a raw string to a hex string
 */
function rstr2hex(input)
{
  try { hexcase } catch(e) { hexcase=0; }
  var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
  var output = "";
  var x;
  for(var i = 0; i < input.length; i++)
  {
    x = input.charCodeAt(i);
    output += hex_tab.charAt((x >>> 4) & 0x0F)
           +  hex_tab.charAt( x        & 0x0F);
  }
  return output;
}

/*
 * Convert a raw string to a base-64 string
 */
function rstr2b64(input)
{
  try { b64pad } catch(e) { b64pad=''; }
  var tab = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  var output = "";
  var len = input.length;
  for(var i = 0; i < len; i += 3)
  {
    var triplet = (input.charCodeAt(i) << 16)
                | (i + 1 < len ? input.charCodeAt(i+1) << 8 : 0)
                | (i + 2 < len ? input.charCodeAt(i+2)      : 0);
    for(var j = 0; j < 4; j++)
    {
      if(i * 8 + j * 6 > input.length * 8) output += b64pad;
      else output += tab.charAt((triplet >>> 6*(3-j)) & 0x3F);
    }
  }
  return output;
}

/*
 * Convert a raw string to an arbitrary string encoding
 */
function rstr2any(input, encoding)
{
  var divisor = encoding.length;
  var i, j, q, x, quotient;

  /* Convert to an array of 16-bit big-endian values, forming the dividend */
  var dividend = Array(Math.ceil(input.length / 2));
  for(i = 0; i < dividend.length; i++)
  {
    dividend[i] = (input.charCodeAt(i * 2) << 8) | input.charCodeAt(i * 2 + 1);
  }

  /*
   * Repeatedly perform a long division. The binary array forms the dividend,
   * the length of the encoding is the divisor. Once computed, the quotient
   * forms the dividend for the next step. All remainders are stored for later
   * use.
   */
  var full_length = Math.ceil(input.length * 8 /
                                    (Math.log(encoding.length) / Math.log(2)));
  var remainders = Array(full_length);
  for(j = 0; j < full_length; j++)
  {
    quotient = Array();
    x = 0;
    for(i = 0; i < dividend.length; i++)
    {
      x = (x << 16) + dividend[i];
      q = Math.floor(x / divisor);
      x -= q * divisor;
      if(quotient.length > 0 || q > 0)
        quotient[quotient.length] = q;
    }
    remainders[j] = x;
    dividend = quotient;
  }

  /* Convert the remainders to the output string */
  var output = "";
  for(i = remainders.length - 1; i >= 0; i--)
    output += encoding.charAt(remainders[i]);

  return output;
}

/*
 * Encode a string as utf-8.
 * For efficiency, this assumes the input is valid utf-16.
 */
function str2rstr_utf8(input)
{
  var output = "";
  var i = -1;
  var x, y;

  while(++i < input.length)
  {
    /* Decode utf-16 surrogate pairs */
    x = input.charCodeAt(i);
    y = i + 1 < input.length ? input.charCodeAt(i + 1) : 0;
    if(0xD800 <= x && x <= 0xDBFF && 0xDC00 <= y && y <= 0xDFFF)
    {
      x = 0x10000 + ((x & 0x03FF) << 10) + (y & 0x03FF);
      i++;
    }

    /* Encode output as utf-8 */
    if(x <= 0x7F)
      output += String.fromCharCode(x);
    else if(x <= 0x7FF)
      output += String.fromCharCode(0xC0 | ((x >>> 6 ) & 0x1F),
                                    0x80 | ( x         & 0x3F));
    else if(x <= 0xFFFF)
      output += String.fromCharCode(0xE0 | ((x >>> 12) & 0x0F),
                                    0x80 | ((x >>> 6 ) & 0x3F),
                                    0x80 | ( x         & 0x3F));
    else if(x <= 0x1FFFFF)
      output += String.fromCharCode(0xF0 | ((x >>> 18) & 0x07),
                                    0x80 | ((x >>> 12) & 0x3F),
                                    0x80 | ((x >>> 6 ) & 0x3F),
                                    0x80 | ( x         & 0x3F));
  }
  return output;
}

/*
 * Encode a string as utf-16
 */
function str2rstr_utf16le(input)
{
  var output = "";
  for(var i = 0; i < input.length; i++)
    output += String.fromCharCode( input.charCodeAt(i)        & 0xFF,
                                  (input.charCodeAt(i) >>> 8) & 0xFF);
  return output;
}

function str2rstr_utf16be(input)
{
  var output = "";
  for(var i = 0; i < input.length; i++)
    output += String.fromCharCode((input.charCodeAt(i) >>> 8) & 0xFF,
                                   input.charCodeAt(i)        & 0xFF);
  return output;
}

/*
 * Convert a raw string to an array of little-endian words
 * Characters >255 have their high-byte silently ignored.
 */
function rstr2binl(input)
{
  var output = Array(input.length >> 2);
  for(var i = 0; i < output.length; i++)
    output[i] = 0;
  for(var i = 0; i < input.length * 8; i += 8)
    output[i>>5] |= (input.charCodeAt(i / 8) & 0xFF) << (i%32);
  return output;
}

/*
 * Convert an array of little-endian words to a string
 */
function binl2rstr(input)
{
  var output = "";
  for(var i = 0; i < input.length * 32; i += 8)
    output += String.fromCharCode((input[i>>5] >>> (i % 32)) & 0xFF);
  return output;
}

/*
 * Calculate the MD5 of an array of little-endian words, and a bit length.
 */
function binl_md5(x, len)
{
  /* append padding */
  x[len >> 5] |= 0x80 << ((len) % 32);
  x[(((len + 64) >>> 9) << 4) + 14] = len;

  var a =  1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d =  271733878;

  for(var i = 0; i < x.length; i += 16)
  {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;

    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

    a = safe_add(a, olda);
    b = safe_add(b, oldb);
    c = safe_add(c, oldc);
    d = safe_add(d, oldd);
  }
  return Array(a, b, c, d);
}

/*
 * These functions implement the four basic operations the algorithm uses.
 */
function md5_cmn(q, a, b, x, s, t)
{
  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
}
function md5_ff(a, b, c, d, x, s, t)
{
  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
}
function md5_gg(a, b, c, d, x, s, t)
{
  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
}
function md5_hh(a, b, c, d, x, s, t)
{
  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
}
function md5_ii(a, b, c, d, x, s, t)
{
  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
}

/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */
function safe_add(x, y)
{
  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return (msw << 16) | (lsw & 0xFFFF);
}

/*
 * Bitwise rotate a 32-bit number to the left.
 */
function bit_rol(num, cnt)
{
  return (num << cnt) | (num >>> (32 - cnt));
}


exports.hex_md5 = hex_md5;
exports.bin_md5 = bin_md5;
exports.b64_md5 = b64_md5;
exports.any_md5 = any_md5;

},{}],96:[function(require,module,exports){/*
CryptoJS v3.1.2
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
var CryptoJS=module.exports=CryptoJS||function(h,s){var f={},g=f.lib={},q=function(){},m=g.Base={extend:function(a){q.prototype=this;var c=new q;a&&c.mixIn(a);c.hasOwnProperty("init")||(c.init=function(){c.$super.init.apply(this,arguments)});c.init.prototype=c;c.$super=this;return c},create:function(){var a=this.extend();a.init.apply(a,arguments);return a},init:function(){},mixIn:function(a){for(var c in a)a.hasOwnProperty(c)&&(this[c]=a[c]);a.hasOwnProperty("toString")&&(this.toString=a.toString)},clone:function(){return this.init.prototype.extend(this)}},
r=g.WordArray=m.extend({init:function(a,c){a=this.words=a||[];this.sigBytes=c!=s?c:4*a.length},toString:function(a){return(a||k).stringify(this)},concat:function(a){var c=this.words,d=a.words,b=this.sigBytes;a=a.sigBytes;this.clamp();if(b%4)for(var e=0;e<a;e++)c[b+e>>>2]|=(d[e>>>2]>>>24-8*(e%4)&255)<<24-8*((b+e)%4);else if(65535<d.length)for(e=0;e<a;e+=4)c[b+e>>>2]=d[e>>>2];else c.push.apply(c,d);this.sigBytes+=a;return this},clamp:function(){var a=this.words,c=this.sigBytes;a[c>>>2]&=4294967295<<
32-8*(c%4);a.length=h.ceil(c/4)},clone:function(){var a=m.clone.call(this);a.words=this.words.slice(0);return a},random:function(a){for(var c=[],d=0;d<a;d+=4)c.push(4294967296*h.random()|0);return new r.init(c,a)}}),l=f.enc={},k=l.Hex={stringify:function(a){var c=a.words;a=a.sigBytes;for(var d=[],b=0;b<a;b++){var e=c[b>>>2]>>>24-8*(b%4)&255;d.push((e>>>4).toString(16));d.push((e&15).toString(16))}return d.join("")},parse:function(a){for(var c=a.length,d=[],b=0;b<c;b+=2)d[b>>>3]|=parseInt(a.substr(b,
2),16)<<24-4*(b%8);return new r.init(d,c/2)}},n=l.Latin1={stringify:function(a){var c=a.words;a=a.sigBytes;for(var d=[],b=0;b<a;b++)d.push(String.fromCharCode(c[b>>>2]>>>24-8*(b%4)&255));return d.join("")},parse:function(a){for(var c=a.length,d=[],b=0;b<c;b++)d[b>>>2]|=(a.charCodeAt(b)&255)<<24-8*(b%4);return new r.init(d,c)}},j=l.Utf8={stringify:function(a){try{return decodeURIComponent(escape(n.stringify(a)))}catch(c){throw Error("Malformed UTF-8 data");}},parse:function(a){return n.parse(unescape(encodeURIComponent(a)))}},
u=g.BufferedBlockAlgorithm=m.extend({reset:function(){this._data=new r.init;this._nDataBytes=0},_append:function(a){"string"==typeof a&&(a=j.parse(a));this._data.concat(a);this._nDataBytes+=a.sigBytes},_process:function(a){var c=this._data,d=c.words,b=c.sigBytes,e=this.blockSize,f=b/(4*e),f=a?h.ceil(f):h.max((f|0)-this._minBufferSize,0);a=f*e;b=h.min(4*a,b);if(a){for(var g=0;g<a;g+=e)this._doProcessBlock(d,g);g=d.splice(0,a);c.sigBytes-=b}return new r.init(g,b)},clone:function(){var a=m.clone.call(this);
a._data=this._data.clone();return a},_minBufferSize:0});g.Hasher=u.extend({cfg:m.extend(),init:function(a){this.cfg=this.cfg.extend(a);this.reset()},reset:function(){u.reset.call(this);this._doReset()},update:function(a){this._append(a);this._process();return this},finalize:function(a){a&&this._append(a);return this._doFinalize()},blockSize:16,_createHelper:function(a){return function(c,d){return(new a.init(d)).finalize(c)}},_createHmacHelper:function(a){return function(c,d){return(new t.HMAC.init(a,
d)).finalize(c)}}});var t=f.algo={};return f}(Math);
(function(h){for(var s=CryptoJS,f=s.lib,g=f.WordArray,q=f.Hasher,f=s.algo,m=[],r=[],l=function(a){return 4294967296*(a-(a|0))|0},k=2,n=0;64>n;){var j;a:{j=k;for(var u=h.sqrt(j),t=2;t<=u;t++)if(!(j%t)){j=!1;break a}j=!0}j&&(8>n&&(m[n]=l(h.pow(k,0.5))),r[n]=l(h.pow(k,1/3)),n++);k++}var a=[],f=f.SHA256=q.extend({_doReset:function(){this._hash=new g.init(m.slice(0))},_doProcessBlock:function(c,d){for(var b=this._hash.words,e=b[0],f=b[1],g=b[2],j=b[3],h=b[4],m=b[5],n=b[6],q=b[7],p=0;64>p;p++){if(16>p)a[p]=
c[d+p]|0;else{var k=a[p-15],l=a[p-2];a[p]=((k<<25|k>>>7)^(k<<14|k>>>18)^k>>>3)+a[p-7]+((l<<15|l>>>17)^(l<<13|l>>>19)^l>>>10)+a[p-16]}k=q+((h<<26|h>>>6)^(h<<21|h>>>11)^(h<<7|h>>>25))+(h&m^~h&n)+r[p]+a[p];l=((e<<30|e>>>2)^(e<<19|e>>>13)^(e<<10|e>>>22))+(e&f^e&g^f&g);q=n;n=m;m=h;h=j+k|0;j=g;g=f;f=e;e=k+l|0}b[0]=b[0]+e|0;b[1]=b[1]+f|0;b[2]=b[2]+g|0;b[3]=b[3]+j|0;b[4]=b[4]+h|0;b[5]=b[5]+m|0;b[6]=b[6]+n|0;b[7]=b[7]+q|0},_doFinalize:function(){var a=this._data,d=a.words,b=8*this._nDataBytes,e=8*a.sigBytes;
d[e>>>5]|=128<<24-e%32;d[(e+64>>>9<<4)+14]=h.floor(b/4294967296);d[(e+64>>>9<<4)+15]=b;a.sigBytes=4*d.length;this._process();return this._hash},clone:function(){var a=q.clone.call(this);a._hash=this._hash.clone();return a}});s.SHA256=q._createHelper(f);s.HmacSHA256=q._createHmacHelper(f)})(Math);
(function(){var h=CryptoJS,s=h.enc.Utf8;h.algo.HMAC=h.lib.Base.extend({init:function(f,g){f=this._hasher=new f.init;"string"==typeof g&&(g=s.parse(g));var h=f.blockSize,m=4*h;g.sigBytes>m&&(g=f.finalize(g));g.clamp();for(var r=this._oKey=g.clone(),l=this._iKey=g.clone(),k=r.words,n=l.words,j=0;j<h;j++)k[j]^=1549556828,n[j]^=909522486;r.sigBytes=l.sigBytes=m;this.reset()},reset:function(){var f=this._hasher;f.reset();f.update(this._iKey)},update:function(f){this._hasher.update(f);return this},finalize:function(f){var g=
this._hasher;f=g.finalize(f);g.reset();return g.finalize(this._oKey.clone().concat(f))}})})();
(function(){var h=CryptoJS,j=h.lib.WordArray;h.enc.Base64={stringify:function(b){var e=b.words,f=b.sigBytes,c=this._map;b.clamp();b=[];for(var a=0;a<f;a+=3)for(var d=(e[a>>>2]>>>24-8*(a%4)&255)<<16|(e[a+1>>>2]>>>24-8*((a+1)%4)&255)<<8|e[a+2>>>2]>>>24-8*((a+2)%4)&255,g=0;4>g&&a+0.75*g<f;g++)b.push(c.charAt(d>>>6*(3-g)&63));if(e=c.charAt(64))for(;b.length%4;)b.push(e);return b.join("")},parse:function(b){var e=b.length,f=this._map,c=f.charAt(64);c&&(c=b.indexOf(c),-1!=c&&(e=c));for(var c=[],a=0,d=0;d<
e;d++)if(d%4){var g=f.indexOf(b.charAt(d-1))<<2*(d%4),h=f.indexOf(b.charAt(d))>>>6-2*(d%4);c[a>>>2]|=(g|h)<<24-8*(a%4);a++}return j.create(c,a)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="}})();
var CryptoJS=CryptoJS||function(e,m){var p={},j=p.lib={},l=function(){},f=j.Base={extend:function(a){l.prototype=this;var c=new l;a&&c.mixIn(a);c.hasOwnProperty("init")||(c.init=function(){c.$super.init.apply(this,arguments)});c.init.prototype=c;c.$super=this;return c},create:function(){var a=this.extend();a.init.apply(a,arguments);return a},init:function(){},mixIn:function(a){for(var c in a)a.hasOwnProperty(c)&&(this[c]=a[c]);a.hasOwnProperty("toString")&&(this.toString=a.toString)},clone:function(){return this.init.prototype.extend(this)}},
n=j.WordArray=f.extend({init:function(a,c){a=this.words=a||[];this.sigBytes=c!=m?c:4*a.length},toString:function(a){return(a||h).stringify(this)},concat:function(a){var c=this.words,q=a.words,d=this.sigBytes;a=a.sigBytes;this.clamp();if(d%4)for(var b=0;b<a;b++)c[d+b>>>2]|=(q[b>>>2]>>>24-8*(b%4)&255)<<24-8*((d+b)%4);else if(65535<q.length)for(b=0;b<a;b+=4)c[d+b>>>2]=q[b>>>2];else c.push.apply(c,q);this.sigBytes+=a;return this},clamp:function(){var a=this.words,c=this.sigBytes;a[c>>>2]&=4294967295<<
32-8*(c%4);a.length=e.ceil(c/4)},clone:function(){var a=f.clone.call(this);a.words=this.words.slice(0);return a},random:function(a){for(var c=[],b=0;b<a;b+=4)c.push(4294967296*e.random()|0);return new n.init(c,a)}}),b=p.enc={},h=b.Hex={stringify:function(a){var c=a.words;a=a.sigBytes;for(var b=[],d=0;d<a;d++){var f=c[d>>>2]>>>24-8*(d%4)&255;b.push((f>>>4).toString(16));b.push((f&15).toString(16))}return b.join("")},parse:function(a){for(var c=a.length,b=[],d=0;d<c;d+=2)b[d>>>3]|=parseInt(a.substr(d,
2),16)<<24-4*(d%8);return new n.init(b,c/2)}},g=b.Latin1={stringify:function(a){var c=a.words;a=a.sigBytes;for(var b=[],d=0;d<a;d++)b.push(String.fromCharCode(c[d>>>2]>>>24-8*(d%4)&255));return b.join("")},parse:function(a){for(var c=a.length,b=[],d=0;d<c;d++)b[d>>>2]|=(a.charCodeAt(d)&255)<<24-8*(d%4);return new n.init(b,c)}},r=b.Utf8={stringify:function(a){try{return decodeURIComponent(escape(g.stringify(a)))}catch(c){throw Error("Malformed UTF-8 data");}},parse:function(a){return g.parse(unescape(encodeURIComponent(a)))}},
k=j.BufferedBlockAlgorithm=f.extend({reset:function(){this._data=new n.init;this._nDataBytes=0},_append:function(a){"string"==typeof a&&(a=r.parse(a));this._data.concat(a);this._nDataBytes+=a.sigBytes},_process:function(a){var c=this._data,b=c.words,d=c.sigBytes,f=this.blockSize,h=d/(4*f),h=a?e.ceil(h):e.max((h|0)-this._minBufferSize,0);a=h*f;d=e.min(4*a,d);if(a){for(var g=0;g<a;g+=f)this._doProcessBlock(b,g);g=b.splice(0,a);c.sigBytes-=d}return new n.init(g,d)},clone:function(){var a=f.clone.call(this);
a._data=this._data.clone();return a},_minBufferSize:0});j.Hasher=k.extend({cfg:f.extend(),init:function(a){this.cfg=this.cfg.extend(a);this.reset()},reset:function(){k.reset.call(this);this._doReset()},update:function(a){this._append(a);this._process();return this},finalize:function(a){a&&this._append(a);return this._doFinalize()},blockSize:16,_createHelper:function(a){return function(c,b){return(new a.init(b)).finalize(c)}},_createHmacHelper:function(a){return function(b,f){return(new s.HMAC.init(a,
f)).finalize(b)}}});var s=p.algo={};return p}(Math);
(function(){var e=CryptoJS,m=e.lib,p=m.WordArray,j=m.Hasher,l=[],m=e.algo.SHA1=j.extend({_doReset:function(){this._hash=new p.init([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(f,n){for(var b=this._hash.words,h=b[0],g=b[1],e=b[2],k=b[3],j=b[4],a=0;80>a;a++){if(16>a)l[a]=f[n+a]|0;else{var c=l[a-3]^l[a-8]^l[a-14]^l[a-16];l[a]=c<<1|c>>>31}c=(h<<5|h>>>27)+j+l[a];c=20>a?c+((g&e|~g&k)+1518500249):40>a?c+((g^e^k)+1859775393):60>a?c+((g&e|g&k|e&k)-1894007588):c+((g^e^
k)-899497514);j=k;k=e;e=g<<30|g>>>2;g=h;h=c}b[0]=b[0]+h|0;b[1]=b[1]+g|0;b[2]=b[2]+e|0;b[3]=b[3]+k|0;b[4]=b[4]+j|0},_doFinalize:function(){var f=this._data,e=f.words,b=8*this._nDataBytes,h=8*f.sigBytes;e[h>>>5]|=128<<24-h%32;e[(h+64>>>9<<4)+14]=Math.floor(b/4294967296);e[(h+64>>>9<<4)+15]=b;f.sigBytes=4*e.length;this._process();return this._hash},clone:function(){var e=j.clone.call(this);e._hash=this._hash.clone();return e}});e.SHA1=j._createHelper(m);e.HmacSHA1=j._createHmacHelper(m)})();
var CryptoJS=CryptoJS||function(g,l){var e={},d=e.lib={},m=function(){},k=d.Base={extend:function(a){m.prototype=this;var c=new m;a&&c.mixIn(a);c.hasOwnProperty("init")||(c.init=function(){c.$super.init.apply(this,arguments)});c.init.prototype=c;c.$super=this;return c},create:function(){var a=this.extend();a.init.apply(a,arguments);return a},init:function(){},mixIn:function(a){for(var c in a)a.hasOwnProperty(c)&&(this[c]=a[c]);a.hasOwnProperty("toString")&&(this.toString=a.toString)},clone:function(){return this.init.prototype.extend(this)}},
p=d.WordArray=k.extend({init:function(a,c){a=this.words=a||[];this.sigBytes=c!=l?c:4*a.length},toString:function(a){return(a||n).stringify(this)},concat:function(a){var c=this.words,q=a.words,f=this.sigBytes;a=a.sigBytes;this.clamp();if(f%4)for(var b=0;b<a;b++)c[f+b>>>2]|=(q[b>>>2]>>>24-8*(b%4)&255)<<24-8*((f+b)%4);else if(65535<q.length)for(b=0;b<a;b+=4)c[f+b>>>2]=q[b>>>2];else c.push.apply(c,q);this.sigBytes+=a;return this},clamp:function(){var a=this.words,c=this.sigBytes;a[c>>>2]&=4294967295<<
32-8*(c%4);a.length=g.ceil(c/4)},clone:function(){var a=k.clone.call(this);a.words=this.words.slice(0);return a},random:function(a){for(var c=[],b=0;b<a;b+=4)c.push(4294967296*g.random()|0);return new p.init(c,a)}}),b=e.enc={},n=b.Hex={stringify:function(a){var c=a.words;a=a.sigBytes;for(var b=[],f=0;f<a;f++){var d=c[f>>>2]>>>24-8*(f%4)&255;b.push((d>>>4).toString(16));b.push((d&15).toString(16))}return b.join("")},parse:function(a){for(var c=a.length,b=[],f=0;f<c;f+=2)b[f>>>3]|=parseInt(a.substr(f,
2),16)<<24-4*(f%8);return new p.init(b,c/2)}},j=b.Latin1={stringify:function(a){var c=a.words;a=a.sigBytes;for(var b=[],f=0;f<a;f++)b.push(String.fromCharCode(c[f>>>2]>>>24-8*(f%4)&255));return b.join("")},parse:function(a){for(var c=a.length,b=[],f=0;f<c;f++)b[f>>>2]|=(a.charCodeAt(f)&255)<<24-8*(f%4);return new p.init(b,c)}},h=b.Utf8={stringify:function(a){try{return decodeURIComponent(escape(j.stringify(a)))}catch(c){throw Error("Malformed UTF-8 data");}},parse:function(a){return j.parse(unescape(encodeURIComponent(a)))}},
r=d.BufferedBlockAlgorithm=k.extend({reset:function(){this._data=new p.init;this._nDataBytes=0},_append:function(a){"string"==typeof a&&(a=h.parse(a));this._data.concat(a);this._nDataBytes+=a.sigBytes},_process:function(a){var c=this._data,b=c.words,f=c.sigBytes,d=this.blockSize,e=f/(4*d),e=a?g.ceil(e):g.max((e|0)-this._minBufferSize,0);a=e*d;f=g.min(4*a,f);if(a){for(var k=0;k<a;k+=d)this._doProcessBlock(b,k);k=b.splice(0,a);c.sigBytes-=f}return new p.init(k,f)},clone:function(){var a=k.clone.call(this);
a._data=this._data.clone();return a},_minBufferSize:0});d.Hasher=r.extend({cfg:k.extend(),init:function(a){this.cfg=this.cfg.extend(a);this.reset()},reset:function(){r.reset.call(this);this._doReset()},update:function(a){this._append(a);this._process();return this},finalize:function(a){a&&this._append(a);return this._doFinalize()},blockSize:16,_createHelper:function(a){return function(b,d){return(new a.init(d)).finalize(b)}},_createHmacHelper:function(a){return function(b,d){return(new s.HMAC.init(a,
d)).finalize(b)}}});var s=e.algo={};return e}(Math);
(function(){var g=CryptoJS,l=g.lib,e=l.WordArray,d=l.Hasher,m=[],l=g.algo.SHA1=d.extend({_doReset:function(){this._hash=new e.init([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(d,e){for(var b=this._hash.words,n=b[0],j=b[1],h=b[2],g=b[3],l=b[4],a=0;80>a;a++){if(16>a)m[a]=d[e+a]|0;else{var c=m[a-3]^m[a-8]^m[a-14]^m[a-16];m[a]=c<<1|c>>>31}c=(n<<5|n>>>27)+l+m[a];c=20>a?c+((j&h|~j&g)+1518500249):40>a?c+((j^h^g)+1859775393):60>a?c+((j&h|j&g|h&g)-1894007588):c+((j^h^
g)-899497514);l=g;g=h;h=j<<30|j>>>2;j=n;n=c}b[0]=b[0]+n|0;b[1]=b[1]+j|0;b[2]=b[2]+h|0;b[3]=b[3]+g|0;b[4]=b[4]+l|0},_doFinalize:function(){var d=this._data,e=d.words,b=8*this._nDataBytes,g=8*d.sigBytes;e[g>>>5]|=128<<24-g%32;e[(g+64>>>9<<4)+14]=Math.floor(b/4294967296);e[(g+64>>>9<<4)+15]=b;d.sigBytes=4*e.length;this._process();return this._hash},clone:function(){var e=d.clone.call(this);e._hash=this._hash.clone();return e}});g.SHA1=d._createHelper(l);g.HmacSHA1=d._createHmacHelper(l)})();
(function(){var g=CryptoJS,l=g.enc.Utf8;g.algo.HMAC=g.lib.Base.extend({init:function(e,d){e=this._hasher=new e.init;"string"==typeof d&&(d=l.parse(d));var g=e.blockSize,k=4*g;d.sigBytes>k&&(d=e.finalize(d));d.clamp();for(var p=this._oKey=d.clone(),b=this._iKey=d.clone(),n=p.words,j=b.words,h=0;h<g;h++)n[h]^=1549556828,j[h]^=909522486;p.sigBytes=b.sigBytes=k;this.reset()},reset:function(){var e=this._hasher;e.reset();e.update(this._iKey)},update:function(e){this._hasher.update(e);return this},finalize:function(e){var d=
this._hasher;e=d.finalize(e);d.reset();return d.finalize(this._oKey.clone().concat(e))}})})();

},{}],73:[function(require,module,exports){function SlowBuffer (size) {
    this.length = size;
};

var assert = require('assert');

exports.INSPECT_MAX_BYTES = 50;


function toHex(n) {
  if (n < 16) return '0' + n.toString(16);
  return n.toString(16);
}

function utf8ToBytes(str) {
  var byteArray = [];
  for (var i = 0; i < str.length; i++)
    if (str.charCodeAt(i) <= 0x7F)
      byteArray.push(str.charCodeAt(i));
    else {
      var h = encodeURIComponent(str.charAt(i)).substr(1).split('%');
      for (var j = 0; j < h.length; j++)
        byteArray.push(parseInt(h[j], 16));
    }

  return byteArray;
}

function asciiToBytes(str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++ )
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push( str.charCodeAt(i) & 0xFF );

  return byteArray;
}

function base64ToBytes(str) {
  return require("base64-js").toByteArray(str);
}

SlowBuffer.byteLength = function (str, encoding) {
  switch (encoding || "utf8") {
    case 'hex':
      return str.length / 2;

    case 'utf8':
    case 'utf-8':
      return utf8ToBytes(str).length;

    case 'ascii':
      return str.length;

    case 'base64':
      return base64ToBytes(str).length;

    default:
      throw new Error('Unknown encoding');
  }
};

function blitBuffer(src, dst, offset, length) {
  var pos, i = 0;
  while (i < length) {
    if ((i+offset >= dst.length) || (i >= src.length))
      break;

    dst[i + offset] = src[i];
    i++;
  }
  return i;
}

SlowBuffer.prototype.utf8Write = function (string, offset, length) {
  var bytes, pos;
  return SlowBuffer._charsWritten =  blitBuffer(utf8ToBytes(string), this, offset, length);
};

SlowBuffer.prototype.asciiWrite = function (string, offset, length) {
  var bytes, pos;
  return SlowBuffer._charsWritten =  blitBuffer(asciiToBytes(string), this, offset, length);
};

SlowBuffer.prototype.base64Write = function (string, offset, length) {
  var bytes, pos;
  return SlowBuffer._charsWritten = blitBuffer(base64ToBytes(string), this, offset, length);
};

SlowBuffer.prototype.base64Slice = function (start, end) {
  var bytes = Array.prototype.slice.apply(this, arguments)
  return require("base64-js").fromByteArray(bytes);
}

function decodeUtf8Char(str) {
  try {
    return decodeURIComponent(str);
  } catch (err) {
    return String.fromCharCode(0xFFFD); // UTF 8 invalid char
  }
}

SlowBuffer.prototype.utf8Slice = function () {
  var bytes = Array.prototype.slice.apply(this, arguments);
  var res = "";
  var tmp = "";
  var i = 0;
  while (i < bytes.length) {
    if (bytes[i] <= 0x7F) {
      res += decodeUtf8Char(tmp) + String.fromCharCode(bytes[i]);
      tmp = "";
    } else
      tmp += "%" + bytes[i].toString(16);

    i++;
  }

  return res + decodeUtf8Char(tmp);
}

SlowBuffer.prototype.asciiSlice = function () {
  var bytes = Array.prototype.slice.apply(this, arguments);
  var ret = "";
  for (var i = 0; i < bytes.length; i++)
    ret += String.fromCharCode(bytes[i]);
  return ret;
}

SlowBuffer.prototype.inspect = function() {
  var out = [],
      len = this.length;
  for (var i = 0; i < len; i++) {
    out[i] = toHex(this[i]);
    if (i == exports.INSPECT_MAX_BYTES) {
      out[i + 1] = '...';
      break;
    }
  }
  return '<SlowBuffer ' + out.join(' ') + '>';
};


SlowBuffer.prototype.hexSlice = function(start, end) {
  var len = this.length;

  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;

  var out = '';
  for (var i = start; i < end; i++) {
    out += toHex(this[i]);
  }
  return out;
};


SlowBuffer.prototype.toString = function(encoding, start, end) {
  encoding = String(encoding || 'utf8').toLowerCase();
  start = +start || 0;
  if (typeof end == 'undefined') end = this.length;

  // Fastpath empty strings
  if (+end == start) {
    return '';
  }

  switch (encoding) {
    case 'hex':
      return this.hexSlice(start, end);

    case 'utf8':
    case 'utf-8':
      return this.utf8Slice(start, end);

    case 'ascii':
      return this.asciiSlice(start, end);

    case 'binary':
      return this.binarySlice(start, end);

    case 'base64':
      return this.base64Slice(start, end);

    case 'ucs2':
    case 'ucs-2':
      return this.ucs2Slice(start, end);

    default:
      throw new Error('Unknown encoding');
  }
};


SlowBuffer.prototype.hexWrite = function(string, offset, length) {
  offset = +offset || 0;
  var remaining = this.length - offset;
  if (!length) {
    length = remaining;
  } else {
    length = +length;
    if (length > remaining) {
      length = remaining;
    }
  }

  // must be an even number of digits
  var strLen = string.length;
  if (strLen % 2) {
    throw new Error('Invalid hex string');
  }
  if (length > strLen / 2) {
    length = strLen / 2;
  }
  for (var i = 0; i < length; i++) {
    var byte = parseInt(string.substr(i * 2, 2), 16);
    if (isNaN(byte)) throw new Error('Invalid hex string');
    this[offset + i] = byte;
  }
  SlowBuffer._charsWritten = i * 2;
  return i;
};


SlowBuffer.prototype.write = function(string, offset, length, encoding) {
  // Support both (string, offset, length, encoding)
  // and the legacy (string, encoding, offset, length)
  if (isFinite(offset)) {
    if (!isFinite(length)) {
      encoding = length;
      length = undefined;
    }
  } else {  // legacy
    var swap = encoding;
    encoding = offset;
    offset = length;
    length = swap;
  }

  offset = +offset || 0;
  var remaining = this.length - offset;
  if (!length) {
    length = remaining;
  } else {
    length = +length;
    if (length > remaining) {
      length = remaining;
    }
  }
  encoding = String(encoding || 'utf8').toLowerCase();

  switch (encoding) {
    case 'hex':
      return this.hexWrite(string, offset, length);

    case 'utf8':
    case 'utf-8':
      return this.utf8Write(string, offset, length);

    case 'ascii':
      return this.asciiWrite(string, offset, length);

    case 'binary':
      return this.binaryWrite(string, offset, length);

    case 'base64':
      return this.base64Write(string, offset, length);

    case 'ucs2':
    case 'ucs-2':
      return this.ucs2Write(string, offset, length);

    default:
      throw new Error('Unknown encoding');
  }
};


// slice(start, end)
SlowBuffer.prototype.slice = function(start, end) {
  if (end === undefined) end = this.length;

  if (end > this.length) {
    throw new Error('oob');
  }
  if (start > end) {
    throw new Error('oob');
  }

  return new Buffer(this, end - start, +start);
};

SlowBuffer.prototype.copy = function(target, targetstart, sourcestart, sourceend) {
  var temp = [];
  for (var i=sourcestart; i<sourceend; i++) {
    assert.ok(typeof this[i] !== 'undefined', "copying undefined buffer bytes!");
    temp.push(this[i]);
  }

  for (var i=targetstart; i<targetstart+temp.length; i++) {
    target[i] = temp[i-targetstart];
  }
};

function coerce(length) {
  // Coerce length to a number (possibly NaN), round up
  // in case it's fractional (e.g. 123.456) then do a
  // double negate to coerce a NaN to 0. Easy, right?
  length = ~~Math.ceil(+length);
  return length < 0 ? 0 : length;
}


// Buffer

function Buffer(subject, encoding, offset) {
  if (!(this instanceof Buffer)) {
    return new Buffer(subject, encoding, offset);
  }

  var type;

  // Are we slicing?
  if (typeof offset === 'number') {
    this.length = coerce(encoding);
    this.parent = subject;
    this.offset = offset;
  } else {
    // Find the length
    switch (type = typeof subject) {
      case 'number':
        this.length = coerce(subject);
        break;

      case 'string':
        this.length = Buffer.byteLength(subject, encoding);
        break;

      case 'object': // Assume object is an array
        this.length = coerce(subject.length);
        break;

      default:
        throw new Error('First argument needs to be a number, ' +
                        'array or string.');
    }

    if (this.length > Buffer.poolSize) {
      // Big buffer, just alloc one.
      this.parent = new SlowBuffer(this.length);
      this.offset = 0;

    } else {
      // Small buffer.
      if (!pool || pool.length - pool.used < this.length) allocPool();
      this.parent = pool;
      this.offset = pool.used;
      pool.used += this.length;
    }

    // Treat array-ish objects as a byte array.
    if (isArrayIsh(subject)) {
      for (var i = 0; i < this.length; i++) {
        this.parent[i + this.offset] = subject[i];
      }
    } else if (type == 'string') {
      // We are a string
      this.length = this.write(subject, 0, encoding);
    }
  }

}

function isArrayIsh(subject) {
  return Array.isArray(subject) || Buffer.isBuffer(subject) ||
         subject && typeof subject === 'object' &&
         typeof subject.length === 'number';
}

exports.SlowBuffer = SlowBuffer;
exports.Buffer = Buffer;

Buffer.poolSize = 8 * 1024;
var pool;

function allocPool() {
  pool = new SlowBuffer(Buffer.poolSize);
  pool.used = 0;
}


// Static methods
Buffer.isBuffer = function isBuffer(b) {
  return b instanceof Buffer || b instanceof SlowBuffer;
};

Buffer.concat = function (list, totalLength) {
  if (!Array.isArray(list)) {
    throw new Error("Usage: Buffer.concat(list, [totalLength])\n \
      list should be an Array.");
  }

  if (list.length === 0) {
    return new Buffer(0);
  } else if (list.length === 1) {
    return list[0];
  }

  if (typeof totalLength !== 'number') {
    totalLength = 0;
    for (var i = 0; i < list.length; i++) {
      var buf = list[i];
      totalLength += buf.length;
    }
  }

  var buffer = new Buffer(totalLength);
  var pos = 0;
  for (var i = 0; i < list.length; i++) {
    var buf = list[i];
    buf.copy(buffer, pos);
    pos += buf.length;
  }
  return buffer;
};

// Inspect
Buffer.prototype.inspect = function inspect() {
  var out = [],
      len = this.length;

  for (var i = 0; i < len; i++) {
    out[i] = toHex(this.parent[i + this.offset]);
    if (i == exports.INSPECT_MAX_BYTES) {
      out[i + 1] = '...';
      break;
    }
  }

  return '<Buffer ' + out.join(' ') + '>';
};


Buffer.prototype.get = function get(i) {
  if (i < 0 || i >= this.length) throw new Error('oob');
  return this.parent[this.offset + i];
};


Buffer.prototype.set = function set(i, v) {
  if (i < 0 || i >= this.length) throw new Error('oob');
  return this.parent[this.offset + i] = v;
};


// write(string, offset = 0, length = buffer.length-offset, encoding = 'utf8')
Buffer.prototype.write = function(string, offset, length, encoding) {
  // Support both (string, offset, length, encoding)
  // and the legacy (string, encoding, offset, length)
  if (isFinite(offset)) {
    if (!isFinite(length)) {
      encoding = length;
      length = undefined;
    }
  } else {  // legacy
    var swap = encoding;
    encoding = offset;
    offset = length;
    length = swap;
  }

  offset = +offset || 0;
  var remaining = this.length - offset;
  if (!length) {
    length = remaining;
  } else {
    length = +length;
    if (length > remaining) {
      length = remaining;
    }
  }
  encoding = String(encoding || 'utf8').toLowerCase();

  var ret;
  switch (encoding) {
    case 'hex':
      ret = this.parent.hexWrite(string, this.offset + offset, length);
      break;

    case 'utf8':
    case 'utf-8':
      ret = this.parent.utf8Write(string, this.offset + offset, length);
      break;

    case 'ascii':
      ret = this.parent.asciiWrite(string, this.offset + offset, length);
      break;

    case 'binary':
      ret = this.parent.binaryWrite(string, this.offset + offset, length);
      break;

    case 'base64':
      // Warning: maxLength not taken into account in base64Write
      ret = this.parent.base64Write(string, this.offset + offset, length);
      break;

    case 'ucs2':
    case 'ucs-2':
      ret = this.parent.ucs2Write(string, this.offset + offset, length);
      break;

    default:
      throw new Error('Unknown encoding');
  }

  Buffer._charsWritten = SlowBuffer._charsWritten;

  return ret;
};


// toString(encoding, start=0, end=buffer.length)
Buffer.prototype.toString = function(encoding, start, end) {
  encoding = String(encoding || 'utf8').toLowerCase();

  if (typeof start == 'undefined' || start < 0) {
    start = 0;
  } else if (start > this.length) {
    start = this.length;
  }

  if (typeof end == 'undefined' || end > this.length) {
    end = this.length;
  } else if (end < 0) {
    end = 0;
  }

  start = start + this.offset;
  end = end + this.offset;

  switch (encoding) {
    case 'hex':
      return this.parent.hexSlice(start, end);

    case 'utf8':
    case 'utf-8':
      return this.parent.utf8Slice(start, end);

    case 'ascii':
      return this.parent.asciiSlice(start, end);

    case 'binary':
      return this.parent.binarySlice(start, end);

    case 'base64':
      return this.parent.base64Slice(start, end);

    case 'ucs2':
    case 'ucs-2':
      return this.parent.ucs2Slice(start, end);

    default:
      throw new Error('Unknown encoding');
  }
};


// byteLength
Buffer.byteLength = SlowBuffer.byteLength;


// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function fill(value, start, end) {
  value || (value = 0);
  start || (start = 0);
  end || (end = this.length);

  if (typeof value === 'string') {
    value = value.charCodeAt(0);
  }
  if (!(typeof value === 'number') || isNaN(value)) {
    throw new Error('value is not a number');
  }

  if (end < start) throw new Error('end < start');

  // Fill 0 bytes; we're done
  if (end === start) return 0;
  if (this.length == 0) return 0;

  if (start < 0 || start >= this.length) {
    throw new Error('start out of bounds');
  }

  if (end < 0 || end > this.length) {
    throw new Error('end out of bounds');
  }

  return this.parent.fill(value,
                          start + this.offset,
                          end + this.offset);
};


// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function(target, target_start, start, end) {
  var source = this;
  start || (start = 0);
  end || (end = this.length);
  target_start || (target_start = 0);

  if (end < start) throw new Error('sourceEnd < sourceStart');

  // Copy 0 bytes; we're done
  if (end === start) return 0;
  if (target.length == 0 || source.length == 0) return 0;

  if (target_start < 0 || target_start >= target.length) {
    throw new Error('targetStart out of bounds');
  }

  if (start < 0 || start >= source.length) {
    throw new Error('sourceStart out of bounds');
  }

  if (end < 0 || end > source.length) {
    throw new Error('sourceEnd out of bounds');
  }

  // Are we oob?
  if (end > this.length) {
    end = this.length;
  }

  if (target.length - target_start < end - start) {
    end = target.length - target_start + start;
  }

  return this.parent.copy(target.parent,
                          target_start + target.offset,
                          start + this.offset,
                          end + this.offset);
};


// slice(start, end)
Buffer.prototype.slice = function(start, end) {
  if (end === undefined) end = this.length;
  if (end > this.length) throw new Error('oob');
  if (start > end) throw new Error('oob');

  return new Buffer(this.parent, end - start, +start + this.offset);
};


// Legacy methods for backwards compatibility.

Buffer.prototype.utf8Slice = function(start, end) {
  return this.toString('utf8', start, end);
};

Buffer.prototype.binarySlice = function(start, end) {
  return this.toString('binary', start, end);
};

Buffer.prototype.asciiSlice = function(start, end) {
  return this.toString('ascii', start, end);
};

Buffer.prototype.utf8Write = function(string, offset) {
  return this.write(string, offset, 'utf8');
};

Buffer.prototype.binaryWrite = function(string, offset) {
  return this.write(string, offset, 'binary');
};

Buffer.prototype.asciiWrite = function(string, offset) {
  return this.write(string, offset, 'ascii');
};

Buffer.prototype.readUInt8 = function(offset, noAssert) {
  var buffer = this;

  if (!noAssert) {
    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset < buffer.length,
        'Trying to read beyond buffer length');
  }

  return buffer.parent[buffer.offset + offset];
};

function readUInt16(buffer, offset, isBigEndian, noAssert) {
  var val = 0;


  if (!noAssert) {
    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 1 < buffer.length,
        'Trying to read beyond buffer length');
  }

  if (isBigEndian) {
    val = buffer.parent[buffer.offset + offset] << 8;
    val |= buffer.parent[buffer.offset + offset + 1];
  } else {
    val = buffer.parent[buffer.offset + offset];
    val |= buffer.parent[buffer.offset + offset + 1] << 8;
  }

  return val;
}

Buffer.prototype.readUInt16LE = function(offset, noAssert) {
  return readUInt16(this, offset, false, noAssert);
};

Buffer.prototype.readUInt16BE = function(offset, noAssert) {
  return readUInt16(this, offset, true, noAssert);
};

function readUInt32(buffer, offset, isBigEndian, noAssert) {
  var val = 0;

  if (!noAssert) {
    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 3 < buffer.length,
        'Trying to read beyond buffer length');
  }

  if (isBigEndian) {
    val = buffer.parent[buffer.offset + offset + 1] << 16;
    val |= buffer.parent[buffer.offset + offset + 2] << 8;
    val |= buffer.parent[buffer.offset + offset + 3];
    val = val + (buffer.parent[buffer.offset + offset] << 24 >>> 0);
  } else {
    val = buffer.parent[buffer.offset + offset + 2] << 16;
    val |= buffer.parent[buffer.offset + offset + 1] << 8;
    val |= buffer.parent[buffer.offset + offset];
    val = val + (buffer.parent[buffer.offset + offset + 3] << 24 >>> 0);
  }

  return val;
}

Buffer.prototype.readUInt32LE = function(offset, noAssert) {
  return readUInt32(this, offset, false, noAssert);
};

Buffer.prototype.readUInt32BE = function(offset, noAssert) {
  return readUInt32(this, offset, true, noAssert);
};


/*
 * Signed integer types, yay team! A reminder on how two's complement actually
 * works. The first bit is the signed bit, i.e. tells us whether or not the
 * number should be positive or negative. If the two's complement value is
 * positive, then we're done, as it's equivalent to the unsigned representation.
 *
 * Now if the number is positive, you're pretty much done, you can just leverage
 * the unsigned translations and return those. Unfortunately, negative numbers
 * aren't quite that straightforward.
 *
 * At first glance, one might be inclined to use the traditional formula to
 * translate binary numbers between the positive and negative values in two's
 * complement. (Though it doesn't quite work for the most negative value)
 * Mainly:
 *  - invert all the bits
 *  - add one to the result
 *
 * Of course, this doesn't quite work in Javascript. Take for example the value
 * of -128. This could be represented in 16 bits (big-endian) as 0xff80. But of
 * course, Javascript will do the following:
 *
 * > ~0xff80
 * -65409
 *
 * Whoh there, Javascript, that's not quite right. But wait, according to
 * Javascript that's perfectly correct. When Javascript ends up seeing the
 * constant 0xff80, it has no notion that it is actually a signed number. It
 * assumes that we've input the unsigned value 0xff80. Thus, when it does the
 * binary negation, it casts it into a signed value, (positive 0xff80). Then
 * when you perform binary negation on that, it turns it into a negative number.
 *
 * Instead, we're going to have to use the following general formula, that works
 * in a rather Javascript friendly way. I'm glad we don't support this kind of
 * weird numbering scheme in the kernel.
 *
 * (BIT-MAX - (unsigned)val + 1) * -1
 *
 * The astute observer, may think that this doesn't make sense for 8-bit numbers
 * (really it isn't necessary for them). However, when you get 16-bit numbers,
 * you do. Let's go back to our prior example and see how this will look:
 *
 * (0xffff - 0xff80 + 1) * -1
 * (0x007f + 1) * -1
 * (0x0080) * -1
 */
Buffer.prototype.readInt8 = function(offset, noAssert) {
  var buffer = this;
  var neg;

  if (!noAssert) {
    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset < buffer.length,
        'Trying to read beyond buffer length');
  }

  neg = buffer.parent[buffer.offset + offset] & 0x80;
  if (!neg) {
    return (buffer.parent[buffer.offset + offset]);
  }

  return ((0xff - buffer.parent[buffer.offset + offset] + 1) * -1);
};

function readInt16(buffer, offset, isBigEndian, noAssert) {
  var neg, val;

  if (!noAssert) {
    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 1 < buffer.length,
        'Trying to read beyond buffer length');
  }

  val = readUInt16(buffer, offset, isBigEndian, noAssert);
  neg = val & 0x8000;
  if (!neg) {
    return val;
  }

  return (0xffff - val + 1) * -1;
}

Buffer.prototype.readInt16LE = function(offset, noAssert) {
  return readInt16(this, offset, false, noAssert);
};

Buffer.prototype.readInt16BE = function(offset, noAssert) {
  return readInt16(this, offset, true, noAssert);
};

function readInt32(buffer, offset, isBigEndian, noAssert) {
  var neg, val;

  if (!noAssert) {
    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 3 < buffer.length,
        'Trying to read beyond buffer length');
  }

  val = readUInt32(buffer, offset, isBigEndian, noAssert);
  neg = val & 0x80000000;
  if (!neg) {
    return (val);
  }

  return (0xffffffff - val + 1) * -1;
}

Buffer.prototype.readInt32LE = function(offset, noAssert) {
  return readInt32(this, offset, false, noAssert);
};

Buffer.prototype.readInt32BE = function(offset, noAssert) {
  return readInt32(this, offset, true, noAssert);
};

function readFloat(buffer, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset + 3 < buffer.length,
        'Trying to read beyond buffer length');
  }

  return require('./buffer_ieee754').readIEEE754(buffer, offset, isBigEndian,
      23, 4);
}

Buffer.prototype.readFloatLE = function(offset, noAssert) {
  return readFloat(this, offset, false, noAssert);
};

Buffer.prototype.readFloatBE = function(offset, noAssert) {
  return readFloat(this, offset, true, noAssert);
};

function readDouble(buffer, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset + 7 < buffer.length,
        'Trying to read beyond buffer length');
  }

  return require('./buffer_ieee754').readIEEE754(buffer, offset, isBigEndian,
      52, 8);
}

Buffer.prototype.readDoubleLE = function(offset, noAssert) {
  return readDouble(this, offset, false, noAssert);
};

Buffer.prototype.readDoubleBE = function(offset, noAssert) {
  return readDouble(this, offset, true, noAssert);
};


/*
 * We have to make sure that the value is a valid integer. This means that it is
 * non-negative. It has no fractional component and that it does not exceed the
 * maximum allowed value.
 *
 *      value           The number to check for validity
 *
 *      max             The maximum value
 */
function verifuint(value, max) {
  assert.ok(typeof (value) == 'number',
      'cannot write a non-number as a number');

  assert.ok(value >= 0,
      'specified a negative value for writing an unsigned value');

  assert.ok(value <= max, 'value is larger than maximum value for type');

  assert.ok(Math.floor(value) === value, 'value has a fractional component');
}

Buffer.prototype.writeUInt8 = function(value, offset, noAssert) {
  var buffer = this;

  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset < buffer.length,
        'trying to write beyond buffer length');

    verifuint(value, 0xff);
  }

  buffer.parent[buffer.offset + offset] = value;
};

function writeUInt16(buffer, value, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 1 < buffer.length,
        'trying to write beyond buffer length');

    verifuint(value, 0xffff);
  }

  if (isBigEndian) {
    buffer.parent[buffer.offset + offset] = (value & 0xff00) >>> 8;
    buffer.parent[buffer.offset + offset + 1] = value & 0x00ff;
  } else {
    buffer.parent[buffer.offset + offset + 1] = (value & 0xff00) >>> 8;
    buffer.parent[buffer.offset + offset] = value & 0x00ff;
  }
}

Buffer.prototype.writeUInt16LE = function(value, offset, noAssert) {
  writeUInt16(this, value, offset, false, noAssert);
};

Buffer.prototype.writeUInt16BE = function(value, offset, noAssert) {
  writeUInt16(this, value, offset, true, noAssert);
};

function writeUInt32(buffer, value, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 3 < buffer.length,
        'trying to write beyond buffer length');

    verifuint(value, 0xffffffff);
  }

  if (isBigEndian) {
    buffer.parent[buffer.offset + offset] = (value >>> 24) & 0xff;
    buffer.parent[buffer.offset + offset + 1] = (value >>> 16) & 0xff;
    buffer.parent[buffer.offset + offset + 2] = (value >>> 8) & 0xff;
    buffer.parent[buffer.offset + offset + 3] = value & 0xff;
  } else {
    buffer.parent[buffer.offset + offset + 3] = (value >>> 24) & 0xff;
    buffer.parent[buffer.offset + offset + 2] = (value >>> 16) & 0xff;
    buffer.parent[buffer.offset + offset + 1] = (value >>> 8) & 0xff;
    buffer.parent[buffer.offset + offset] = value & 0xff;
  }
}

Buffer.prototype.writeUInt32LE = function(value, offset, noAssert) {
  writeUInt32(this, value, offset, false, noAssert);
};

Buffer.prototype.writeUInt32BE = function(value, offset, noAssert) {
  writeUInt32(this, value, offset, true, noAssert);
};


/*
 * We now move onto our friends in the signed number category. Unlike unsigned
 * numbers, we're going to have to worry a bit more about how we put values into
 * arrays. Since we are only worrying about signed 32-bit values, we're in
 * slightly better shape. Unfortunately, we really can't do our favorite binary
 * & in this system. It really seems to do the wrong thing. For example:
 *
 * > -32 & 0xff
 * 224
 *
 * What's happening above is really: 0xe0 & 0xff = 0xe0. However, the results of
 * this aren't treated as a signed number. Ultimately a bad thing.
 *
 * What we're going to want to do is basically create the unsigned equivalent of
 * our representation and pass that off to the wuint* functions. To do that
 * we're going to do the following:
 *
 *  - if the value is positive
 *      we can pass it directly off to the equivalent wuint
 *  - if the value is negative
 *      we do the following computation:
 *         mb + val + 1, where
 *         mb   is the maximum unsigned value in that byte size
 *         val  is the Javascript negative integer
 *
 *
 * As a concrete value, take -128. In signed 16 bits this would be 0xff80. If
 * you do out the computations:
 *
 * 0xffff - 128 + 1
 * 0xffff - 127
 * 0xff80
 *
 * You can then encode this value as the signed version. This is really rather
 * hacky, but it should work and get the job done which is our goal here.
 */

/*
 * A series of checks to make sure we actually have a signed 32-bit number
 */
function verifsint(value, max, min) {
  assert.ok(typeof (value) == 'number',
      'cannot write a non-number as a number');

  assert.ok(value <= max, 'value larger than maximum allowed value');

  assert.ok(value >= min, 'value smaller than minimum allowed value');

  assert.ok(Math.floor(value) === value, 'value has a fractional component');
}

function verifIEEE754(value, max, min) {
  assert.ok(typeof (value) == 'number',
      'cannot write a non-number as a number');

  assert.ok(value <= max, 'value larger than maximum allowed value');

  assert.ok(value >= min, 'value smaller than minimum allowed value');
}

Buffer.prototype.writeInt8 = function(value, offset, noAssert) {
  var buffer = this;

  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset < buffer.length,
        'Trying to write beyond buffer length');

    verifsint(value, 0x7f, -0x80);
  }

  if (value >= 0) {
    buffer.writeUInt8(value, offset, noAssert);
  } else {
    buffer.writeUInt8(0xff + value + 1, offset, noAssert);
  }
};

function writeInt16(buffer, value, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 1 < buffer.length,
        'Trying to write beyond buffer length');

    verifsint(value, 0x7fff, -0x8000);
  }

  if (value >= 0) {
    writeUInt16(buffer, value, offset, isBigEndian, noAssert);
  } else {
    writeUInt16(buffer, 0xffff + value + 1, offset, isBigEndian, noAssert);
  }
}

Buffer.prototype.writeInt16LE = function(value, offset, noAssert) {
  writeInt16(this, value, offset, false, noAssert);
};

Buffer.prototype.writeInt16BE = function(value, offset, noAssert) {
  writeInt16(this, value, offset, true, noAssert);
};

function writeInt32(buffer, value, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 3 < buffer.length,
        'Trying to write beyond buffer length');

    verifsint(value, 0x7fffffff, -0x80000000);
  }

  if (value >= 0) {
    writeUInt32(buffer, value, offset, isBigEndian, noAssert);
  } else {
    writeUInt32(buffer, 0xffffffff + value + 1, offset, isBigEndian, noAssert);
  }
}

Buffer.prototype.writeInt32LE = function(value, offset, noAssert) {
  writeInt32(this, value, offset, false, noAssert);
};

Buffer.prototype.writeInt32BE = function(value, offset, noAssert) {
  writeInt32(this, value, offset, true, noAssert);
};

function writeFloat(buffer, value, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 3 < buffer.length,
        'Trying to write beyond buffer length');

    verifIEEE754(value, 3.4028234663852886e+38, -3.4028234663852886e+38);
  }

  require('./buffer_ieee754').writeIEEE754(buffer, value, offset, isBigEndian,
      23, 4);
}

Buffer.prototype.writeFloatLE = function(value, offset, noAssert) {
  writeFloat(this, value, offset, false, noAssert);
};

Buffer.prototype.writeFloatBE = function(value, offset, noAssert) {
  writeFloat(this, value, offset, true, noAssert);
};

function writeDouble(buffer, value, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 7 < buffer.length,
        'Trying to write beyond buffer length');

    verifIEEE754(value, 1.7976931348623157E+308, -1.7976931348623157E+308);
  }

  require('./buffer_ieee754').writeIEEE754(buffer, value, offset, isBigEndian,
      52, 8);
}

Buffer.prototype.writeDoubleLE = function(value, offset, noAssert) {
  writeDouble(this, value, offset, false, noAssert);
};

Buffer.prototype.writeDoubleBE = function(value, offset, noAssert) {
  writeDouble(this, value, offset, true, noAssert);
};

SlowBuffer.prototype.readUInt8 = Buffer.prototype.readUInt8;
SlowBuffer.prototype.readUInt16LE = Buffer.prototype.readUInt16LE;
SlowBuffer.prototype.readUInt16BE = Buffer.prototype.readUInt16BE;
SlowBuffer.prototype.readUInt32LE = Buffer.prototype.readUInt32LE;
SlowBuffer.prototype.readUInt32BE = Buffer.prototype.readUInt32BE;
SlowBuffer.prototype.readInt8 = Buffer.prototype.readInt8;
SlowBuffer.prototype.readInt16LE = Buffer.prototype.readInt16LE;
SlowBuffer.prototype.readInt16BE = Buffer.prototype.readInt16BE;
SlowBuffer.prototype.readInt32LE = Buffer.prototype.readInt32LE;
SlowBuffer.prototype.readInt32BE = Buffer.prototype.readInt32BE;
SlowBuffer.prototype.readFloatLE = Buffer.prototype.readFloatLE;
SlowBuffer.prototype.readFloatBE = Buffer.prototype.readFloatBE;
SlowBuffer.prototype.readDoubleLE = Buffer.prototype.readDoubleLE;
SlowBuffer.prototype.readDoubleBE = Buffer.prototype.readDoubleBE;
SlowBuffer.prototype.writeUInt8 = Buffer.prototype.writeUInt8;
SlowBuffer.prototype.writeUInt16LE = Buffer.prototype.writeUInt16LE;
SlowBuffer.prototype.writeUInt16BE = Buffer.prototype.writeUInt16BE;
SlowBuffer.prototype.writeUInt32LE = Buffer.prototype.writeUInt32LE;
SlowBuffer.prototype.writeUInt32BE = Buffer.prototype.writeUInt32BE;
SlowBuffer.prototype.writeInt8 = Buffer.prototype.writeInt8;
SlowBuffer.prototype.writeInt16LE = Buffer.prototype.writeInt16LE;
SlowBuffer.prototype.writeInt16BE = Buffer.prototype.writeInt16BE;
SlowBuffer.prototype.writeInt32LE = Buffer.prototype.writeInt32LE;
SlowBuffer.prototype.writeInt32BE = Buffer.prototype.writeInt32BE;
SlowBuffer.prototype.writeFloatLE = Buffer.prototype.writeFloatLE;
SlowBuffer.prototype.writeFloatBE = Buffer.prototype.writeFloatBE;
SlowBuffer.prototype.writeDoubleLE = Buffer.prototype.writeDoubleLE;
SlowBuffer.prototype.writeDoubleBE = Buffer.prototype.writeDoubleBE;

},{"assert":98,"./buffer_ieee754":101,"base64-js":102}],103:[function(require,module,exports){var Stream = require('stream');

var Response = module.exports = function (res) {
    this.offset = 0;
    this.readable = true;
};

Response.prototype = new Stream;

var capable = {
    streaming : true,
    status2 : true
};

function parseHeaders (res) {
    var lines = res.getAllResponseHeaders().split(/\r?\n/);
    var headers = {};
    for (var i = 0; i < lines.length; i++) {
        var line = lines[i];
        if (line === '') continue;
        
        var m = line.match(/^([^:]+):\s*(.*)/);
        if (m) {
            var key = m[1].toLowerCase(), value = m[2];
            
            if (headers[key] !== undefined) {
            
                if (isArray(headers[key])) {
                    headers[key].push(value);
                }
                else {
                    headers[key] = [ headers[key], value ];
                }
            }
            else {
                headers[key] = value;
            }
        }
        else {
            headers[line] = true;
        }
    }
    return headers;
}

Response.prototype.getResponse = function (xhr) {
    var respType = String(xhr.responseType).toLowerCase();
    if (respType === 'blob') return xhr.responseBlob;
    if (respType === 'arraybuffer') return xhr.response;
    return xhr.responseText;
}

Response.prototype.getHeader = function (key) {
    return this.headers[key.toLowerCase()];
};

Response.prototype.handle = function (res) {
    if (res.readyState === 2 && capable.status2) {
        try {
            this.statusCode = res.status;
            this.headers = parseHeaders(res);
        }
        catch (err) {
            capable.status2 = false;
        }
        
        if (capable.status2) {
            this.emit('ready');
        }
    }
    else if (capable.streaming && res.readyState === 3) {
        try {
            if (!this.statusCode) {
                this.statusCode = res.status;
                this.headers = parseHeaders(res);
                this.emit('ready');
            }
        }
        catch (err) {}
        
        try {
            this._emitData(res);
        }
        catch (err) {
            capable.streaming = false;
        }
    }
    else if (res.readyState === 4) {
        if (!this.statusCode) {
            this.statusCode = res.status;
            this.emit('ready');
        }
        this._emitData(res);

        if (res.status === 0) {
            this.emit('error', new Error("Connection error"));
        }
        else this.emit('end');
        
        this.emit('close');
    }
};

Response.prototype._emitData = function (res) {
    var respBody = this.getResponse(res);
    if (respBody.toString().match(/ArrayBuffer/)) {
        this.emit('data', new Uint8Array(respBody, this.offset));
        this.offset = respBody.byteLength;
        return;
    }
    if (respBody.length > this.offset) {
        this.emit('data', respBody.slice(this.offset));
        this.offset = respBody.length;
    }
};

var isArray = Array.isArray || function (xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
};

},{"stream":76}],102:[function(require,module,exports){(function (exports) {
	'use strict';

	var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

	function b64ToByteArray(b64) {
		var i, j, l, tmp, placeHolders, arr;
	
		if (b64.length % 4 > 0) {
			throw 'Invalid string. Length must be a multiple of 4';
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		placeHolders = b64.indexOf('=');
		placeHolders = placeHolders > 0 ? b64.length - placeHolders : 0;

		// base64 is 4/3 + up to two characters of the original data
		arr = [];//new Uint8Array(b64.length * 3 / 4 - placeHolders);

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length;

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (lookup.indexOf(b64[i]) << 18) | (lookup.indexOf(b64[i + 1]) << 12) | (lookup.indexOf(b64[i + 2]) << 6) | lookup.indexOf(b64[i + 3]);
			arr.push((tmp & 0xFF0000) >> 16);
			arr.push((tmp & 0xFF00) >> 8);
			arr.push(tmp & 0xFF);
		}

		if (placeHolders === 2) {
			tmp = (lookup.indexOf(b64[i]) << 2) | (lookup.indexOf(b64[i + 1]) >> 4);
			arr.push(tmp & 0xFF);
		} else if (placeHolders === 1) {
			tmp = (lookup.indexOf(b64[i]) << 10) | (lookup.indexOf(b64[i + 1]) << 4) | (lookup.indexOf(b64[i + 2]) >> 2);
			arr.push((tmp >> 8) & 0xFF);
			arr.push(tmp & 0xFF);
		}

		return arr;
	}

	function uint8ToBase64(uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length;

		function tripletToBase64 (num) {
			return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
		};

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
			output += tripletToBase64(temp);
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1];
				output += lookup[temp >> 2];
				output += lookup[(temp << 4) & 0x3F];
				output += '==';
				break;
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1]);
				output += lookup[temp >> 10];
				output += lookup[(temp >> 4) & 0x3F];
				output += lookup[(temp << 2) & 0x3F];
				output += '=';
				break;
		}

		return output;
	}

	module.exports.toByteArray = b64ToByteArray;
	module.exports.fromByteArray = uint8ToBase64;
}());

},{}],97:[function(require,module,exports){var Stream = require('stream');
var Response = require('./response');
var concatStream = require('concat-stream')

var Request = module.exports = function (xhr, params) {
    var self = this;
    self.writable = true;
    self.xhr = xhr;
    self.body = concatStream()
    
    var uri = params.host + ':' + params.port + (params.path || '/');
    
    xhr.open(
        params.method || 'GET',
        (params.scheme || 'http') + '://' + uri,
        true
    );
    
    if (params.headers) {
        var keys = objectKeys(params.headers);
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (!self.isSafeRequestHeader(key)) continue;
            var value = params.headers[key];
            if (isArray(value)) {
                for (var j = 0; j < value.length; j++) {
                    xhr.setRequestHeader(key, value[j]);
                }
            }
            else xhr.setRequestHeader(key, value)
        }
    }
    
    var res = new Response;
    res.on('close', function () {
        self.emit('close');
    });
    
    res.on('ready', function () {
        self.emit('response', res);
    });
    res.on('error', function (err) {
        self.emit('error', err);
    });

    xhr.onreadystatechange = function () {
        res.handle(xhr);
    };
};

Request.prototype = new Stream;

Request.prototype.setHeader = function (key, value) {
    if (isArray(value)) {
        for (var i = 0; i < value.length; i++) {
            this.xhr.setRequestHeader(key, value[i]);
        }
    }
    else {
        this.xhr.setRequestHeader(key, value);
    }
};

Request.prototype.write = function (s) {
    this.body.write(s);
};

Request.prototype.destroy = function (s) {
    this.xhr.abort();
    this.emit('close');
};

Request.prototype.end = function (s) {
    if (s !== undefined) this.body.write(s);
    this.body.end()
    this.xhr.send(this.body.getBody());
};

// Taken from http://dxr.mozilla.org/mozilla/mozilla-central/content/base/src/nsXMLHttpRequest.cpp.html
Request.unsafeHeaders = [
    "accept-charset",
    "accept-encoding",
    "access-control-request-headers",
    "access-control-request-method",
    "connection",
    "content-length",
    "cookie",
    "cookie2",
    "content-transfer-encoding",
    "date",
    "expect",
    "host",
    "keep-alive",
    "origin",
    "referer",
    "te",
    "trailer",
    "transfer-encoding",
    "upgrade",
    "user-agent",
    "via"
];

Request.prototype.isSafeRequestHeader = function (headerName) {
    if (!headerName) return false;
    return indexOf(Request.unsafeHeaders, headerName.toLowerCase()) === -1;
};

var objectKeys = Object.keys || function (obj) {
    var keys = [];
    for (var key in obj) keys.push(key);
    return keys;
};

var isArray = Array.isArray || function (xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
};

var indexOf = function (xs, x) {
    if (xs.indexOf) return xs.indexOf(x);
    for (var i = 0; i < xs.length; i++) {
        if (xs[i] === x) return i;
    }
    return -1;
};

},{"stream":76,"./response":103,"concat-stream":104}],104:[function(require,module,exports){var stream = require('stream')
var util = require('util')

function ConcatStream(cb) {
  stream.Stream.call(this)
  this.writable = true
  if (cb) this.cb = cb
  this.body = []
  if (this.cb) this.on('error', cb)
}

util.inherits(ConcatStream, stream.Stream)

ConcatStream.prototype.write = function(chunk) {
  this.body.push(chunk)
}

ConcatStream.prototype.arrayConcat = function(arrs) {
  if (arrs.length === 0) return []
  if (arrs.length === 1) return arrs[0]
  return arrs.reduce(function (a, b) { return a.concat(b) })
}

ConcatStream.prototype.isArray = function(arr) {
  var isArray = Array.isArray(arr)
  var isTypedArray = arr.toString().match(/Array/)
  return isArray || isTypedArray
}

ConcatStream.prototype.getBody = function () {
  if (this.body.length === 0) return
  if (typeof(this.body[0]) === "string") return this.body.join('')
  if (this.isArray(this.body[0])) return this.arrayConcat(this.body)
  if (typeof(Buffer) !== "undefined" && Buffer.isBuffer(this.body[0])) {
    return Buffer.concat(this.body)
  }
  return this.body
}

ConcatStream.prototype.end = function() {
  if (this.cb) this.cb(false, this.getBody())
}

module.exports = function(cb) {
  return new ConcatStream(cb)
}

module.exports.ConcatStream = ConcatStream

},{"stream":76,"util":92}],99:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('../core');
var inherit = AWS.util.inherit;
var xml2js = require('xml2js');

/**
 * @api private
 */
AWS.XML.Parser = inherit({

  constructor: function XMLParser(rules) {
    this.rules = (rules || {}).members || {};
  },

  // options passed to xml2js parser
  options: {
    explicitCharkey: false, // undocumented
    trim: false,            // trim the leading/trailing whitespace from text nodes
    normalize: false,       // trim interior whitespace inside text nodes
    explicitRoot: false,    // return the root node in the resulting object?
    emptyTag: null,         // the default value for empty nodes
    explicitArray: true,    // always put child nodes in an array
    ignoreAttrs: false,     // ignore attributes, only create text nodes
    mergeAttrs: false,      // merge attributes and child elements
    validator: null         // a callable validator
  },

  parse: function parse(xml) {

    var result = null;
    var error = null;
    var parser = new xml2js.Parser(this.options);
    parser.parseString(xml, function (e, r) {
      error = e;
      result = r;
    });

    if (result) {
      delete result.xmlns;
      return this.parseStructure(result, this.rules);
    } else if (error) {
      throw AWS.util.error(error, {code: 'XMLParserError'});
    } else { // empty xml document
      return this.parseStructure({}, this.rules);
    }

  },

  parseStructure: function parseStructure(structure, rules) {
    var data = {};

    // force array members to always be present
    AWS.util.each.call(this, rules, function(memberName, memberRules) {
      if (memberRules.type == 'list') {
        data[memberRules.name || memberName] = [];
      }
    });

    AWS.util.each.call(this, structure, function (xmlName, value) {
      if (xmlName == '$') {
        AWS.util.each.call(this, value, function (attrName, attrValue) {
          if (rules[attrName]) {
            var rule = rules[attrName];
            data[rule.name || xmlName] = this.parseMember([attrValue], rule);
          }
        });
      } else {
        var rule = rules[xmlName] || {};
        data[rule.name || xmlName] = this.parseMember(value, rule);
      }
    });

    return data;
  },

  parseMap: function parseMap(map, rules) {
    var data = {};
    var keyRules = rules.keys || {};
    var valueRules = rules.members || {};
    var keyName = keyRules.name || 'key';
    var valueName = valueRules.name || 'value';
    if (!rules.flattened) {
      map = map[0].entry;
    }
    AWS.util.arrayEach.call(this, map, function (entry) {
      var value = this.parseMember(entry[valueName], valueRules);
      data[entry[keyName][0]] = value;
    });
    return data;
  },

  parseList: function parseList(list, rules) {
    var data = [];
    var memberRules = rules.members || {};
    var memberName = memberRules.name || 'member';
    if (rules.flattened) {
      AWS.util.arrayEach.call(this, list, function (value) {
        data.push(this.parseMember([value], memberRules));
      });
    } else {
      AWS.util.arrayEach.call(this, list, function (member) {
        AWS.util.arrayEach.call(this, member[memberName], function (value) {
          data.push(this.parseMember([value], memberRules));
        });
      });
    }
    return data;
  },

  parseMember: function parseMember(values, rules) {
    /*jshint maxcomplexity:20*/

    if (values[0] === null) {
      if (rules.type === 'structure') return {};
      if (rules.type === 'list') return [];
      if (rules.type === 'map') return {};
      return null;
    }

    if (values[0]['$'] && values[0]['$'].encoding == 'base64') {
      return AWS.util.base64.decode(values[0]['_']);
    }

    if (!rules.type) {
      if (typeof values[0] === 'string') {
        rules.type = 'string';
      } else if (values[0]['_']) {
        rules.type = 'string';
        values = [values[0]['_']];
      } else {
        rules.type = 'structure';
      }
    }

    if (rules.type === 'string') {

      return values[0];

    } else if (rules.type === 'structure') {

      return this.parseStructure(values[0], rules.members || {});

    } else if (rules.type === 'list') {

      return this.parseList(values, rules);

    } else if (rules.type === 'map') {

      return this.parseMap(values, rules);

    } else if (rules.type === 'integer') {

      return parseInt(values[0], 10);

    } else if (rules.type === 'float') {

      return parseFloat(values[0]);

    } else if (rules.type === 'timestamp') {

      return this.parseTimestamp(values[0]);

    } else if (rules.type === 'boolean') {

      return values[0] === 'true';

    } else {

      var msg = 'unhandled type: ' + rules.type;
      throw AWS.util.error(new Error(msg), {code: 'XMLParserError'});

    }

  },

  parseTimestamp: function parseTimestamp(value) {

    if (value.match(/^\d+$/)) { // unix timestamp

      return new Date(value * 1000);

    } else if (value.match(/^\d{4}/)) { // iso8601
      /*jshint maxcomplexity:20*/

      var parts = value.split(/-|:|\.|T|Z/);
      var date = new Date(parts[0], 0, 1);
      if (parts[1]) { date.setUTCMonth(parts[1] - 1); }
      if (parts[2]) { date.setUTCDate(parts[2]); }
      if (parts[3]) { date.setUTCHours(parts[3]); }
      if (parts[4]) { date.setUTCMinutes(parts[4]); }
      if (parts[5]) { date.setUTCSeconds(parts[5]); }
      if (parts[6]) { date.setUTCMilliseconds(Number('0.' + parts[6]) * 1000); }

      return date;

    } else if (value.match(/^\w{3},/)) { // rfc822

      return new Date(value);

    } else {

      throw AWS.util.error(
        new Error('unhandled timestamp format: ' + value),
        {code: 'TimestampParserError'});

    }

  }

});

},{"../core":2,"xml2js":105}],100:[function(require,module,exports){/**
 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You
 * may not use this file except in compliance with the License. A copy of
 * the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
 * ANY KIND, either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */

var AWS = require('../core');
var builder = require('xmlbuilder');
var inherit = AWS.util.inherit;

/**
 * @api private
 */
AWS.XML.Builder = inherit({

  constructor: function XMLBuilder(root, rules, options) {
    this.root = root;
    this.rules = rules;
    this.xmlns = options.xmlnamespace;
    this.timestampFormat = options.timestampFormat;
  },

  toXML: function toXML(params) {
    var xml = builder.create(this.root);
    if (this.xmlns) xml.att('xmlns', this.xmlns);
    this.serializeStructure(this.rules, params, xml);
    return xml.root().toString();
  },

  serializeStructure: function serializeStructure(rules, params, xml) {

    AWS.util.each.call(this, rules || {}, function (memberName, memberRules) {
      var value = params[memberName];
      if (value !== undefined) {
        if (memberRules.attribute) {
          xml.att(memberRules.name, value);
        } else {
          this.serializeMember(memberName, memberRules, value, xml);
        }
      }
    });
  },

  serializeList: function serializeList(name, rules, list, xml) {
    if (rules.flattened) {
      AWS.util.arrayEach.call(this, list, function (value) {
        this.serializeMember(rules.name || name, rules.members, value, xml);
      });
    } else {
      xml = xml.ele(rules.name || name);
      AWS.util.arrayEach.call(this, list, function (value) {
        var memberName = rules.members.name || 'member';
        this.serializeMember(memberName, rules.members, value, xml);
      });
    }
  },

  serializeMember: function serializeMember(memberName, rules, params, xml) {
    var name = memberName;
    if (rules.type === 'structure') {
      xml = xml.ele(name);
      this.serializeStructure(rules.members, params, xml);
    } else if (rules.type === 'list') {
      this.serializeList(name, rules, params, xml);
    } else if (rules.type === 'timestamp') {
      xml = xml.ele(name, String(AWS.util.date[this.timestampFormat](params)));
    } else {
      xml = xml.ele(name, String(params));
    }
    this.applyNamespaces(xml, rules);
  },

  applyNamespaces: function applyNamespaces(xml, rules) {
    if (rules.xmlns) {
      var attr = 'xmlns';
      if (rules.xmlns.prefix) attr += ':' + rules.xmlns.prefix;
      xml.att(attr, rules.xmlns.uri);
    }
  }


});

},{"../core":2,"xmlbuilder":106}],106:[function(require,module,exports){// Generated by CoffeeScript 1.3.3
(function() {
  var XMLBuilder;

  XMLBuilder = require('./XMLBuilder');

  module.exports.create = function(name, xmldec, doctype) {
    if (name != null) {
      return new XMLBuilder(name, xmldec, doctype).root();
    } else {
      return new XMLBuilder();
    }
  };

}).call(this);

},{"./XMLBuilder":107}],107:[function(require,module,exports){// Generated by CoffeeScript 1.3.3
(function() {
  var XMLBuilder, XMLFragment;

  XMLFragment = require('./XMLFragment');

  XMLBuilder = (function() {

    function XMLBuilder(name, xmldec, doctype) {
      var att, child, _ref;
      this.children = [];
      this.rootObject = null;
      if (this.is(name, 'Object')) {
        _ref = [name, xmldec], xmldec = _ref[0], doctype = _ref[1];
        name = null;
      }
      if (name != null) {
        name = '' + name || '';
        if (xmldec == null) {
          xmldec = {
            'version': '1.0'
          };
        }
      }
      if ((xmldec != null) && !(xmldec.version != null)) {
        throw new Error("Version number is required");
      }
      if (xmldec != null) {
        xmldec.version = '' + xmldec.version || '';
        if (!xmldec.version.match(/1\.[0-9]+/)) {
          throw new Error("Invalid version number: " + xmldec.version);
        }
        att = {
          version: xmldec.version
        };
        if (xmldec.encoding != null) {
          xmldec.encoding = '' + xmldec.encoding || '';
          if (!xmldec.encoding.match(/[A-Za-z](?:[A-Za-z0-9._-]|-)*/)) {
            throw new Error("Invalid encoding: " + xmldec.encoding);
          }
          att.encoding = xmldec.encoding;
        }
        if (xmldec.standalone != null) {
          att.standalone = xmldec.standalone ? "yes" : "no";
        }
        child = new XMLFragment(this, '?xml', att);
        this.children.push(child);
      }
      if (doctype != null) {
        att = {};
        if (name != null) {
          att.name = name;
        }
        if (doctype.ext != null) {
          doctype.ext = '' + doctype.ext || '';
          att.ext = doctype.ext;
        }
        child = new XMLFragment(this, '!DOCTYPE', att);
        this.children.push(child);
      }
      if (name != null) {
        this.begin(name);
      }
    }

    XMLBuilder.prototype.begin = function(name, xmldec, doctype) {
      var doc, root;
      if (!(name != null)) {
        throw new Error("Root element needs a name");
      }
      if (this.rootObject) {
        this.children = [];
        this.rootObject = null;
      }
      if (xmldec != null) {
        doc = new XMLBuilder(name, xmldec, doctype);
        return doc.root();
      }
      name = '' + name || '';
      root = new XMLFragment(this, name, {});
      root.isRoot = true;
      root.documentObject = this;
      this.children.push(root);
      this.rootObject = root;
      return root;
    };

    XMLBuilder.prototype.root = function() {
      return this.rootObject;
    };

    XMLBuilder.prototype.end = function(options) {
      return toString(options);
    };

    XMLBuilder.prototype.toString = function(options) {
      var child, r, _i, _len, _ref;
      r = '';
      _ref = this.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        r += child.toString(options);
      }
      return r;
    };

    XMLBuilder.prototype.is = function(obj, type) {
      var clas;
      clas = Object.prototype.toString.call(obj).slice(8, -1);
      return (obj != null) && clas === type;
    };

    return XMLBuilder;

  })();

  module.exports = XMLBuilder;

}).call(this);

},{"./XMLFragment":108}],108:[function(require,module,exports){// Generated by CoffeeScript 1.3.3
(function() {
  var XMLFragment,
    __hasProp = {}.hasOwnProperty;

  XMLFragment = (function() {

    function XMLFragment(parent, name, attributes, text) {
      this.isRoot = false;
      this.documentObject = null;
      this.parent = parent;
      this.name = name;
      this.attributes = attributes;
      this.value = text;
      this.children = [];
    }

    XMLFragment.prototype.element = function(name, attributes, text) {
      var child, key, val, _ref, _ref1;
      if (!(name != null)) {
        throw new Error("Missing element name");
      }
      name = '' + name || '';
      this.assertLegalChar(name);
      if (attributes == null) {
        attributes = {};
      }
      if (this.is(attributes, 'String') && this.is(text, 'Object')) {
        _ref = [text, attributes], attributes = _ref[0], text = _ref[1];
      } else if (this.is(attributes, 'String')) {
        _ref1 = [{}, attributes], attributes = _ref1[0], text = _ref1[1];
      }
      for (key in attributes) {
        if (!__hasProp.call(attributes, key)) continue;
        val = attributes[key];
        val = '' + val || '';
        attributes[key] = this.escape(val);
      }
      child = new XMLFragment(this, name, attributes);
      if (text != null) {
        text = '' + text || '';
        text = this.escape(text);
        this.assertLegalChar(text);
        child.raw(text);
      }
      this.children.push(child);
      return child;
    };

    XMLFragment.prototype.insertBefore = function(name, attributes, text) {
      var child, i, key, val, _ref, _ref1;
      if (this.isRoot) {
        throw new Error("Cannot insert elements at root level");
      }
      if (!(name != null)) {
        throw new Error("Missing element name");
      }
      name = '' + name || '';
      this.assertLegalChar(name);
      if (attributes == null) {
        attributes = {};
      }
      if (this.is(attributes, 'String') && this.is(text, 'Object')) {
        _ref = [text, attributes], attributes = _ref[0], text = _ref[1];
      } else if (this.is(attributes, 'String')) {
        _ref1 = [{}, attributes], attributes = _ref1[0], text = _ref1[1];
      }
      for (key in attributes) {
        if (!__hasProp.call(attributes, key)) continue;
        val = attributes[key];
        val = '' + val || '';
        attributes[key] = this.escape(val);
      }
      child = new XMLFragment(this.parent, name, attributes);
      if (text != null) {
        text = '' + text || '';
        text = this.escape(text);
        this.assertLegalChar(text);
        child.raw(text);
      }
      i = this.parent.children.indexOf(this);
      this.parent.children.splice(i, 0, child);
      return child;
    };

    XMLFragment.prototype.insertAfter = function(name, attributes, text) {
      var child, i, key, val, _ref, _ref1;
      if (this.isRoot) {
        throw new Error("Cannot insert elements at root level");
      }
      if (!(name != null)) {
        throw new Error("Missing element name");
      }
      name = '' + name || '';
      this.assertLegalChar(name);
      if (attributes == null) {
        attributes = {};
      }
      if (this.is(attributes, 'String') && this.is(text, 'Object')) {
        _ref = [text, attributes], attributes = _ref[0], text = _ref[1];
      } else if (this.is(attributes, 'String')) {
        _ref1 = [{}, attributes], attributes = _ref1[0], text = _ref1[1];
      }
      for (key in attributes) {
        if (!__hasProp.call(attributes, key)) continue;
        val = attributes[key];
        val = '' + val || '';
        attributes[key] = this.escape(val);
      }
      child = new XMLFragment(this.parent, name, attributes);
      if (text != null) {
        text = '' + text || '';
        text = this.escape(text);
        this.assertLegalChar(text);
        child.raw(text);
      }
      i = this.parent.children.indexOf(this);
      this.parent.children.splice(i + 1, 0, child);
      return child;
    };

    XMLFragment.prototype.remove = function() {
      var i, _ref;
      if (this.isRoot) {
        throw new Error("Cannot remove the root element");
      }
      i = this.parent.children.indexOf(this);
      [].splice.apply(this.parent.children, [i, i - i + 1].concat(_ref = [])), _ref;
      return this.parent;
    };

    XMLFragment.prototype.text = function(value) {
      var child;
      if (!(value != null)) {
        throw new Error("Missing element text");
      }
      value = '' + value || '';
      value = this.escape(value);
      this.assertLegalChar(value);
      child = new XMLFragment(this, '', {}, value);
      this.children.push(child);
      return this;
    };

    XMLFragment.prototype.cdata = function(value) {
      var child;
      if (!(value != null)) {
        throw new Error("Missing CDATA text");
      }
      value = '' + value || '';
      this.assertLegalChar(value);
      if (value.match(/]]>/)) {
        throw new Error("Invalid CDATA text: " + value);
      }
      child = new XMLFragment(this, '', {}, '<![CDATA[' + value + ']]>');
      this.children.push(child);
      return this;
    };

    XMLFragment.prototype.comment = function(value) {
      var child;
      if (!(value != null)) {
        throw new Error("Missing comment text");
      }
      value = '' + value || '';
      value = this.escape(value);
      this.assertLegalChar(value);
      if (value.match(/--/)) {
        throw new Error("Comment text cannot contain double-hypen: " + value);
      }
      child = new XMLFragment(this, '', {}, '<!-- ' + value + ' -->');
      this.children.push(child);
      return this;
    };

    XMLFragment.prototype.raw = function(value) {
      var child;
      if (!(value != null)) {
        throw new Error("Missing raw text");
      }
      value = '' + value || '';
      child = new XMLFragment(this, '', {}, value);
      this.children.push(child);
      return this;
    };

    XMLFragment.prototype.up = function() {
      if (this.isRoot) {
        throw new Error("This node has no parent. Use doc() if you need to get the document object.");
      }
      return this.parent;
    };

    XMLFragment.prototype.root = function() {
      var child;
      if (this.isRoot) {
        return this;
      }
      child = this.parent;
      while (!child.isRoot) {
        child = child.parent;
      }
      return child;
    };

    XMLFragment.prototype.document = function() {
      return this.root().documentObject;
    };

    XMLFragment.prototype.end = function(options) {
      return this.document().toString(options);
    };

    XMLFragment.prototype.prev = function() {
      var i;
      if (this.isRoot) {
        throw new Error("Root node has no siblings");
      }
      i = this.parent.children.indexOf(this);
      if (i < 1) {
        throw new Error("Already at the first node");
      }
      return this.parent.children[i - 1];
    };

    XMLFragment.prototype.next = function() {
      var i;
      if (this.isRoot) {
        throw new Error("Root node has no siblings");
      }
      i = this.parent.children.indexOf(this);
      if (i === -1 || i === this.parent.children.length - 1) {
        throw new Error("Already at the last node");
      }
      return this.parent.children[i + 1];
    };

    XMLFragment.prototype.clone = function(deep) {
      var clonedSelf;
      clonedSelf = new XMLFragment(this.parent, this.name, this.attributes, this.value);
      if (deep) {
        this.children.forEach(function(child) {
          var clonedChild;
          clonedChild = child.clone(deep);
          clonedChild.parent = clonedSelf;
          return clonedSelf.children.push(clonedChild);
        });
      }
      return clonedSelf;
    };

    XMLFragment.prototype.importXMLBuilder = function(xmlbuilder) {
      var clonedRoot;
      clonedRoot = xmlbuilder.root().clone(true);
      clonedRoot.parent = this;
      this.children.push(clonedRoot);
      clonedRoot.isRoot = false;
      return this;
    };

    XMLFragment.prototype.attribute = function(name, value) {
      var _ref;
      if (!(name != null)) {
        throw new Error("Missing attribute name");
      }
      if (!(value != null)) {
        throw new Error("Missing attribute value");
      }
      name = '' + name || '';
      value = '' + value || '';
      if ((_ref = this.attributes) == null) {
        this.attributes = {};
      }
      this.attributes[name] = this.escape(value);
      return this;
    };

    XMLFragment.prototype.removeAttribute = function(name) {
      if (!(name != null)) {
        throw new Error("Missing attribute name");
      }
      name = '' + name || '';
      delete this.attributes[name];
      return this;
    };

    XMLFragment.prototype.toString = function(options, level) {
      var attName, attValue, child, indent, newline, pretty, r, space, _i, _len, _ref, _ref1;
      pretty = (options != null) && options.pretty || false;
      indent = (options != null) && options.indent || '  ';
      newline = (options != null) && options.newline || '\n';
      level || (level = 0);
      space = new Array(level + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      if (!(this.value != null)) {
        r += '<' + this.name;
      } else {
        r += '' + this.value;
      }
      _ref = this.attributes;
      for (attName in _ref) {
        attValue = _ref[attName];
        if (this.name === '!DOCTYPE') {
          r += ' ' + attValue;
        } else {
          r += ' ' + attName + '="' + attValue + '"';
        }
      }
      if (this.children.length === 0) {
        if (!(this.value != null)) {
          r += this.name === '?xml' ? '?>' : this.name === '!DOCTYPE' ? '>' : '/>';
        }
        if (pretty) {
          r += newline;
        }
      } else if (pretty && this.children.length === 1 && this.children[0].value) {
        r += '>';
        r += this.children[0].value;
        r += '</' + this.name + '>';
        r += newline;
      } else {
        r += '>';
        if (pretty) {
          r += newline;
        }
        _ref1 = this.children;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          child = _ref1[_i];
          r += child.toString(options, level + 1);
        }
        if (pretty) {
          r += space;
        }
        r += '</' + this.name + '>';
        if (pretty) {
          r += newline;
        }
      }
      return r;
    };

    XMLFragment.prototype.escape = function(str) {
      return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/'/g, '&apos;').replace(/"/g, '&quot;');
    };

    XMLFragment.prototype.assertLegalChar = function(str) {
      var chars, chr;
      chars = /[\u0000-\u0008\u000B-\u000C\u000E-\u001F\uD800-\uDFFF\uFFFE-\uFFFF]/;
      chr = str.match(chars);
      if (chr) {
        throw new Error("Invalid character (" + chr + ") in string: " + str);
      }
    };

    XMLFragment.prototype.is = function(obj, type) {
      var clas;
      clas = Object.prototype.toString.call(obj).slice(8, -1);
      return (obj != null) && clas === type;
    };

    XMLFragment.prototype.ele = function(name, attributes, text) {
      return this.element(name, attributes, text);
    };

    XMLFragment.prototype.txt = function(value) {
      return this.text(value);
    };

    XMLFragment.prototype.dat = function(value) {
      return this.cdata(value);
    };

    XMLFragment.prototype.att = function(name, value) {
      return this.attribute(name, value);
    };

    XMLFragment.prototype.com = function(value) {
      return this.comment(value);
    };

    XMLFragment.prototype.doc = function() {
      return this.document();
    };

    XMLFragment.prototype.e = function(name, attributes, text) {
      return this.element(name, attributes, text);
    };

    XMLFragment.prototype.t = function(value) {
      return this.text(value);
    };

    XMLFragment.prototype.d = function(value) {
      return this.cdata(value);
    };

    XMLFragment.prototype.a = function(name, value) {
      return this.attribute(name, value);
    };

    XMLFragment.prototype.c = function(value) {
      return this.comment(value);
    };

    XMLFragment.prototype.r = function(value) {
      return this.raw(value);
    };

    XMLFragment.prototype.u = function() {
      return this.up();
    };

    return XMLFragment;

  })();

  module.exports = XMLFragment;

}).call(this);

},{}],105:[function(require,module,exports){// Generated by CoffeeScript 1.4.0
(function() {
  var events, isEmpty, sax,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  sax = require('sax');

  events = require('events');

  isEmpty = function(thing) {
    return typeof thing === "object" && (thing != null) && Object.keys(thing).length === 0;
  };

  exports.defaults = {
    "0.1": {
      explicitCharkey: false,
      trim: true,
      normalize: true,
      normalizeTags: false,
      attrkey: "@",
      charkey: "#",
      explicitArray: false,
      ignoreAttrs: false,
      mergeAttrs: false,
      explicitRoot: false,
      validator: null,
      xmlns: false
    },
    "0.2": {
      explicitCharkey: false,
      trim: false,
      normalize: false,
      normalizeTags: false,
      attrkey: "$",
      charkey: "_",
      explicitArray: true,
      ignoreAttrs: false,
      mergeAttrs: false,
      explicitRoot: true,
      validator: null,
      xmlns: false
    }
  };

  exports.ValidationError = (function(_super) {

    __extends(ValidationError, _super);

    function ValidationError(message) {
      this.message = message;
    }

    return ValidationError;

  })(Error);

  exports.Parser = (function(_super) {

    __extends(Parser, _super);

    function Parser(opts) {
      this.parseString = __bind(this.parseString, this);

      this.reset = __bind(this.reset, this);

      var key, value, _ref;
      this.options = {};
      _ref = exports.defaults["0.2"];
      for (key in _ref) {
        if (!__hasProp.call(_ref, key)) continue;
        value = _ref[key];
        this.options[key] = value;
      }
      for (key in opts) {
        if (!__hasProp.call(opts, key)) continue;
        value = opts[key];
        this.options[key] = value;
      }
      if (this.options.xmlns) {
        this.options.xmlnskey = this.options.attrkey + "ns";
      }
      this.reset();
    }

    Parser.prototype.reset = function() {
      var attrkey, charkey, err, stack,
        _this = this;
      this.removeAllListeners();
      this.saxParser = sax.parser(true, {
        trim: false,
        normalize: false,
        xmlns: this.options.xmlns
      });
      err = false;
      this.saxParser.onerror = function(error) {
        if (!err) {
          err = true;
          return _this.emit("error", error);
        }
      };
      this.EXPLICIT_CHARKEY = this.options.explicitCharkey;
      this.resultObject = null;
      stack = [];
      attrkey = this.options.attrkey;
      charkey = this.options.charkey;
      this.saxParser.onopentag = function(node) {
        var key, obj, _ref;
        obj = {};
        obj[charkey] = "";
        if (!_this.options.ignoreAttrs) {
          _ref = node.attributes;
          for (key in _ref) {
            if (!__hasProp.call(_ref, key)) continue;
            if (!(attrkey in obj) && !_this.options.mergeAttrs) {
              obj[attrkey] = {};
            }
            if (_this.options.mergeAttrs) {
              obj[key] = node.attributes[key];
            } else {
              obj[attrkey][key] = node.attributes[key];
            }
          }
        }
        obj["#name"] = _this.options.normalizeTags ? node.name.toLowerCase() : node.name;
        if (_this.options.xmlns) {
          obj[_this.options.xmlnskey] = {
            uri: node.uri,
            local: node.local
          };
        }
        return stack.push(obj);
      };
      this.saxParser.onclosetag = function() {
        var node, nodeName, obj, old, s, xpath;
        obj = stack.pop();
        nodeName = obj["#name"];
        delete obj["#name"];
        s = stack[stack.length - 1];
        if (obj[charkey].match(/^\s*$/)) {
          delete obj[charkey];
        } else {
          if (_this.options.trim) {
            obj[charkey] = obj[charkey].trim();
          }
          if (_this.options.normalize) {
            obj[charkey] = obj[charkey].replace(/\s{2,}/g, " ").trim();
          }
          if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {
            obj = obj[charkey];
          }
        }
        if (_this.options.emptyTag !== void 0 && isEmpty(obj)) {
          obj = _this.options.emptyTag;
        }
        if (_this.options.validator != null) {
          xpath = "/" + ((function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = stack.length; _i < _len; _i++) {
              node = stack[_i];
              _results.push(node["#name"]);
            }
            return _results;
          })()).concat(nodeName).join("/");
          obj = _this.options.validator(xpath, s && s[nodeName], obj);
        }
        if (stack.length > 0) {
          if (!_this.options.explicitArray) {
            if (!(nodeName in s)) {
              return s[nodeName] = obj;
            } else if (s[nodeName] instanceof Array) {
              return s[nodeName].push(obj);
            } else {
              old = s[nodeName];
              s[nodeName] = [old];
              return s[nodeName].push(obj);
            }
          } else {
            if (!(s[nodeName] instanceof Array)) {
              s[nodeName] = [];
            }
            return s[nodeName].push(obj);
          }
        } else {
          if (_this.options.explicitRoot) {
            old = obj;
            obj = {};
            obj[nodeName] = old;
          }
          _this.resultObject = obj;
          return _this.emit("end", _this.resultObject);
        }
      };
      return this.saxParser.ontext = this.saxParser.oncdata = function(text) {
        var s;
        s = stack[stack.length - 1];
        if (s) {
          return s[charkey] += text;
        }
      };
    };

    Parser.prototype.parseString = function(str, cb) {
      if ((cb != null) && typeof cb === "function") {
        this.on("end", function(result) {
          this.reset();
          return cb(null, result);
        });
        this.on("error", function(err) {
          this.reset();
          return cb(err);
        });
      }
      if (str.toString().trim() === '') {
        this.emit("end", null);
        return true;
      }
      try {
        return this.saxParser.write(str.toString());
      } catch (ex) {
        return this.emit("error", ex.message);
      }
    };

    return Parser;

  })(events.EventEmitter);

  exports.parseString = function(str, a, b) {
    var cb, options, parser;
    if (b != null) {
      if (typeof b === 'function') {
        cb = b;
      }
      if (typeof a === 'object') {
        options = a;
      }
    } else {
      if (typeof a === 'function') {
        cb = a;
      }
      options = {};
    }
    parser = new exports.Parser(options);
    return parser.parseString(str, cb);
  };

}).call(this);

},{"events":79,"sax":109}],109:[function(require,module,exports){(function(){// wrapper for non-node envs
;(function (sax) {

sax.parser = function (strict, opt) { return new SAXParser(strict, opt) }
sax.SAXParser = SAXParser
sax.SAXStream = SAXStream
sax.createStream = createStream

// When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.
// When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),
// since that's the earliest that a buffer overrun could occur.  This way, checks are
// as rare as required, but as often as necessary to ensure never crossing this bound.
// Furthermore, buffers are only tested at most once per write(), so passing a very
// large string into write() might have undesirable effects, but this is manageable by
// the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme
// edge case, result in creating at most one complete copy of the string passed in.
// Set to Infinity to have unlimited buffers.
sax.MAX_BUFFER_LENGTH = 64 * 1024

var buffers = [
  "comment", "sgmlDecl", "textNode", "tagName", "doctype",
  "procInstName", "procInstBody", "entity", "attribName",
  "attribValue", "cdata", "script"
]

sax.EVENTS = // for discoverability.
  [ "text"
  , "processinginstruction"
  , "sgmldeclaration"
  , "doctype"
  , "comment"
  , "attribute"
  , "opentag"
  , "closetag"
  , "opencdata"
  , "cdata"
  , "closecdata"
  , "error"
  , "end"
  , "ready"
  , "script"
  , "opennamespace"
  , "closenamespace"
  ]

function SAXParser (strict, opt) {
  if (!(this instanceof SAXParser)) return new SAXParser(strict, opt)

  var parser = this
  clearBuffers(parser)
  parser.q = parser.c = ""
  parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH
  parser.opt = opt || {}
  parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags
  parser.looseCase = parser.opt.lowercase ? "toLowerCase" : "toUpperCase"
  parser.tags = []
  parser.closed = parser.closedRoot = parser.sawRoot = false
  parser.tag = parser.error = null
  parser.strict = !!strict
  parser.noscript = !!(strict || parser.opt.noscript)
  parser.state = S.BEGIN
  parser.ENTITIES = Object.create(sax.ENTITIES)
  parser.attribList = []

  // namespaces form a prototype chain.
  // it always points at the current tag,
  // which protos to its parent tag.
  if (parser.opt.xmlns) parser.ns = Object.create(rootNS)

  // mostly just for error reporting
  parser.trackPosition = parser.opt.position !== false
  if (parser.trackPosition) {
    parser.position = parser.line = parser.column = 0
  }
  emit(parser, "onready")
}

if (!Object.create) Object.create = function (o) {
  function f () { this.__proto__ = o }
  f.prototype = o
  return new f
}

if (!Object.getPrototypeOf) Object.getPrototypeOf = function (o) {
  return o.__proto__
}

if (!Object.keys) Object.keys = function (o) {
  var a = []
  for (var i in o) if (o.hasOwnProperty(i)) a.push(i)
  return a
}

function checkBufferLength (parser) {
  var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10)
    , maxActual = 0
  for (var i = 0, l = buffers.length; i < l; i ++) {
    var len = parser[buffers[i]].length
    if (len > maxAllowed) {
      // Text/cdata nodes can get big, and since they're buffered,
      // we can get here under normal conditions.
      // Avoid issues by emitting the text node now,
      // so at least it won't get any bigger.
      switch (buffers[i]) {
        case "textNode":
          closeText(parser)
        break

        case "cdata":
          emitNode(parser, "oncdata", parser.cdata)
          parser.cdata = ""
        break

        case "script":
          emitNode(parser, "onscript", parser.script)
          parser.script = ""
        break

        default:
          error(parser, "Max buffer length exceeded: "+buffers[i])
      }
    }
    maxActual = Math.max(maxActual, len)
  }
  // schedule the next check for the earliest possible buffer overrun.
  parser.bufferCheckPosition = (sax.MAX_BUFFER_LENGTH - maxActual)
                             + parser.position
}

function clearBuffers (parser) {
  for (var i = 0, l = buffers.length; i < l; i ++) {
    parser[buffers[i]] = ""
  }
}

SAXParser.prototype =
  { end: function () { end(this) }
  , write: write
  , resume: function () { this.error = null; return this }
  , close: function () { return this.write(null) }
  }

try {
  var Stream = require("stream").Stream
} catch (ex) {
  var Stream = function () {}
}


var streamWraps = sax.EVENTS.filter(function (ev) {
  return ev !== "error" && ev !== "end"
})

function createStream (strict, opt) {
  return new SAXStream(strict, opt)
}

function SAXStream (strict, opt) {
  if (!(this instanceof SAXStream)) return new SAXStream(strict, opt)

  Stream.apply(this)

  this._parser = new SAXParser(strict, opt)
  this.writable = true
  this.readable = true


  var me = this

  this._parser.onend = function () {
    me.emit("end")
  }

  this._parser.onerror = function (er) {
    me.emit("error", er)

    // if didn't throw, then means error was handled.
    // go ahead and clear error, so we can write again.
    me._parser.error = null
  }

  streamWraps.forEach(function (ev) {
    Object.defineProperty(me, "on" + ev, {
      get: function () { return me._parser["on" + ev] },
      set: function (h) {
        if (!h) {
          me.removeAllListeners(ev)
          return me._parser["on"+ev] = h
        }
        me.on(ev, h)
      },
      enumerable: true,
      configurable: false
    })
  })
}

SAXStream.prototype = Object.create(Stream.prototype,
  { constructor: { value: SAXStream } })

SAXStream.prototype.write = function (data) {
  this._parser.write(data.toString())
  this.emit("data", data)
  return true
}

SAXStream.prototype.end = function (chunk) {
  if (chunk && chunk.length) this._parser.write(chunk.toString())
  this._parser.end()
  return true
}

SAXStream.prototype.on = function (ev, handler) {
  var me = this
  if (!me._parser["on"+ev] && streamWraps.indexOf(ev) !== -1) {
    me._parser["on"+ev] = function () {
      var args = arguments.length === 1 ? [arguments[0]]
               : Array.apply(null, arguments)
      args.splice(0, 0, ev)
      me.emit.apply(me, args)
    }
  }

  return Stream.prototype.on.call(me, ev, handler)
}



// character classes and tokens
var whitespace = "\r\n\t "
  // this really needs to be replaced with character classes.
  // XML allows all manner of ridiculous numbers and digits.
  , number = "0124356789"
  , letter = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
  // (Letter | "_" | ":")
  , quote = "'\""
  , entity = number+letter+"#"
  , attribEnd = whitespace + ">"
  , CDATA = "[CDATA["
  , DOCTYPE = "DOCTYPE"
  , XML_NAMESPACE = "http://www.w3.org/XML/1998/namespace"
  , XMLNS_NAMESPACE = "http://www.w3.org/2000/xmlns/"
  , rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE }

// turn all the string character sets into character class objects.
whitespace = charClass(whitespace)
number = charClass(number)
letter = charClass(letter)

// http://www.w3.org/TR/REC-xml/#NT-NameStartChar
// This implementation works on strings, a single character at a time
// as such, it cannot ever support astral-plane characters (10000-EFFFF)
// without a significant breaking change to either this  parser, or the
// JavaScript language.  Implementation of an emoji-capable xml parser
// is left as an exercise for the reader.
var nameStart = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/

var nameBody = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040\.\d-]/

quote = charClass(quote)
entity = charClass(entity)
attribEnd = charClass(attribEnd)

function charClass (str) {
  return str.split("").reduce(function (s, c) {
    s[c] = true
    return s
  }, {})
}

function isRegExp (c) {
  return Object.prototype.toString.call(c) === '[object RegExp]'
}

function is (charclass, c) {
  return isRegExp(charclass) ? !!c.match(charclass) : charclass[c]
}

function not (charclass, c) {
  return !is(charclass, c)
}

var S = 0
sax.STATE =
{ BEGIN                     : S++
, TEXT                      : S++ // general stuff
, TEXT_ENTITY               : S++ // &amp and such.
, OPEN_WAKA                 : S++ // <
, SGML_DECL                 : S++ // <!BLARG
, SGML_DECL_QUOTED          : S++ // <!BLARG foo "bar
, DOCTYPE                   : S++ // <!DOCTYPE
, DOCTYPE_QUOTED            : S++ // <!DOCTYPE "//blah
, DOCTYPE_DTD               : S++ // <!DOCTYPE "//blah" [ ...
, DOCTYPE_DTD_QUOTED        : S++ // <!DOCTYPE "//blah" [ "foo
, COMMENT_STARTING          : S++ // <!-
, COMMENT                   : S++ // <!--
, COMMENT_ENDING            : S++ // <!-- blah -
, COMMENT_ENDED             : S++ // <!-- blah --
, CDATA                     : S++ // <![CDATA[ something
, CDATA_ENDING              : S++ // ]
, CDATA_ENDING_2            : S++ // ]]
, PROC_INST                 : S++ // <?hi
, PROC_INST_BODY            : S++ // <?hi there
, PROC_INST_ENDING          : S++ // <?hi "there" ?
, OPEN_TAG                  : S++ // <strong
, OPEN_TAG_SLASH            : S++ // <strong /
, ATTRIB                    : S++ // <a
, ATTRIB_NAME               : S++ // <a foo
, ATTRIB_NAME_SAW_WHITE     : S++ // <a foo _
, ATTRIB_VALUE              : S++ // <a foo=
, ATTRIB_VALUE_QUOTED       : S++ // <a foo="bar
, ATTRIB_VALUE_UNQUOTED     : S++ // <a foo=bar
, ATTRIB_VALUE_ENTITY_Q     : S++ // <foo bar="&quot;"
, ATTRIB_VALUE_ENTITY_U     : S++ // <foo bar=&quot;
, CLOSE_TAG                 : S++ // </a
, CLOSE_TAG_SAW_WHITE       : S++ // </a   >
, SCRIPT                    : S++ // <script> ...
, SCRIPT_ENDING             : S++ // <script> ... <
}

sax.ENTITIES =
{ "amp" : "&"
, "gt" : ">"
, "lt" : "<"
, "quot" : "\""
, "apos" : "'"
, "AElig" : 198
, "Aacute" : 193
, "Acirc" : 194
, "Agrave" : 192
, "Aring" : 197
, "Atilde" : 195
, "Auml" : 196
, "Ccedil" : 199
, "ETH" : 208
, "Eacute" : 201
, "Ecirc" : 202
, "Egrave" : 200
, "Euml" : 203
, "Iacute" : 205
, "Icirc" : 206
, "Igrave" : 204
, "Iuml" : 207
, "Ntilde" : 209
, "Oacute" : 211
, "Ocirc" : 212
, "Ograve" : 210
, "Oslash" : 216
, "Otilde" : 213
, "Ouml" : 214
, "THORN" : 222
, "Uacute" : 218
, "Ucirc" : 219
, "Ugrave" : 217
, "Uuml" : 220
, "Yacute" : 221
, "aacute" : 225
, "acirc" : 226
, "aelig" : 230
, "agrave" : 224
, "aring" : 229
, "atilde" : 227
, "auml" : 228
, "ccedil" : 231
, "eacute" : 233
, "ecirc" : 234
, "egrave" : 232
, "eth" : 240
, "euml" : 235
, "iacute" : 237
, "icirc" : 238
, "igrave" : 236
, "iuml" : 239
, "ntilde" : 241
, "oacute" : 243
, "ocirc" : 244
, "ograve" : 242
, "oslash" : 248
, "otilde" : 245
, "ouml" : 246
, "szlig" : 223
, "thorn" : 254
, "uacute" : 250
, "ucirc" : 251
, "ugrave" : 249
, "uuml" : 252
, "yacute" : 253
, "yuml" : 255
, "copy" : 169
, "reg" : 174
, "nbsp" : 160
, "iexcl" : 161
, "cent" : 162
, "pound" : 163
, "curren" : 164
, "yen" : 165
, "brvbar" : 166
, "sect" : 167
, "uml" : 168
, "ordf" : 170
, "laquo" : 171
, "not" : 172
, "shy" : 173
, "macr" : 175
, "deg" : 176
, "plusmn" : 177
, "sup1" : 185
, "sup2" : 178
, "sup3" : 179
, "acute" : 180
, "micro" : 181
, "para" : 182
, "middot" : 183
, "cedil" : 184
, "ordm" : 186
, "raquo" : 187
, "frac14" : 188
, "frac12" : 189
, "frac34" : 190
, "iquest" : 191
, "times" : 215
, "divide" : 247
, "OElig" : 338
, "oelig" : 339
, "Scaron" : 352
, "scaron" : 353
, "Yuml" : 376
, "fnof" : 402
, "circ" : 710
, "tilde" : 732
, "Alpha" : 913
, "Beta" : 914
, "Gamma" : 915
, "Delta" : 916
, "Epsilon" : 917
, "Zeta" : 918
, "Eta" : 919
, "Theta" : 920
, "Iota" : 921
, "Kappa" : 922
, "Lambda" : 923
, "Mu" : 924
, "Nu" : 925
, "Xi" : 926
, "Omicron" : 927
, "Pi" : 928
, "Rho" : 929
, "Sigma" : 931
, "Tau" : 932
, "Upsilon" : 933
, "Phi" : 934
, "Chi" : 935
, "Psi" : 936
, "Omega" : 937
, "alpha" : 945
, "beta" : 946
, "gamma" : 947
, "delta" : 948
, "epsilon" : 949
, "zeta" : 950
, "eta" : 951
, "theta" : 952
, "iota" : 953
, "kappa" : 954
, "lambda" : 955
, "mu" : 956
, "nu" : 957
, "xi" : 958
, "omicron" : 959
, "pi" : 960
, "rho" : 961
, "sigmaf" : 962
, "sigma" : 963
, "tau" : 964
, "upsilon" : 965
, "phi" : 966
, "chi" : 967
, "psi" : 968
, "omega" : 969
, "thetasym" : 977
, "upsih" : 978
, "piv" : 982
, "ensp" : 8194
, "emsp" : 8195
, "thinsp" : 8201
, "zwnj" : 8204
, "zwj" : 8205
, "lrm" : 8206
, "rlm" : 8207
, "ndash" : 8211
, "mdash" : 8212
, "lsquo" : 8216
, "rsquo" : 8217
, "sbquo" : 8218
, "ldquo" : 8220
, "rdquo" : 8221
, "bdquo" : 8222
, "dagger" : 8224
, "Dagger" : 8225
, "bull" : 8226
, "hellip" : 8230
, "permil" : 8240
, "prime" : 8242
, "Prime" : 8243
, "lsaquo" : 8249
, "rsaquo" : 8250
, "oline" : 8254
, "frasl" : 8260
, "euro" : 8364
, "image" : 8465
, "weierp" : 8472
, "real" : 8476
, "trade" : 8482
, "alefsym" : 8501
, "larr" : 8592
, "uarr" : 8593
, "rarr" : 8594
, "darr" : 8595
, "harr" : 8596
, "crarr" : 8629
, "lArr" : 8656
, "uArr" : 8657
, "rArr" : 8658
, "dArr" : 8659
, "hArr" : 8660
, "forall" : 8704
, "part" : 8706
, "exist" : 8707
, "empty" : 8709
, "nabla" : 8711
, "isin" : 8712
, "notin" : 8713
, "ni" : 8715
, "prod" : 8719
, "sum" : 8721
, "minus" : 8722
, "lowast" : 8727
, "radic" : 8730
, "prop" : 8733
, "infin" : 8734
, "ang" : 8736
, "and" : 8743
, "or" : 8744
, "cap" : 8745
, "cup" : 8746
, "int" : 8747
, "there4" : 8756
, "sim" : 8764
, "cong" : 8773
, "asymp" : 8776
, "ne" : 8800
, "equiv" : 8801
, "le" : 8804
, "ge" : 8805
, "sub" : 8834
, "sup" : 8835
, "nsub" : 8836
, "sube" : 8838
, "supe" : 8839
, "oplus" : 8853
, "otimes" : 8855
, "perp" : 8869
, "sdot" : 8901
, "lceil" : 8968
, "rceil" : 8969
, "lfloor" : 8970
, "rfloor" : 8971
, "lang" : 9001
, "rang" : 9002
, "loz" : 9674
, "spades" : 9824
, "clubs" : 9827
, "hearts" : 9829
, "diams" : 9830
}

Object.keys(sax.ENTITIES).forEach(function (key) {
    var e = sax.ENTITIES[key]
    var s = typeof e === 'number' ? String.fromCharCode(e) : e
    sax.ENTITIES[key] = s
})

for (var S in sax.STATE) sax.STATE[sax.STATE[S]] = S

// shorthand
S = sax.STATE

function emit (parser, event, data) {
  parser[event] && parser[event](data)
}

function emitNode (parser, nodeType, data) {
  if (parser.textNode) closeText(parser)
  emit(parser, nodeType, data)
}

function closeText (parser) {
  parser.textNode = textopts(parser.opt, parser.textNode)
  if (parser.textNode) emit(parser, "ontext", parser.textNode)
  parser.textNode = ""
}

function textopts (opt, text) {
  if (opt.trim) text = text.trim()
  if (opt.normalize) text = text.replace(/\s+/g, " ")
  return text
}

function error (parser, er) {
  closeText(parser)
  if (parser.trackPosition) {
    er += "\nLine: "+parser.line+
          "\nColumn: "+parser.column+
          "\nChar: "+parser.c
  }
  er = new Error(er)
  parser.error = er
  emit(parser, "onerror", er)
  return parser
}

function end (parser) {
  if (!parser.closedRoot) strictFail(parser, "Unclosed root tag")
  if (parser.state !== S.TEXT) error(parser, "Unexpected end")
  closeText(parser)
  parser.c = ""
  parser.closed = true
  emit(parser, "onend")
  SAXParser.call(parser, parser.strict, parser.opt)
  return parser
}

function strictFail (parser, message) {
  if (typeof parser !== 'object' || !(parser instanceof SAXParser))
    throw new Error('bad call to strictFail');
  if (parser.strict) error(parser, message)
}

function newTag (parser) {
  if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]()
  var parent = parser.tags[parser.tags.length - 1] || parser
    , tag = parser.tag = { name : parser.tagName, attributes : {} }

  // will be overridden if tag contails an xmlns="foo" or xmlns:foo="bar"
  if (parser.opt.xmlns) tag.ns = parent.ns
  parser.attribList.length = 0
}

function qname (name) {
  var i = name.indexOf(":")
    , qualName = i < 0 ? [ "", name ] : name.split(":")
    , prefix = qualName[0]
    , local = qualName[1]

  // <x "xmlns"="http://foo">
  if (name === "xmlns") {
    prefix = "xmlns"
    local = ""
  }

  return { prefix: prefix, local: local }
}

function attrib (parser) {
  if (!parser.strict) parser.attribName = parser.attribName[parser.looseCase]()

  if (parser.attribList.hasOwnProperty(parser.attribName) ||
      parser.tag.attributes.hasOwnProperty(parser.attribName)) {
   return parser.attribName = parser.attribValue = ""
  }

  if (parser.opt.xmlns) {
    var qn = qname(parser.attribName)
      , prefix = qn.prefix
      , local = qn.local

    if (prefix === "xmlns") {
      // namespace binding attribute; push the binding into scope
      if (local === "xml" && parser.attribValue !== XML_NAMESPACE) {
        strictFail( parser
                  , "xml: prefix must be bound to " + XML_NAMESPACE + "\n"
                  + "Actual: " + parser.attribValue )
      } else if (local === "xmlns" && parser.attribValue !== XMLNS_NAMESPACE) {
        strictFail( parser
                  , "xmlns: prefix must be bound to " + XMLNS_NAMESPACE + "\n"
                  + "Actual: " + parser.attribValue )
      } else {
        var tag = parser.tag
          , parent = parser.tags[parser.tags.length - 1] || parser
        if (tag.ns === parent.ns) {
          tag.ns = Object.create(parent.ns)
        }
        tag.ns[local] = parser.attribValue
      }
    }

    // defer onattribute events until all attributes have been seen
    // so any new bindings can take effect; preserve attribute order
    // so deferred events can be emitted in document order
    parser.attribList.push([parser.attribName, parser.attribValue])
  } else {
    // in non-xmlns mode, we can emit the event right away
    parser.tag.attributes[parser.attribName] = parser.attribValue
    emitNode( parser
            , "onattribute"
            , { name: parser.attribName
              , value: parser.attribValue } )
  }

  parser.attribName = parser.attribValue = ""
}

function openTag (parser, selfClosing) {
  if (parser.opt.xmlns) {
    // emit namespace binding events
    var tag = parser.tag

    // add namespace info to tag
    var qn = qname(parser.tagName)
    tag.prefix = qn.prefix
    tag.local = qn.local
    tag.uri = tag.ns[qn.prefix] || qn.prefix

    if (tag.prefix && !tag.uri) {
      strictFail(parser, "Unbound namespace prefix: "
                       + JSON.stringify(parser.tagName))
    }

    var parent = parser.tags[parser.tags.length - 1] || parser
    if (tag.ns && parent.ns !== tag.ns) {
      Object.keys(tag.ns).forEach(function (p) {
        emitNode( parser
                , "onopennamespace"
                , { prefix: p , uri: tag.ns[p] } )
      })
    }

    // handle deferred onattribute events
    // Note: do not apply default ns to attributes:
    //   http://www.w3.org/TR/REC-xml-names/#defaulting
    for (var i = 0, l = parser.attribList.length; i < l; i ++) {
      var nv = parser.attribList[i]
      var name = nv[0]
        , value = nv[1]
        , qualName = qname(name)
        , prefix = qualName.prefix
        , local = qualName.local
        , uri = prefix == "" ? "" : (tag.ns[prefix] || "")
        , a = { name: name
              , value: value
              , prefix: prefix
              , local: local
              , uri: uri
              }

      // if there's any attributes with an undefined namespace,
      // then fail on them now.
      if (prefix && prefix != "xmlns" && !uri) {
        strictFail(parser, "Unbound namespace prefix: "
                         + JSON.stringify(prefix))
        a.uri = prefix
      }
      parser.tag.attributes[name] = a
      emitNode(parser, "onattribute", a)
    }
    parser.attribList.length = 0
  }

  parser.tag.isSelfClosing = !!selfClosing

  // process the tag
  parser.sawRoot = true
  parser.tags.push(parser.tag)
  emitNode(parser, "onopentag", parser.tag)
  if (!selfClosing) {
    // special case for <script> in non-strict mode.
    if (!parser.noscript && parser.tagName.toLowerCase() === "script") {
      parser.state = S.SCRIPT
    } else {
      parser.state = S.TEXT
    }
    parser.tag = null
    parser.tagName = ""
  }
  parser.attribName = parser.attribValue = ""
  parser.attribList.length = 0
}

function closeTag (parser) {
  if (!parser.tagName) {
    strictFail(parser, "Weird empty close tag.")
    parser.textNode += "</>"
    parser.state = S.TEXT
    return
  }

  if (parser.script) {
    if (parser.tagName !== "script") {
      parser.script += "</" + parser.tagName + ">"
      parser.tagName = ""
      parser.state = S.SCRIPT
      return
    }
    emitNode(parser, "onscript", parser.script)
    parser.script = ""
  }

  // first make sure that the closing tag actually exists.
  // <a><b></c></b></a> will close everything, otherwise.
  var t = parser.tags.length
  var tagName = parser.tagName
  if (!parser.strict) tagName = tagName[parser.looseCase]()
  var closeTo = tagName
  while (t --) {
    var close = parser.tags[t]
    if (close.name !== closeTo) {
      // fail the first time in strict mode
      strictFail(parser, "Unexpected close tag")
    } else break
  }

  // didn't find it.  we already failed for strict, so just abort.
  if (t < 0) {
    strictFail(parser, "Unmatched closing tag: "+parser.tagName)
    parser.textNode += "</" + parser.tagName + ">"
    parser.state = S.TEXT
    return
  }
  parser.tagName = tagName
  var s = parser.tags.length
  while (s --> t) {
    var tag = parser.tag = parser.tags.pop()
    parser.tagName = parser.tag.name
    emitNode(parser, "onclosetag", parser.tagName)

    var x = {}
    for (var i in tag.ns) x[i] = tag.ns[i]

    var parent = parser.tags[parser.tags.length - 1] || parser
    if (parser.opt.xmlns && tag.ns !== parent.ns) {
      // remove namespace bindings introduced by tag
      Object.keys(tag.ns).forEach(function (p) {
        var n = tag.ns[p]
        emitNode(parser, "onclosenamespace", { prefix: p, uri: n })
      })
    }
  }
  if (t === 0) parser.closedRoot = true
  parser.tagName = parser.attribValue = parser.attribName = ""
  parser.attribList.length = 0
  parser.state = S.TEXT
}

function parseEntity (parser) {
  var entity = parser.entity
    , entityLC = entity.toLowerCase()
    , num
    , numStr = ""
  if (parser.ENTITIES[entity])
    return parser.ENTITIES[entity]
  if (parser.ENTITIES[entityLC])
    return parser.ENTITIES[entityLC]
  entity = entityLC
  if (entity.charAt(0) === "#") {
    if (entity.charAt(1) === "x") {
      entity = entity.slice(2)
      num = parseInt(entity, 16)
      numStr = num.toString(16)
    } else {
      entity = entity.slice(1)
      num = parseInt(entity, 10)
      numStr = num.toString(10)
    }
  }
  entity = entity.replace(/^0+/, "")
  if (numStr.toLowerCase() !== entity) {
    strictFail(parser, "Invalid character entity")
    return "&"+parser.entity + ";"
  }
  return String.fromCharCode(num)
}

function write (chunk) {
  var parser = this
  if (this.error) throw this.error
  if (parser.closed) return error(parser,
    "Cannot write after close. Assign an onready handler.")
  if (chunk === null) return end(parser)
  var i = 0, c = ""
  while (parser.c = c = chunk.charAt(i++)) {
    if (parser.trackPosition) {
      parser.position ++
      if (c === "\n") {
        parser.line ++
        parser.column = 0
      } else parser.column ++
    }
    switch (parser.state) {

      case S.BEGIN:
        if (c === "<") {
          parser.state = S.OPEN_WAKA
          parser.startTagPosition = parser.position
        } else if (not(whitespace,c)) {
          // have to process this as a text node.
          // weird, but happens.
          strictFail(parser, "Non-whitespace before first tag.")
          parser.textNode = c
          parser.state = S.TEXT
        }
      continue

      case S.TEXT:
        if (parser.sawRoot && !parser.closedRoot) {
          var starti = i-1
          while (c && c!=="<" && c!=="&") {
            c = chunk.charAt(i++)
            if (c && parser.trackPosition) {
              parser.position ++
              if (c === "\n") {
                parser.line ++
                parser.column = 0
              } else parser.column ++
            }
          }
          parser.textNode += chunk.substring(starti, i-1)
        }
        if (c === "<") {
          parser.state = S.OPEN_WAKA
          parser.startTagPosition = parser.position
        } else {
          if (not(whitespace, c) && (!parser.sawRoot || parser.closedRoot))
            strictFail(parser, "Text data outside of root node.")
          if (c === "&") parser.state = S.TEXT_ENTITY
          else parser.textNode += c
        }
      continue

      case S.SCRIPT:
        // only non-strict
        if (c === "<") {
          parser.state = S.SCRIPT_ENDING
        } else parser.script += c
      continue

      case S.SCRIPT_ENDING:
        if (c === "/") {
          parser.state = S.CLOSE_TAG
        } else {
          parser.script += "<" + c
          parser.state = S.SCRIPT
        }
      continue

      case S.OPEN_WAKA:
        // either a /, ?, !, or text is coming next.
        if (c === "!") {
          parser.state = S.SGML_DECL
          parser.sgmlDecl = ""
        } else if (is(whitespace, c)) {
          // wait for it...
        } else if (is(nameStart,c)) {
          parser.state = S.OPEN_TAG
          parser.tagName = c
        } else if (c === "/") {
          parser.state = S.CLOSE_TAG
          parser.tagName = ""
        } else if (c === "?") {
          parser.state = S.PROC_INST
          parser.procInstName = parser.procInstBody = ""
        } else {
          strictFail(parser, "Unencoded <")
          // if there was some whitespace, then add that in.
          if (parser.startTagPosition + 1 < parser.position) {
            var pad = parser.position - parser.startTagPosition
            c = new Array(pad).join(" ") + c
          }
          parser.textNode += "<" + c
          parser.state = S.TEXT
        }
      continue

      case S.SGML_DECL:
        if ((parser.sgmlDecl+c).toUpperCase() === CDATA) {
          emitNode(parser, "onopencdata")
          parser.state = S.CDATA
          parser.sgmlDecl = ""
          parser.cdata = ""
        } else if (parser.sgmlDecl+c === "--") {
          parser.state = S.COMMENT
          parser.comment = ""
          parser.sgmlDecl = ""
        } else if ((parser.sgmlDecl+c).toUpperCase() === DOCTYPE) {
          parser.state = S.DOCTYPE
          if (parser.doctype || parser.sawRoot) strictFail(parser,
            "Inappropriately located doctype declaration")
          parser.doctype = ""
          parser.sgmlDecl = ""
        } else if (c === ">") {
          emitNode(parser, "onsgmldeclaration", parser.sgmlDecl)
          parser.sgmlDecl = ""
          parser.state = S.TEXT
        } else if (is(quote, c)) {
          parser.state = S.SGML_DECL_QUOTED
          parser.sgmlDecl += c
        } else parser.sgmlDecl += c
      continue

      case S.SGML_DECL_QUOTED:
        if (c === parser.q) {
          parser.state = S.SGML_DECL
          parser.q = ""
        }
        parser.sgmlDecl += c
      continue

      case S.DOCTYPE:
        if (c === ">") {
          parser.state = S.TEXT
          emitNode(parser, "ondoctype", parser.doctype)
          parser.doctype = true // just remember that we saw it.
        } else {
          parser.doctype += c
          if (c === "[") parser.state = S.DOCTYPE_DTD
          else if (is(quote, c)) {
            parser.state = S.DOCTYPE_QUOTED
            parser.q = c
          }
        }
      continue

      case S.DOCTYPE_QUOTED:
        parser.doctype += c
        if (c === parser.q) {
          parser.q = ""
          parser.state = S.DOCTYPE
        }
      continue

      case S.DOCTYPE_DTD:
        parser.doctype += c
        if (c === "]") parser.state = S.DOCTYPE
        else if (is(quote,c)) {
          parser.state = S.DOCTYPE_DTD_QUOTED
          parser.q = c
        }
      continue

      case S.DOCTYPE_DTD_QUOTED:
        parser.doctype += c
        if (c === parser.q) {
          parser.state = S.DOCTYPE_DTD
          parser.q = ""
        }
      continue

      case S.COMMENT:
        if (c === "-") parser.state = S.COMMENT_ENDING
        else parser.comment += c
      continue

      case S.COMMENT_ENDING:
        if (c === "-") {
          parser.state = S.COMMENT_ENDED
          parser.comment = textopts(parser.opt, parser.comment)
          if (parser.comment) emitNode(parser, "oncomment", parser.comment)
          parser.comment = ""
        } else {
          parser.comment += "-" + c
          parser.state = S.COMMENT
        }
      continue

      case S.COMMENT_ENDED:
        if (c !== ">") {
          strictFail(parser, "Malformed comment")
          // allow <!-- blah -- bloo --> in non-strict mode,
          // which is a comment of " blah -- bloo "
          parser.comment += "--" + c
          parser.state = S.COMMENT
        } else parser.state = S.TEXT
      continue

      case S.CDATA:
        if (c === "]") parser.state = S.CDATA_ENDING
        else parser.cdata += c
      continue

      case S.CDATA_ENDING:
        if (c === "]") parser.state = S.CDATA_ENDING_2
        else {
          parser.cdata += "]" + c
          parser.state = S.CDATA
        }
      continue

      case S.CDATA_ENDING_2:
        if (c === ">") {
          if (parser.cdata) emitNode(parser, "oncdata", parser.cdata)
          emitNode(parser, "onclosecdata")
          parser.cdata = ""
          parser.state = S.TEXT
        } else if (c === "]") {
          parser.cdata += "]"
        } else {
          parser.cdata += "]]" + c
          parser.state = S.CDATA
        }
      continue

      case S.PROC_INST:
        if (c === "?") parser.state = S.PROC_INST_ENDING
        else if (is(whitespace, c)) parser.state = S.PROC_INST_BODY
        else parser.procInstName += c
      continue

      case S.PROC_INST_BODY:
        if (!parser.procInstBody && is(whitespace, c)) continue
        else if (c === "?") parser.state = S.PROC_INST_ENDING
        else parser.procInstBody += c
      continue

      case S.PROC_INST_ENDING:
        if (c === ">") {
          emitNode(parser, "onprocessinginstruction", {
            name : parser.procInstName,
            body : parser.procInstBody
          })
          parser.procInstName = parser.procInstBody = ""
          parser.state = S.TEXT
        } else {
          parser.procInstBody += "?" + c
          parser.state = S.PROC_INST_BODY
        }
      continue

      case S.OPEN_TAG:
        if (is(nameBody, c)) parser.tagName += c
        else {
          newTag(parser)
          if (c === ">") openTag(parser)
          else if (c === "/") parser.state = S.OPEN_TAG_SLASH
          else {
            if (not(whitespace, c)) strictFail(
              parser, "Invalid character in tag name")
            parser.state = S.ATTRIB
          }
        }
      continue

      case S.OPEN_TAG_SLASH:
        if (c === ">") {
          openTag(parser, true)
          closeTag(parser)
        } else {
          strictFail(parser, "Forward-slash in opening tag not followed by >")
          parser.state = S.ATTRIB
        }
      continue

      case S.ATTRIB:
        // haven't read the attribute name yet.
        if (is(whitespace, c)) continue
        else if (c === ">") openTag(parser)
        else if (c === "/") parser.state = S.OPEN_TAG_SLASH
        else if (is(nameStart, c)) {
          parser.attribName = c
          parser.attribValue = ""
          parser.state = S.ATTRIB_NAME
        } else strictFail(parser, "Invalid attribute name")
      continue

      case S.ATTRIB_NAME:
        if (c === "=") parser.state = S.ATTRIB_VALUE
        else if (c === ">") {
          strictFail(parser, "Attribute without value")
          parser.attribValue = parser.attribName
          attrib(parser)
          openTag(parser)
        }
        else if (is(whitespace, c)) parser.state = S.ATTRIB_NAME_SAW_WHITE
        else if (is(nameBody, c)) parser.attribName += c
        else strictFail(parser, "Invalid attribute name")
      continue

      case S.ATTRIB_NAME_SAW_WHITE:
        if (c === "=") parser.state = S.ATTRIB_VALUE
        else if (is(whitespace, c)) continue
        else {
          strictFail(parser, "Attribute without value")
          parser.tag.attributes[parser.attribName] = ""
          parser.attribValue = ""
          emitNode(parser, "onattribute",
                   { name : parser.attribName, value : "" })
          parser.attribName = ""
          if (c === ">") openTag(parser)
          else if (is(nameStart, c)) {
            parser.attribName = c
            parser.state = S.ATTRIB_NAME
          } else {
            strictFail(parser, "Invalid attribute name")
            parser.state = S.ATTRIB
          }
        }
      continue

      case S.ATTRIB_VALUE:
        if (is(whitespace, c)) continue
        else if (is(quote, c)) {
          parser.q = c
          parser.state = S.ATTRIB_VALUE_QUOTED
        } else {
          strictFail(parser, "Unquoted attribute value")
          parser.state = S.ATTRIB_VALUE_UNQUOTED
          parser.attribValue = c
        }
      continue

      case S.ATTRIB_VALUE_QUOTED:
        if (c !== parser.q) {
          if (c === "&") parser.state = S.ATTRIB_VALUE_ENTITY_Q
          else parser.attribValue += c
          continue
        }
        attrib(parser)
        parser.q = ""
        parser.state = S.ATTRIB
      continue

      case S.ATTRIB_VALUE_UNQUOTED:
        if (not(attribEnd,c)) {
          if (c === "&") parser.state = S.ATTRIB_VALUE_ENTITY_U
          else parser.attribValue += c
          continue
        }
        attrib(parser)
        if (c === ">") openTag(parser)
        else parser.state = S.ATTRIB
      continue

      case S.CLOSE_TAG:
        if (!parser.tagName) {
          if (is(whitespace, c)) continue
          else if (not(nameStart, c)) {
            if (parser.script) {
              parser.script += "</" + c
              parser.state = S.SCRIPT
            } else {
              strictFail(parser, "Invalid tagname in closing tag.")
            }
          } else parser.tagName = c
        }
        else if (c === ">") closeTag(parser)
        else if (is(nameBody, c)) parser.tagName += c
        else if (parser.script) {
          parser.script += "</" + parser.tagName
          parser.tagName = ""
          parser.state = S.SCRIPT
        } else {
          if (not(whitespace, c)) strictFail(parser,
            "Invalid tagname in closing tag")
          parser.state = S.CLOSE_TAG_SAW_WHITE
        }
      continue

      case S.CLOSE_TAG_SAW_WHITE:
        if (is(whitespace, c)) continue
        if (c === ">") closeTag(parser)
        else strictFail(parser, "Invalid characters in closing tag")
      continue

      case S.TEXT_ENTITY:
      case S.ATTRIB_VALUE_ENTITY_Q:
      case S.ATTRIB_VALUE_ENTITY_U:
        switch(parser.state) {
          case S.TEXT_ENTITY:
            var returnState = S.TEXT, buffer = "textNode"
          break

          case S.ATTRIB_VALUE_ENTITY_Q:
            var returnState = S.ATTRIB_VALUE_QUOTED, buffer = "attribValue"
          break

          case S.ATTRIB_VALUE_ENTITY_U:
            var returnState = S.ATTRIB_VALUE_UNQUOTED, buffer = "attribValue"
          break
        }
        if (c === ";") {
          parser[buffer] += parseEntity(parser)
          parser.entity = ""
          parser.state = returnState
        }
        else if (is(entity, c)) parser.entity += c
        else {
          strictFail(parser, "Invalid character entity")
          parser[buffer] += "&" + parser.entity + c
          parser.entity = ""
          parser.state = returnState
        }
      continue

      default:
        throw new Error(parser, "Unknown state: " + parser.state)
    }
  } // while
  // cdata blocks can get very big under normal conditions. emit and move on.
  // if (parser.state === S.CDATA && parser.cdata) {
  //   emitNode(parser, "oncdata", parser.cdata)
  //   parser.cdata = ""
  // }
  if (parser.position >= parser.bufferCheckPosition) checkBufferLength(parser)
  return parser
}

})(typeof exports === "undefined" ? sax = {} : exports)

})()
},{"stream":76}]},{},[1]);
